"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) { $froundBuf[0] = f; return $froundBuf[0]; };

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(method) {
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(null, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $internalCopy(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copy = function(dst, src, typ) {
  switch (typ.kind) {
  case $kindArray:
    $internalCopy(dst, src, 0, 0, src.length, typ.elem);
    break;
  case $kindStruct:
    for (var i = 0; i < typ.fields.length; i++) {
      var f = typ.fields[i];
      switch (f.typ.kind) {
      case $kindArray:
      case $kindStruct:
        $copy(dst[f.prop], src[f.prop], f.typ);
        continue;
      default:
        dst[f.prop] = src[f.prop];
        continue;
      }
    }
    break;
  }
};

var $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        $copy(dst[dstOffset + i], src[srcOffset + i], elem);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      $copy(dst[dstOffset + i], src[srcOffset + i], elem);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  $copy(clone, src, type);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; },
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $internalCopy(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindPtr:
    if (a.constructor.elem) {
      return a === b;
    }
    return $pointerIsEqual(a, b);
  case $kindArray:
    if (a.length != b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $pointerIsEqual = function(a, b) {
  if (a === b) {
    return true;
  }
  if (a.$get === $throwNilPointerError || b.$get === $throwNilPointerError) {
    return a.$get === $throwNilPointerError && b.$get === $throwNilPointerError;
  }
  var va = a.$get();
  var vb = b.$get();
  if (va !== vb) {
    return false;
  }
  var dummy = va + 1;
  a.$set(dummy);
  var equal = b.$get() === dummy;
  a.$set(va);
  return equal;
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $newType = function(size, kind, string, name, pkg, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindString:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + this.$val; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + $floatKey(this.$val); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$real + "$" + this.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$real + "$" + this.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { $copy(this, v, typ); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.prototype.$key = function() {
        return string + "$" + Array.prototype.join.call($mapArray(this.$val, function(e) {
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(capacity) {
      this.$val = this;
      this.$capacity = capacity;
      this.$buffer = [];
      this.$sendQueue = [];
      this.$recvQueue = [];
      this.$closed = false;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
      typ.nil = new typ(0);
      typ.nil.$sendQueue = typ.nil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { $copy(this, v, typ); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.prototype.$key = function() {
        var val = this.$val;
        return string + "$" + $mapArray(fields, function(f) {
          var e = val[f.prop];
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.name === "") {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindChan:
  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkg = pkg;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if(e.typ.typeName !== "") {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.name === "") {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var string = "[" + len + "]" + elem.string;
  var typ = $arrayTypes[string];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, string, "", "", null);
    $arrayTypes[string] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var paramTypes = $mapArray(params, function(p) { return p.string; });
  if (variadic) {
    paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
  }
  var string = "func(" + paramTypes.join(", ") + ")";
  if (results.length === 1) {
    string += " " + results[0].string;
  } else if (results.length > 1) {
    string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
  }
  var typ = $funcTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[string] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var string = "interface {}";
  if (methods.length !== 0) {
    string = "interface { " + $mapArray(methods, function(m) {
      return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
    }).join("; ") + " }";
  }
  var typ = $interfaceTypes[string];
  if (typ === undefined) {
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[string] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = { $key: function() { return "nil"; } };
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $Map = function() {};
(function() {
  var names = Object.getOwnPropertyNames(Object.prototype);
  for (var i = 0; i < names.length; i++) {
    $Map.prototype[names[i]] = undefined;
  }
})();
var $mapTypes = {};
var $mapType = function(key, elem) {
  var string = "map[" + key.string + "]" + elem.string;
  var typ = $mapTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, string, "", "", null);
    $mapTypes[string] = typ;
    typ.init(key, elem);
  }
  return typ;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $sliceType = function(elem) {
  var typ = elem.Slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.Slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(fields) {
  var string = "struct { " + $mapArray(fields, function(f) {
    return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
  }).join("; ") + " }";
  if (fields.length === 0) {
    string = "struct {}";
  }
  var typ = $structTypes[string];
  if (typ === undefined) {
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[string] = typ;
    typ.init(fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === 1/0 || n.$real === -1/0 || n.$imag === 1/0 || n.$imag === -1/0;
  var dinf = d.$real === 1/0 || d.$real === -1/0 || d.$imag === 1/0 || d.$imag === -1/0;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(0/0, 0/0);
  }
  if (ninf && !dinf) {
    return new n.constructor(1/0, 1/0);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(0/0, 0/0);
    }
    return new n.constructor(1/0, 1/0);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $deferFrames = [], $skippedDeferFrames = 0, $jumpToDefer = false, $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr) {
  if ($skippedDeferFrames !== 0) {
    $skippedDeferFrames--;
    throw jsErr;
  }
  if ($jumpToDefer) {
    $jumpToDefer = false;
    throw jsErr;
  }
  if (jsErr) {
    var newErr = null;
    try {
      $deferFrames.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $deferFrames.pop();
    $callDeferred(deferred, newErr);
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  var call, localSkippedDeferFrames = 0;
  try {
    while (true) {
      if (deferred === null) {
        deferred = $deferFrames[$deferFrames.length - 1 - localSkippedDeferFrames];
        if (deferred === undefined) {
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error($BLOCKING);
            if (msg && msg.$blocking) { msg = msg(); }
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String($BLOCKING);
            if (msg && msg.$blocking) { msg = msg(); }
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        if (localPanicValue !== undefined) {
          localSkippedDeferFrames++;
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(undefined, call[1]);
      if (r && r.$blocking) {
        deferred.push([r, []]);
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    $skippedDeferFrames += localSkippedDeferFrames;
    if ($curGoroutine.asleep) {
      deferred.push(call);
      $jumpToDefer = true;
    }
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $BLOCKING = new Object();
var $nonblockingCall = function() {
  $panic(new $packages["runtime"].NotSupportedError.ptr("non-blocking call to blocking function, see https://github.com/gopherjs/gopherjs#goroutines"));
};

var $dummyGoroutine = { asleep: false, exit: false, panicStack: [] };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  args.push($BLOCKING);
  var goroutine = function() {
    var rescheduled = false;
    try {
      $curGoroutine = goroutine;
      $skippedDeferFrames = 0;
      $jumpToDefer = false;
      var r = fun.apply(undefined, args);
      if (r && r.$blocking) {
        fun = r;
        args = [];
        $schedule(goroutine, direct);
        rescheduled = true;
        return;
      }
      goroutine.exit = true;
    } catch (err) {
      if (!$curGoroutine.asleep) {
        goroutine.exit = true;
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if (goroutine.exit && !rescheduled) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        goroutine.asleep = true;
      }
      if (goroutine.asleep && !rescheduled) {
        $awakeGoroutines--;
        if ($awakeGoroutines === 0 && $totalGoroutines !== 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
        }
      }
    }
  };
  goroutine.asleep = false;
  goroutine.exit = false;
  goroutine.panicStack = [];
  $schedule(goroutine, direct);
};

var $scheduled = [], $schedulerLoopActive = false;
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerLoopActive) {
    $schedulerLoopActive = true;
    setTimeout(function() {
      while (true) {
        var r = $scheduled.shift();
        if (r === undefined) {
          $schedulerLoopActive = false;
          break;
        }
        r();
      };
    }, 0);
  }
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  var blocked = false;
  var f = function() {
    if (blocked) {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      return;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.constructor.elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine, value;
  var queueEntry = function(v) {
    value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  var blocked = false;
  var f = function() {
    if (blocked) {
      return value;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.constructor.elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  var blocked = false;
  var f = function() {
    if (blocked) {
      return selection;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    if (v === $throwNilPointerError) {
      return null;
    }
    if (v.$externalizeWrapper === undefined) {
      $checkForDeadlock = false;
      var convert = false;
      for (var i = 0; i < t.params.length; i++) {
        convert = convert || (t.params[i] !== $jsObjectPtr);
      }
      for (var i = 0; i < t.results.length; i++) {
        convert = convert || $needsExternalization(t.results[i]);
      }
      v.$externalizeWrapper = v;
      if (convert) {
        v.$externalizeWrapper = function() {
          var args = [];
          for (var i = 0; i < t.params.length; i++) {
            if (t.variadic && i === t.params.length - 1) {
              var vt = t.params[i].elem, varargs = [];
              for (var j = i; j < arguments.length; j++) {
                varargs.push($internalize(arguments[j], vt));
              }
              args.push(new (t.params[i])(varargs));
              break;
            }
            args.push($internalize(arguments[i], t.params[i]));
          }
          var result = v.apply(this, args);
          switch (t.results.length) {
          case 0:
            return;
          case 1:
            return $externalize(result, t.results[0]);
          default:
            for (var i = 0; i < t.results.length; i++) {
              result[i] = $externalize(result[i], t.results[i]);
            }
            return result;
          }
        };
      }
    }
    return v.$externalizeWrapper;
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      s += String.fromCharCode(r[0]);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        for (var i = 0; i < t.fields.length; i++) {
          var f = t.fields[i];
          var o = searchJsObject(v[f.prop], f.typ);
          if (o !== noJsObject) {
            return o;
          }
        }
        return noJsObject;
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $panic(new $String("cannot externalize " + t.string));
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $panic(new $String("cannot internalize js.Object, use *js.Object instead"));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $panic(new $String("cannot internalize " + t.string));
    }
    if (v === null) {
      return $ifaceNil;
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      var timePkg = $packages["time"];
      if (timePkg) {
        return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));
      }
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = new $Map();
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var key = $internalize(keys[i], t.key);
      m[key.$key ? key.$key() : key] = { k: key, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    for (var i = 0; i < v.length; i++) {
      s += $encodeRune(v.charCodeAt(i));
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $panic(new $String("cannot internalize js.Object, use *js.Object instead"));
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        for (var i = 0; i < t.fields.length; i++) {
          var f = t.fields[i];
          var o = searchJsObject(f.typ);
          if (o !== noJsObject) {
            var n = new t.ptr();
            n[f.prop] = o;
            return n;
          }
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $panic(new $String("cannot internalize " + t.string));
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, Object, Error, sliceType$1, sliceType$2, sliceType$3, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", function(object_) {
		this.$val = this;
		this.object = object_ !== undefined ? object_ : null;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$3 = $ptrType(Object);
	ptrType$4 = $ptrType(Object);
	ptrType$5 = $ptrType(Object);
	ptrType$6 = $ptrType(Object);
	ptrType$7 = $ptrType(Object);
	ptrType$8 = $ptrType(Object);
	ptrType$9 = $ptrType(Object);
	ptrType$10 = $ptrType(Error);
	ptrType$11 = $ptrType(Object);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType$1)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType$2));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType$3))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var e;
		e = new Error.ptr(null);
	};
	ptrType$8.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType$3], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType$4], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType$1], [ptrType$5], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType$2], [ptrType$6], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType$3], [ptrType$7], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$10.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init([{prop: "object", name: "object", pkg: "github.com/gopherjs/gopherjs/js", typ: ptrType$9, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", typ: ptrType$11, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_js = function() { while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } }; $init_js.$blocking = true; return $init_js;
	};
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, js, NotSupportedError, TypeAssertionError, errorString, ptrType$7, ptrType$9, init, GOROOT, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	NotSupportedError = $pkg.NotSupportedError = $newType(0, $kindStruct, "runtime.NotSupportedError", "NotSupportedError", "runtime", function(Feature_) {
		this.$val = this;
		this.Feature = Feature_ !== undefined ? Feature_ : "";
	});
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		this.interfaceString = interfaceString_ !== undefined ? interfaceString_ : "";
		this.concreteString = concreteString_ !== undefined ? concreteString_ : "";
		this.assertedString = assertedString_ !== undefined ? assertedString_ : "";
		this.missingMethod = missingMethod_ !== undefined ? missingMethod_ : "";
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
	ptrType$7 = $ptrType(NotSupportedError);
	ptrType$9 = $ptrType(TypeAssertionError);
	NotSupportedError.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "not supported by GopherJS: " + err.Feature;
	};
	NotSupportedError.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = (function(msg) {
			var msg;
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		e = new NotSupportedError.ptr("");
	};
	GOROOT = $pkg.GOROOT = function() {
		var goroot, process;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (!(goroot === undefined)) {
			return $internalize(goroot, $String);
		}
		return "/usr/local/go";
	};
	SetFinalizer = $pkg.SetFinalizer = function(x, f) {
		var f, x;
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	NotSupportedError.init([{prop: "Feature", name: "Feature", pkg: "", typ: $String, tag: ""}]);
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", typ: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_runtime = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		init();
		/* */ } return; } }; $init_runtime.$blocking = true; return $init_runtime;
	};
	return $pkg;
})();
$packages["github.com/albrow/jasmine"] = (function() {
	var $pkg = {}, js, Expectation, ptrType, funcType, funcType$2, funcType$8, ptrType$1, ptrType$2, Describe, It, BeforeEach, Expect;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Expectation = $pkg.Expectation = $newType(0, $kindStruct, "jasmine.Expectation", "Expectation", "github.com/albrow/jasmine", function(o_, Not_) {
		this.$val = this;
		this.o = o_ !== undefined ? o_ : null;
		this.Not = Not_ !== undefined ? Not_ : ptrType.nil;
	});
	ptrType = $ptrType(Expectation);
	funcType = $funcType([], [], false);
	funcType$2 = $funcType([], [], false);
	funcType$8 = $funcType([], [], false);
	ptrType$1 = $ptrType(Expectation);
	ptrType$2 = $ptrType(js.Object);
	Expectation.ptr.prototype.ToBe = function(value) {
		var e, value;
		e = this;
		e.o.toBe($externalize(value, $emptyInterface));
	};
	Expectation.prototype.ToBe = function(value) { return this.$val.ToBe(value); };
	Expectation.ptr.prototype.ToEqual = function(value) {
		var e, value;
		e = this;
		e.o.toEqual($externalize(value, $emptyInterface));
	};
	Expectation.prototype.ToEqual = function(value) { return this.$val.ToEqual(value); };
	Expectation.ptr.prototype.ToMatch = function(value) {
		var e, value;
		e = this;
		e.o.toMatch($externalize(value, $emptyInterface));
	};
	Expectation.prototype.ToMatch = function(value) { return this.$val.ToMatch(value); };
	Expectation.ptr.prototype.ToBeDefined = function() {
		var e;
		e = this;
		e.o.toBeDefined();
	};
	Expectation.prototype.ToBeDefined = function() { return this.$val.ToBeDefined(); };
	Expectation.ptr.prototype.ToBeUndefined = function() {
		var e;
		e = this;
		e.o.toBeUndefined();
	};
	Expectation.prototype.ToBeUndefined = function() { return this.$val.ToBeUndefined(); };
	Expectation.ptr.prototype.ToBeNull = function() {
		var e;
		e = this;
		e.o.toBeNull();
	};
	Expectation.prototype.ToBeNull = function() { return this.$val.ToBeNull(); };
	Expectation.ptr.prototype.ToBeTruthy = function() {
		var e;
		e = this;
		e.o.toBeTruthy();
	};
	Expectation.prototype.ToBeTruthy = function() { return this.$val.ToBeTruthy(); };
	Expectation.ptr.prototype.ToBeFalsy = function() {
		var e;
		e = this;
		e.o.toBeFalsy();
	};
	Expectation.prototype.ToBeFalsy = function() { return this.$val.ToBeFalsy(); };
	Expectation.ptr.prototype.ToContain = function(value) {
		var e, value;
		e = this;
		e.o.toContain($externalize(value, $emptyInterface));
	};
	Expectation.prototype.ToContain = function(value) { return this.$val.ToContain(value); };
	Expectation.ptr.prototype.ToBeLessThan = function(value) {
		var e, value;
		e = this;
		e.o.toBeLessThan($externalize(value, $emptyInterface));
	};
	Expectation.prototype.ToBeLessThan = function(value) { return this.$val.ToBeLessThan(value); };
	Expectation.ptr.prototype.ToBeGreaterThan = function(value) {
		var e, value;
		e = this;
		e.o.toBeGreaterThan($externalize(value, $emptyInterface));
	};
	Expectation.prototype.ToBeGreaterThan = function(value) { return this.$val.ToBeGreaterThan(value); };
	Expectation.ptr.prototype.ToBeCloseTo = function(value, percision) {
		var e, percision, value;
		e = this;
		e.o.toBeCloseTo($externalize(value, $emptyInterface), percision);
	};
	Expectation.prototype.ToBeCloseTo = function(value, percision) { return this.$val.ToBeCloseTo(value, percision); };
	Describe = $pkg.Describe = function(name, fn) {
		var fn, name;
		$global.describe($externalize(name, $String), $externalize(fn, funcType));
	};
	It = $pkg.It = function(behavior, fn) {
		var behavior, fn;
		$global.it($externalize(behavior, $String), $externalize(fn, funcType$2));
	};
	BeforeEach = $pkg.BeforeEach = function(fn) {
		var fn;
		$global.beforeEach($externalize(fn, funcType$8));
	};
	Expect = $pkg.Expect = function(value) {
		var value;
		return new Expectation.ptr($global.expect($externalize(value, $emptyInterface)), ptrType.nil);
	};
	ptrType$1.methods = [{prop: "ToBe", name: "ToBe", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "ToEqual", name: "ToEqual", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "ToMatch", name: "ToMatch", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "ToBeDefined", name: "ToBeDefined", pkg: "", typ: $funcType([], [], false)}, {prop: "ToBeUndefined", name: "ToBeUndefined", pkg: "", typ: $funcType([], [], false)}, {prop: "ToBeNull", name: "ToBeNull", pkg: "", typ: $funcType([], [], false)}, {prop: "ToBeTruthy", name: "ToBeTruthy", pkg: "", typ: $funcType([], [], false)}, {prop: "ToBeFalsy", name: "ToBeFalsy", pkg: "", typ: $funcType([], [], false)}, {prop: "ToContain", name: "ToContain", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "ToBeLessThan", name: "ToBeLessThan", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "ToBeGreaterThan", name: "ToBeGreaterThan", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "ToBeCloseTo", name: "ToBeCloseTo", pkg: "", typ: $funcType([$emptyInterface, $Int], [], false)}];
	Expectation.init([{prop: "o", name: "o", pkg: "github.com/albrow/jasmine", typ: ptrType$2, tag: ""}, {prop: "Not", name: "Not", pkg: "", typ: ptrType, tag: "js:\"not\""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_jasmine = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_jasmine.$blocking = true; return $init_jasmine;
	};
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : "";
	});
	ptrType = $ptrType(errorString);
	New = $pkg.New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", typ: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_errors = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_errors.$blocking = true; return $init_errors;
	};
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, js, CompareAndSwapInt32, AddInt32, LoadUint32, StoreInt32, StoreUint32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = $pkg.CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	AddInt32 = $pkg.AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	LoadUint32 = $pkg.LoadUint32 = function(addr) {
		var addr;
		return addr.$get();
	};
	StoreInt32 = $pkg.StoreInt32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	StoreUint32 = $pkg.StoreUint32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_atomic = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_atomic.$blocking = true; return $init_atomic;
	};
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, runtime, atomic, Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, ptrType, sliceType, structType, chanType, structType$1, chanType$1, sliceType$1, structType$2, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$16, sliceType$3, ptrType$19, sliceType$4, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, sliceType$5, ptrType$42, ptrType$43, funcType, ptrType$46, funcType$1, ptrType$47, arrayType, ptrType$48, ptrType$49, semWaiters, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_Semrelease, runtime_Syncsemcheck, poolCleanup, init, indexLocal, raceEnable, init$1;
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		this.local = local_ !== undefined ? local_ : 0;
		this.localSize = localSize_ !== undefined ? localSize_ : 0;
		this.store = store_ !== undefined ? store_ : sliceType$5.nil;
		this.New = New_ !== undefined ? New_ : $throwNilPointerError;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.sema = sema_ !== undefined ? sema_ : 0;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.ptr();
		this.done = done_ !== undefined ? done_ : 0;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		this.private$0 = private$0_ !== undefined ? private$0_ : $ifaceNil;
		this.shared = shared_ !== undefined ? shared_ : sliceType$3.nil;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new Mutex.ptr();
		this.pad = pad_ !== undefined ? pad_ : arrayType.zero();
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		this.lock = lock_ !== undefined ? lock_ : 0;
		this.head = head_ !== undefined ? head_ : 0;
		this.tail = tail_ !== undefined ? tail_ : 0;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	structType = $structType([]);
	chanType = $chanType(structType, false, false);
	structType$1 = $structType([]);
	chanType$1 = $chanType(structType$1, false, false);
	sliceType$1 = $sliceType(chanType$1);
	structType$2 = $structType([]);
	ptrType$6 = $ptrType($Int32);
	ptrType$7 = $ptrType($Int32);
	ptrType$8 = $ptrType($Uint32);
	ptrType$9 = $ptrType($Int32);
	ptrType$10 = $ptrType($Int32);
	ptrType$11 = $ptrType($Uint32);
	ptrType$12 = $ptrType($Uint32);
	ptrType$13 = $ptrType($Uint32);
	ptrType$16 = $ptrType(poolLocal);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$19 = $ptrType(Pool);
	sliceType$4 = $sliceType(ptrType$19);
	ptrType$20 = $ptrType($Int32);
	ptrType$21 = $ptrType($Uint32);
	ptrType$22 = $ptrType($Int32);
	ptrType$23 = $ptrType($Int32);
	ptrType$24 = $ptrType($Uint32);
	ptrType$25 = $ptrType($Int32);
	ptrType$26 = $ptrType($Int32);
	ptrType$27 = $ptrType($Uint32);
	ptrType$28 = $ptrType($Int32);
	ptrType$29 = $ptrType($Uint32);
	ptrType$30 = $ptrType(rlocker);
	ptrType$31 = $ptrType(RWMutex);
	ptrType$32 = $ptrType(RWMutex);
	sliceType$5 = $sliceType($emptyInterface);
	ptrType$42 = $ptrType(poolLocal);
	ptrType$43 = $ptrType(Pool);
	funcType = $funcType([], [$emptyInterface], false);
	ptrType$46 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$47 = $ptrType(Once);
	arrayType = $arrayType($Uint8, 128);
	ptrType$48 = $ptrType(RWMutex);
	ptrType$49 = $ptrType(rlocker);
	Pool.ptr.prototype.Get = function() {
		var p, x, x$1, x$2;
		p = this;
		if (p.store.$length === 0) {
			if (!(p.New === $throwNilPointerError)) {
				return p.New();
			}
			return $ifaceNil;
		}
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var cleanup;
	};
	runtime_Semacquire = function(s, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _entry, _key, _r, ch;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_runtime_Semacquire = function() { s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new chanType(0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: $append((_entry = semWaiters[s.$key()], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch, $BLOCKING); /* */ $s = 3; case 3: if (_r && _r.$blocking) { _r = _r(); }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		/* */ case -1: } return; } }; $blocking_runtime_Semacquire.$blocking = true; return $blocking_runtime_Semacquire;
	};
	runtime_Semrelease = function(s, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _entry, _key, ch, w;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_runtime_Semrelease = function() { s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[s.$key()], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			return;
		}
		ch = (0 >= w.$length ? $throwRuntimeError("index out of range") : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[s.$key()];
		}
		$r = $send(ch, new structType$2.ptr(), $BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ case -1: } return; } }; $blocking_runtime_Semrelease.$blocking = true; return $blocking_runtime_Semrelease;
	};
	runtime_Syncsemcheck = function(size) {
		var size;
	};
	Mutex.ptr.prototype.Lock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, awoke, m, new$1, old;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Lock = function() { s: while (true) { switch ($s) { case 0:
		m = $this;
		if (atomic.CompareAndSwapInt32(new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), 0, 1)) {
			return;
		}
		awoke = false;
		/* while (true) { */ case 1:
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = new$1 & ~(2);
			}
			/* */ if (atomic.CompareAndSwapInt32(new ptrType$7(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32(new ptrType$7(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) { */ case 3:
				if ((old & 1) === 0) {
					/* break; */ $s = 2; continue;
				}
				$r = runtime_Semacquire(new ptrType$8(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m), $BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
				awoke = true;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		/* */ case -1: } return; } }; $blocking_Lock.$blocking = true; return $blocking_Lock;
	};
	Mutex.prototype.Lock = function($b) { return this.$val.Lock($b); };
	Mutex.ptr.prototype.Unlock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, m, new$1, old;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Unlock = function() { s: while (true) { switch ($s) { case 0:
		m = $this;
		new$1 = atomic.AddInt32(new ptrType$9(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		/* while (true) { */ case 1:
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			/* */ if (atomic.CompareAndSwapInt32(new ptrType$10(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.CompareAndSwapInt32(new ptrType$10(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) { */ case 3:
				$r = runtime_Semrelease(new ptrType$11(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m), $BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
				return;
			/* } */ case 4:
			old = m.state;
		/* } */ $s = 1; continue; case 2:
		/* */ case -1: } return; } }; $blocking_Unlock.$blocking = true; return $blocking_Unlock;
	};
	Mutex.prototype.Unlock = function($b) { return this.$val.Unlock($b); };
	Once.ptr.prototype.Do = function(f, $b) {
		var $args = arguments, $deferred = [], $err = null, $r, $s = 0, $this = this, o;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Do = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		o = $this;
		if (atomic.LoadUint32(new ptrType$12(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)) === 1) {
			return;
		}
		$r = o.m.Lock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$deferred.push([$methodVal(o.m, "Unlock"), [$BLOCKING]]);
		if (o.done === 0) {
			$deferred.push([atomic.StoreUint32, [new ptrType$13(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o), 1, $BLOCKING]]);
			f();
		}
		/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); } }; $blocking_Do.$blocking = true; return $blocking_Do;
	};
	Once.prototype.Do = function(f, $b) { return this.$val.Do(f, $b); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < (p.localSize >> 0))) { break; }
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.shared, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.shared = sliceType$3.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType$4([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var i, l, x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	raceEnable = function() {
	};
	init$1 = function() {
		var s;
		s = $clone(new syncSema.ptr(), syncSema);
		runtime_Syncsemcheck(12);
	};
	RWMutex.ptr.prototype.RLock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, rw;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_RLock = function() { s: while (true) { switch ($s) { case 0:
		rw = $this;
		/* */ if (atomic.AddInt32(new ptrType$20(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32(new ptrType$20(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1) < 0) { */ case 1:
			$r = runtime_Semacquire(new ptrType$21(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw), $BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		/* } */ case 2:
		/* */ case -1: } return; } }; $blocking_RLock.$blocking = true; return $blocking_RLock;
	};
	RWMutex.prototype.RLock = function($b) { return this.$val.RLock($b); };
	RWMutex.ptr.prototype.RUnlock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, r, rw;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_RUnlock = function() { s: while (true) { switch ($s) { case 0:
		rw = $this;
		r = atomic.AddInt32(new ptrType$22(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				raceEnable();
				$panic(new $String("sync: RUnlock of unlocked RWMutex"));
			}
			/* */ if (atomic.AddInt32(new ptrType$23(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32(new ptrType$23(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), -1) === 0) { */ case 3:
				$r = runtime_Semrelease(new ptrType$24(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw), $BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
			/* } */ case 4:
		/* } */ case 2:
		/* */ case -1: } return; } }; $blocking_RUnlock.$blocking = true; return $blocking_RUnlock;
	};
	RWMutex.prototype.RUnlock = function($b) { return this.$val.RUnlock($b); };
	RWMutex.ptr.prototype.Lock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, r, rw;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Lock = function() { s: while (true) { switch ($s) { case 0:
		rw = $this;
		$r = rw.w.Lock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		r = atomic.AddInt32(new ptrType$25(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32(new ptrType$26(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32(new ptrType$26(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), r) === 0))) { */ case 2:
			$r = runtime_Semacquire(new ptrType$27(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw), $BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		/* } */ case 3:
		/* */ case -1: } return; } }; $blocking_Lock.$blocking = true; return $blocking_Lock;
	};
	RWMutex.prototype.Lock = function($b) { return this.$val.Lock($b); };
	RWMutex.ptr.prototype.Unlock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, i, r, rw;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Unlock = function() { s: while (true) { switch ($s) { case 0:
		rw = $this;
		r = atomic.AddInt32(new ptrType$28(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1073741824);
		if (r >= 1073741824) {
			raceEnable();
			$panic(new $String("sync: Unlock of unlocked RWMutex"));
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < (r >> 0))) { break; } */ if(!(i < (r >> 0))) { $s = 2; continue; }
			$r = runtime_Semrelease(new ptrType$29(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw), $BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		/* */ case -1: } return; } }; $blocking_Unlock.$blocking = true; return $blocking_Unlock;
	};
	RWMutex.prototype.Unlock = function($b) { return this.$val.Unlock($b); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return $pointerOfStructConversion(rw, ptrType$30);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, r;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Lock = function() { s: while (true) { switch ($s) { case 0:
		r = $this;
		$r = $pointerOfStructConversion(r, ptrType$31).RLock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ case -1: } return; } }; $blocking_Lock.$blocking = true; return $blocking_Lock;
	};
	rlocker.prototype.Lock = function($b) { return this.$val.Lock($b); };
	rlocker.ptr.prototype.Unlock = function($b) {
		var $args = arguments, $r, $s = 0, $this = this, r;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Unlock = function() { s: while (true) { switch ($s) { case 0:
		r = $this;
		$r = $pointerOfStructConversion(r, ptrType$32).RUnlock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ case -1: } return; } }; $blocking_Unlock.$blocking = true; return $blocking_Unlock;
	};
	rlocker.prototype.Unlock = function($b) { return this.$val.Unlock($b); };
	ptrType$43.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$42], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$16], false)}];
	ptrType$46.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$47.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	ptrType$48.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$49.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", typ: sliceType$5, tag: ""}, {prop: "New", name: "New", pkg: "", typ: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", typ: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init([{prop: "m", name: "m", pkg: "sync", typ: Mutex, tag: ""}, {prop: "done", name: "done", pkg: "sync", typ: $Uint32, tag: ""}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", typ: sliceType$3, tag: ""}, {prop: "Mutex", name: "", pkg: "", typ: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", typ: arrayType, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", typ: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", typ: $UnsafePointer, tag: ""}]);
	RWMutex.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	rlocker.init([{prop: "w", name: "w", pkg: "sync", typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", pkg: "sync", typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", pkg: "sync", typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", pkg: "sync", typ: $Int32, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_sync = function() { while (true) { switch ($s) { case 0:
		$r = runtime.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = atomic.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		allPools = sliceType.nil;
		semWaiters = new $Map();
		init();
		init$1();
		/* */ } return; } }; $init_sync.$blocking = true; return $init_sync;
	};
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, errors, runtime, sync, Reader, Writer, ReaderFrom, WriterTo, ByteReader, RuneReader, sliceType$7, sliceType$8, errWhence, errOffset;
	errors = $packages["errors"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", "WriterTo", "io", null);
	ByteReader = $pkg.ByteReader = $newType(8, $kindInterface, "io.ByteReader", "ByteReader", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
	sliceType$7 = $sliceType($Uint8);
	sliceType$8 = $sliceType($Uint8);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$7], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$8], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteReader.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_io = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } }; $init_io.$blocking = true; return $init_io;
	};
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, RangeTable, Range16, Range32, CaseRange, d, sliceType, sliceType$1, sliceType$294, sliceType$295, _White_Space, _CaseRanges, to, IsSpace, is16, is32, Is, isExcludingLatin, To, ToLower;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		this.R16 = R16_ !== undefined ? R16_ : sliceType.nil;
		this.R32 = R32_ !== undefined ? R32_ : sliceType$1.nil;
		this.LatinOffset = LatinOffset_ !== undefined ? LatinOffset_ : 0;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Delta = Delta_ !== undefined ? Delta_ : d.zero();
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	sliceType$294 = $sliceType(Range16);
	sliceType$295 = $sliceType(CaseRange);
	to = function(_case, r, caseRange) {
		var _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + (((((r - (cr.Lo >> 0) >> 0)) & ~1) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsSpace = $pkg.IsSpace = function(r) {
		var _ref, r;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = $pkg.Is = function(rangeTab, r) {
		var r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= ((0 >= r32.$length ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = $pkg.To = function(_case, r) {
		var _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	ToLower = $pkg.ToLower = function(r) {
		var r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", typ: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", typ: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", typ: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", typ: d, tag: ""}]);
	d.init($Int32, 3);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_unicode = function() { while (true) { switch ($s) { case 0:
		_White_Space = new RangeTable.ptr(new sliceType$294([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$295([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		/* */ } return; } }; $init_unicode.$blocking = true; return $init_unicode;
	};
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	decodeRuneInternal = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, p, r = 0, short$1 = false, size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = (0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = (1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = (2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = (3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r = 0, s, short$1 = false, size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	FullRune = $pkg.FullRune = function(p) {
		var _tuple, p, short$1;
		_tuple = decodeRuneInternal(p); short$1 = _tuple[2];
		return !short$1;
	};
	DecodeRune = $pkg.DecodeRune = function(p) {
		var _tuple, p, r = 0, size = 0;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeRuneInString = $pkg.DecodeRuneInString = function(s) {
		var _tuple, r = 0, s, size = 0;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeLastRune = $pkg.DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r = 0, size = 0, start;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	DecodeLastRuneInString = $pkg.DecodeLastRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r = 0, s, size = 0, start;
		end = s.length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString(s.substring(start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	RuneLen = $pkg.RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	EncodeRune = $pkg.EncodeRune = function(p, r) {
		var i, p, r;
		i = (r >>> 0);
		if (i <= 127) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24));
			return 1;
		} else if (i <= 2047) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 3;
		} else if (i <= 65535) {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 3;
		} else {
			(0 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0);
			(1 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(2 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0);
			(3 >= p.$length ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0);
			return 4;
		}
	};
	RuneCount = $pkg.RuneCount = function(p) {
		var _tuple, i, n, p, size;
		i = 0;
		n = 0;
		n = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			if (((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < 128) {
				i = i + (1) >> 0;
			} else {
				_tuple = DecodeRune($subslice(p, i)); size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + (1) >> 0;
		}
		return n;
	};
	RuneCountInString = $pkg.RuneCountInString = function(s) {
		var _i, _ref, _rune, n = 0, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			n = n + (1) >> 0;
			_i += _rune[1];
		}
		return n;
	};
	RuneStart = $pkg.RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_utf8 = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_utf8.$blocking = true; return $init_utf8;
	};
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, arrayType, arrayType$1, sliceType$28, sliceType$29, sliceType$30, sliceType$31, ptrType$1, IndexByte, Equal, makeSlice, Contains, Index;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : sliceType$1.nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.runeBytes = runeBytes_ !== undefined ? runeBytes_ : arrayType.zero();
		this.bootstrap = bootstrap_ !== undefined ? bootstrap_ : arrayType$1.zero();
		this.lastRead = lastRead_ !== undefined ? lastRead_ : 0;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType($Uint8);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($Uint8);
	sliceType$6 = $sliceType($Uint8);
	sliceType$7 = $sliceType($Uint8);
	sliceType$8 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	arrayType$1 = $arrayType($Uint8, 64);
	sliceType$28 = $sliceType($Uint8);
	sliceType$29 = $sliceType($Uint8);
	sliceType$30 = $sliceType($Uint8);
	sliceType$31 = $sliceType($Uint8);
	ptrType$1 = $ptrType(Buffer);
	IndexByte = $pkg.IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	Equal = $pkg.Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b, n;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var _q, b, buf, m, n;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType$1.nil && n <= 64) {
				buf = $subslice(new sliceType$2(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((2 * b.buf.$capacity >> 0) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var _tmp, _tmp$1, b, err = $ifaceNil, m, n = 0, p;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, b, err = $ifaceNil, m, n = 0, s;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err = $ifaceNil, free, m, n = new $Int64(0, 0), newBuf, r, x;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		while (true) {
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((2 * b.buf.$capacity >> 0) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_tuple = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); m = _tuple[0]; e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $deferred = [], $err = null, n;
		/* */ try { $deferFrames.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType$4, n);
		/* */ } catch(err) { $err = err; return sliceType$3.nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err = $ifaceNil, m, n = new $Int64(0, 0), nBytes, w;
		b = this;
		b.lastRead = 0;
		if (b.off < b.buf.$length) {
			nBytes = b.Len();
			_tuple = w.Write($subslice(b.buf, b.off)); m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		}
		b.Truncate(0);
		return [n, err];
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var b, c, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, ((m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err = $ifaceNil, n = 0, r;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType$5(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType$6(b.runeBytes), 0, n));
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, b, err = $ifaceNil, n = 0, p;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, c = 0, err = $ifaceNil, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err = $ifaceNil, n, r = 0, size = 0, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; r = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r; _tmp$7 = n; _tmp$8 = $ifaceNil; r = _tmp$6; size = _tmp$7; err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tuple, b, delim, err = $ifaceNil, line = sliceType$7.nil, slice;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, delim, end, err = $ifaceNil, i, line = sliceType$8.nil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err = $ifaceNil, line = "", slice;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Contains = $pkg.Contains = function(b, subslice) {
		var b, subslice;
		return !((Index(b, subslice) === -1));
	};
	Index = $pkg.Index = function(s, sep) {
		var c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	ptrType$1.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$28], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$29], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$30], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType$31], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType$7, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType$8, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", typ: sliceType$1, tag: ""}, {prop: "off", name: "off", pkg: "bytes", typ: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", typ: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", typ: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", typ: readOp, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_bytes = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } }; $init_bytes.$blocking = true; return $init_bytes;
	};
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, bytes, errors, io, utf8, Reader, Writer, ptrType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$23, sliceType$24, ptrType$2, sliceType$25, ptrType$3, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", "Reader", "bufio", function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : sliceType$2.nil;
		this.rd = rd_ !== undefined ? rd_ : $ifaceNil;
		this.r = r_ !== undefined ? r_ : 0;
		this.w = w_ !== undefined ? w_ : 0;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.lastByte = lastByte_ !== undefined ? lastByte_ : 0;
		this.lastRuneSize = lastRuneSize_ !== undefined ? lastRuneSize_ : 0;
	});
	Writer = $pkg.Writer = $newType(0, $kindStruct, "bufio.Writer", "Writer", "bufio", function(err_, buf_, n_, wr_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : sliceType$12.nil;
		this.n = n_ !== undefined ? n_ : 0;
		this.wr = wr_ !== undefined ? wr_ : $ifaceNil;
	});
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType($Uint8);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($Uint8);
	sliceType$6 = $sliceType($Uint8);
	sliceType$7 = $sliceType($Uint8);
	sliceType$8 = $sliceType($Uint8);
	sliceType$9 = $sliceType(sliceType$8);
	sliceType$10 = $sliceType($Uint8);
	sliceType$11 = $sliceType($Uint8);
	sliceType$12 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType($Uint8);
	ptrType$2 = $ptrType(Reader);
	sliceType$25 = $sliceType($Uint8);
	ptrType$3 = $ptrType(Writer);
	NewReaderSize = $pkg.NewReaderSize = function(rd, size) {
		var _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true); b = _tuple[0]; ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr();
		r.reset($makeSlice(sliceType$1, size), rd);
		return r;
	};
	NewReader = $pkg.NewReader = function(rd) {
		var rd;
		return NewReaderSize(rd, 4096);
	};
	Reader.ptr.prototype.Reset = function(r) {
		var b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var b, buf, r;
		b = this;
		$copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1), Reader);
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var _tuple, b, err, i, n;
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		while (true) {
			if (!(i > 0)) { break; }
			_tuple = b.rd.Read($subslice(b.buf, b.w)); n = _tuple[0]; err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				return;
			}
			if (n > 0) {
				return;
			}
			i = i - (1) >> 0;
		}
		b.err = io.ErrNoProgress;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var avail, b, err, n;
		b = this;
		if (n < 0) {
			return [sliceType$3.nil, $pkg.ErrNegativeCount];
		}
		if (n > b.buf.$length) {
			return [sliceType$3.nil, $pkg.ErrBufferFull];
		}
		while (true) {
			if (!((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil))) { break; }
			b.fill();
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err = $ifaceNil, n = 0, p, x, x$1, x$2;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0; _tmp$1 = b.readErr(); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (b.r === b.w) {
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = b.readErr(); n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (p.$length >= b.buf.$length) {
				_tuple = b.rd.Read(p); n = _tuple[0]; b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n; _tmp$5 = b.readErr(); n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			b.fill();
			if (b.r === b.w) {
				_tmp$6 = 0; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
				return [n, err];
			}
		}
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n; _tmp$9 = $ifaceNil; n = _tmp$8; err = _tmp$9;
		return [n, err];
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, c = 0, err = $ifaceNil, x, x$1;
		b = this;
		b.lastRuneSize = -1;
		while (true) {
			if (!(b.r === b.w)) { break; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = b.readErr(); c = _tmp; err = _tmp$1;
				return [c, err];
			}
			b.fill();
		}
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24)));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err = $ifaceNil, r = 0, size = 0, x, x$1, x$2, x$3;
		b = this;
		while (true) {
			if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; }
			b.fill();
		}
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = b.readErr(); r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0); _tmp$4 = 1; r = _tmp$3; size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w)); r = _tuple[0]; size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r; _tmp$6 = size; _tmp$7 = $ifaceNil; r = _tmp$5; size = _tmp$6; err = _tmp$7;
		return [r, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var b, delim, err = $ifaceNil, i, i$1, line = sliceType$4.nil;
		b = this;
		while (true) {
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				break;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				break;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				break;
			}
			b.fill();
		}
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + i$1]) >> 0);
			b.lastRuneSize = -1;
		}
		return [line, err];
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err = $ifaceNil, isPrefix = false, line = sliceType$5.nil, x, x$1, x$2;
		b = this;
		_tuple = b.ReadSlice(10); line = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line; _tmp$1 = true; _tmp$2 = $ifaceNil; line = _tmp; isPrefix = _tmp$1; err = _tmp$2;
			return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType$5.nil;
			}
			return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		return [line, isPrefix, err];
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tuple, b, buf, buf$1, delim, e, err = $ifaceNil, frag, full, i, i$1, line = sliceType$6.nil, n;
		b = this;
		frag = sliceType$7.nil;
		full = sliceType$9.nil;
		err = $ifaceNil;
		while (true) {
			e = $ifaceNil;
			_tuple = b.ReadSlice(delim); frag = _tuple[0]; e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				break;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				break;
			}
			buf = $makeSlice(sliceType$10, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		}
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType$11, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		_tmp = buf$1; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, bytes$1, delim, err = $ifaceNil, line = "";
		b = this;
		_tuple = b.ReadBytes(delim); bytes$1 = _tuple[0]; err = _tuple[1];
		line = $bytesToString(bytes$1);
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err = $ifaceNil, err$1, err$2, err$3, m, m$1, m$2, n = new $Int64(0, 0), ok, ok$1, r, w, w$1, x, x$1, x$2;
		b = this;
		_tuple = b.writeBuf(w); n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true); r = _tuple$1[0]; ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = r.WriteTo(w); m = _tuple$2[0]; err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple$3 = $assertType(w, io.ReaderFrom, true); w$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
		if (ok$1) {
			_tuple$4 = w$1.ReadFrom(b.rd); m$1 = _tuple$4[0]; err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n; _tmp$3 = err$2; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if ((b.w - b.r >> 0) < b.buf.$length) {
			b.fill();
		}
		while (true) {
			if (!(b.r < b.w)) { break; }
			_tuple$5 = b.writeBuf(w); m$2 = _tuple$5[0]; err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = err$3; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			b.fill();
		}
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var _tuple, b, err, n, w;
		b = this;
		_tuple = w.Write($subslice(b.buf, b.r, b.w)); n = _tuple[0]; err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		return [new $Int64(0, n), err];
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	Writer.ptr.prototype.Reset = function(w) {
		var b, w;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.ptr.prototype.Flush = function() {
		var b, err;
		b = this;
		err = b.flush();
		return err;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.ptr.prototype.flush = function() {
		var _tuple, b, err, n;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (b.n === 0) {
			return $ifaceNil;
		}
		_tuple = b.wr.Write($subslice(b.buf, 0, b.n)); n = _tuple[0]; err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			return err;
		}
		b.n = 0;
		return $ifaceNil;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.ptr.prototype.Available = function() {
		var b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.ptr.prototype.Write = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err = $ifaceNil, n, n$1, nn = 0, p;
		b = this;
		while (true) {
			if (!(p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; }
			n = 0;
			if (b.Buffered() === 0) {
				_tuple = b.wr.Write(p); n = _tuple[0]; b.err = _tuple[1];
			} else {
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				b.flush();
			}
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		}
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn; _tmp$1 = b.err; nn = _tmp; err = _tmp$1;
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn; _tmp$3 = $ifaceNil; nn = _tmp$2; err = _tmp$3;
		return [nn, err];
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.ptr.prototype.WriteByte = function(c) {
		var b, c, x, x$1;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (b.Available() <= 0 && !($interfaceIsEqual(b.flush(), $ifaceNil))) {
			return b.err;
		}
		(x = b.buf, x$1 = b.n, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c));
		b.n = b.n + (1) >> 0;
		return $ifaceNil;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.ptr.prototype.WriteRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, b, err = $ifaceNil, n, r, size = 0;
		b = this;
		if (r < 128) {
			err = b.WriteByte((r << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = err; size = _tmp; err = _tmp$1;
				return [size, err];
			}
			_tmp$2 = 1; _tmp$3 = $ifaceNil; size = _tmp$2; err = _tmp$3;
			return [size, err];
		}
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0; _tmp$5 = b.err; size = _tmp$4; err = _tmp$5;
			return [size, err];
		}
		n = b.Available();
		if (n < 4) {
			b.flush();
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$6 = 0; _tmp$7 = b.err; size = _tmp$6; err = _tmp$7;
				return [size, err];
			}
			n = b.Available();
			if (n < 4) {
				_tuple = b.WriteString($encodeRune(r)); size = _tuple[0]; err = _tuple[1];
				return [size, err];
			}
		}
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size; _tmp$9 = $ifaceNil; size = _tmp$8; err = _tmp$9;
		return [size, err];
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.ptr.prototype.WriteString = function(s) {
		var b, n, n$1, nn, s;
		b = this;
		nn = 0;
		while (true) {
			if (!(s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil))) { break; }
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = s.substring(n);
			b.flush();
		}
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		return [nn, $ifaceNil];
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.ptr.prototype.ReadFrom = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, b, err = $ifaceNil, err1, m, n = new $Int64(0, 0), nr, ok, r, w, x;
		b = this;
		if (b.Buffered() === 0) {
			_tuple = $assertType(b.wr, io.ReaderFrom, true); w = _tuple[0]; ok = _tuple[1];
			if (ok) {
				_tuple$1 = w.ReadFrom(r); n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
		}
		m = 0;
		while (true) {
			if (b.Available() === 0) {
				err1 = b.flush();
				if (!($interfaceIsEqual(err1, $ifaceNil))) {
					_tmp = n; _tmp$1 = err1; n = _tmp; err = _tmp$1;
					return [n, err];
				}
			}
			nr = 0;
			while (true) {
				if (!(nr < 100)) { break; }
				_tuple$2 = r.Read($subslice(b.buf, b.n)); m = _tuple$2[0]; err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				nr = nr + (1) >> 0;
			}
			if (nr === 100) {
				_tmp$2 = n; _tmp$3 = io.ErrNoProgress; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				break;
			}
		}
		if ($interfaceIsEqual(err, io.EOF)) {
			if (b.Available() === 0) {
				err = b.flush();
			} else {
				err = $ifaceNil;
			}
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	ptrType$2.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType$23, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType$3, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$24], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType$4, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType$5, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType$6, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	ptrType$3.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Writer], [], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}, {prop: "flush", name: "flush", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Available", name: "Available", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$25], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}];
	Reader.init([{prop: "buf", name: "buf", pkg: "bufio", typ: sliceType$2, tag: ""}, {prop: "rd", name: "rd", pkg: "bufio", typ: io.Reader, tag: ""}, {prop: "r", name: "r", pkg: "bufio", typ: $Int, tag: ""}, {prop: "w", name: "w", pkg: "bufio", typ: $Int, tag: ""}, {prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", pkg: "bufio", typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", pkg: "bufio", typ: $Int, tag: ""}]);
	Writer.init([{prop: "err", name: "err", pkg: "bufio", typ: $error, tag: ""}, {prop: "buf", name: "buf", pkg: "bufio", typ: sliceType$12, tag: ""}, {prop: "n", name: "n", pkg: "bufio", typ: $Int, tag: ""}, {prop: "wr", name: "wr", pkg: "bufio", typ: io.Writer, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_bufio = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		/* */ } return; } }; $init_bufio.$blocking = true; return $init_bufio;
	};
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, TextMarshaler, TextUnmarshaler, sliceType$2, sliceType$3;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", "TextUnmarshaler", "encoding", null);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$2, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_encoding = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_encoding.$blocking = true; return $init_encoding;
	};
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, js, arrayType, arrayType$1, arrayType$2, structType, arrayType$3, math, zero, posInf, negInf, nan, buf, pow10tab, init, Inf, IsInf, NaN, init$1, Float32bits, Float32frombits, Float64bits, Float64frombits, init$2;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType([{prop: "uint32array", name: "uint32array", pkg: "math", typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", pkg: "math", typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", pkg: "math", typ: arrayType$2, tag: ""}]);
	arrayType$3 = $arrayType($Float64, 70);
	init = function() {
		Float32bits(0);
		Float32frombits(0);
	};
	Inf = $pkg.Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	IsInf = $pkg.IsInf = function(f, sign) {
		var f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	NaN = $pkg.NaN = function() {
		return nan;
	};
	init$1 = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = $pkg.Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	Float32frombits = $pkg.Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	Float64bits = $pkg.Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64(new $Uint64(0, buf.uint32array[1]), 32), x$1 = new $Uint64(0, buf.uint32array[0]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Float64frombits = $pkg.Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = (b.$low >>> 0);
		buf.uint32array[1] = ($shiftRightUint64(b, 32).$low >>> 0);
		return buf.float64array[0];
	};
	init$2 = function() {
		var _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (true) {
			if (!(i < 70)) { break; }
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x])));
			i = i + (1) >> 0;
		}
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_math = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		buf = new structType.ptr();
		pow10tab = arrayType$3.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		init$2();
		/* */ } return; } }; $init_math.$blocking = true; return $init_math;
	};
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, bytes, errors, js, runtime, sync, mmapper, Errno, _C_int, Timespec, Stat_t, Dirent, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, ptrType, ptrType$25, ptrType$27, arrayType$2, sliceType$36, sliceType$37, sliceType$38, ptrType$53, sliceType$46, ptrType$54, ptrType$55, sliceType$51, arrayType$4, sliceType$52, sliceType$53, ptrType$58, ptrType$59, sliceType$54, sliceType$55, sliceType$56, sliceType$57, sliceType$58, sliceType$61, structType, ptrType$62, ptrType$63, sliceType$62, ptrType$64, ptrType$65, ptrType$84, sliceType$70, ptrType$110, ptrType$111, mapType, funcType, funcType$1, ptrType$115, arrayType$13, arrayType$14, arrayType$21, arrayType$22, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, mapper, errors$1, init, printWarning, printToConsole, use, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, copyenv, Getenv, itoa, uitoa, ByteSliceFromString, ReadDirent, Sysctl, nametomib, ParseDirent, Read, Write, sysctl, Close, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Pread, Pwrite, read, Seek, write, mmap, munmap;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.ptr();
		this.active = active_ !== undefined ? active_ : false;
		this.mmap = mmap_ !== undefined ? mmap_ : $throwNilPointerError;
		this.munmap = munmap_ !== undefined ? munmap_ : $throwNilPointerError;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	_C_int = $pkg._C_int = $newType(4, $kindInt32, "syscall._C_int", "_C_int", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new $Int64(0, 0);
		this.Nsec = Nsec_ !== undefined ? Nsec_ : new $Int64(0, 0);
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		this.Dev = Dev_ !== undefined ? Dev_ : 0;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Nlink = Nlink_ !== undefined ? Nlink_ : 0;
		this.Ino = Ino_ !== undefined ? Ino_ : new $Uint64(0, 0);
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Rdev = Rdev_ !== undefined ? Rdev_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : arrayType$13.zero();
		this.Atimespec = Atimespec_ !== undefined ? Atimespec_ : new Timespec.ptr();
		this.Mtimespec = Mtimespec_ !== undefined ? Mtimespec_ : new Timespec.ptr();
		this.Ctimespec = Ctimespec_ !== undefined ? Ctimespec_ : new Timespec.ptr();
		this.Birthtimespec = Birthtimespec_ !== undefined ? Birthtimespec_ : new Timespec.ptr();
		this.Size = Size_ !== undefined ? Size_ : new $Int64(0, 0);
		this.Blocks = Blocks_ !== undefined ? Blocks_ : new $Int64(0, 0);
		this.Blksize = Blksize_ !== undefined ? Blksize_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Gen = Gen_ !== undefined ? Gen_ : 0;
		this.Lspare = Lspare_ !== undefined ? Lspare_ : 0;
		this.Qspare = Qspare_ !== undefined ? Qspare_ : arrayType$14.zero();
	});
	Dirent = $pkg.Dirent = $newType(0, $kindStruct, "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		this.Ino = Ino_ !== undefined ? Ino_ : new $Uint64(0, 0);
		this.Seekoff = Seekoff_ !== undefined ? Seekoff_ : new $Uint64(0, 0);
		this.Reclen = Reclen_ !== undefined ? Reclen_ : 0;
		this.Namlen = Namlen_ !== undefined ? Namlen_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Name = Name_ !== undefined ? Name_ : arrayType$21.zero();
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : arrayType$22.zero();
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType($Uint8);
	sliceType$4 = $sliceType($Uint8);
	ptrType = $ptrType($Uint8);
	ptrType$25 = $ptrType($Uint8);
	ptrType$27 = $ptrType($Uint8);
	arrayType$2 = $arrayType($Uint8, 32);
	sliceType$36 = $sliceType($Uint8);
	sliceType$37 = $sliceType($Uint8);
	sliceType$38 = $sliceType($Uint8);
	ptrType$53 = $ptrType($Uintptr);
	sliceType$46 = $sliceType($Uint8);
	ptrType$54 = $ptrType($Uint8);
	ptrType$55 = $ptrType($Uintptr);
	sliceType$51 = $sliceType(_C_int);
	arrayType$4 = $arrayType(_C_int, 14);
	sliceType$52 = $sliceType($Uint8);
	sliceType$53 = $sliceType(_C_int);
	ptrType$58 = $ptrType($Uintptr);
	ptrType$59 = $ptrType($Uint8);
	sliceType$54 = $sliceType(_C_int);
	sliceType$55 = $sliceType($String);
	sliceType$56 = $sliceType($Uint8);
	sliceType$57 = $sliceType($Uint8);
	sliceType$58 = $sliceType($Uint8);
	sliceType$61 = $sliceType($Uint8);
	structType = $structType([{prop: "addr", name: "addr", pkg: "syscall", typ: $Uintptr, tag: ""}, {prop: "len", name: "len", pkg: "syscall", typ: $Int, tag: ""}, {prop: "cap", name: "cap", pkg: "syscall", typ: $Int, tag: ""}]);
	ptrType$62 = $ptrType($Uint8);
	ptrType$63 = $ptrType($Uint8);
	sliceType$62 = $sliceType($Uint8);
	ptrType$64 = $ptrType($Uint8);
	ptrType$65 = $ptrType($Uint8);
	ptrType$84 = $ptrType($Uint8);
	sliceType$70 = $sliceType($Uint8);
	ptrType$110 = $ptrType(mmapper);
	ptrType$111 = $ptrType($Uint8);
	mapType = $mapType(ptrType$111, sliceType$62);
	funcType = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$1 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$115 = $ptrType(Timespec);
	arrayType$13 = $arrayType($Uint8, 4);
	arrayType$14 = $arrayType($Int64, 2);
	arrayType$21 = $arrayType($Int8, 1024);
	arrayType$22 = $arrayType($Uint8, 3);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			console.log("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
		var p;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$2, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? $throwRuntimeError("index out of range") : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var $deferred = [], $err = null, name, require;
		/* */ try { $deferFrames.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Syscall = $pkg.Syscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err = 0, f, r, r1 = 0, r2 = 0, slice, trap;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType$3, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0); _tmp$4 = 0; _tmp$5 = 0; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0); _tmp$7 = 0; _tmp$8 = 13; r1 = _tmp$6; r2 = _tmp$7; err = _tmp$8;
		return [r1, r2, err];
	};
	Syscall6 = $pkg.Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err = 0, f, r, r1 = 0, r2 = 0, trap;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
		return [r1, r2, err];
	};
	BytePtrFromString = $pkg.BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new sliceType$4($stringToBytes(s));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	copyenv = function() {
		var _entry, _i, _key, _ref, _tuple, i, j, key, ok, s;
		env = new $Map();
		_ref = envs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (true) {
				if (!(j < s.length)) { break; }
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i };
					} else {
						((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = "");
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = $pkg.Getenv = function(key, $b) {
		var $args = arguments, $deferred = [], $err = null, $r, $s = 0, $this = this, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, found = false, i, i$1, ok, s, value = "";
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Getenv = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		$r = envOnce.Do(copyenv, $BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		if (key.length === 0) {
			_tmp = ""; _tmp$1 = false; value = _tmp; found = _tmp$1;
			return [value, found];
		}
		$r = envLock.RLock($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$deferred.push([$methodVal(envLock, "RUnlock"), [$BLOCKING]]);
		_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); i = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp$2 = ""; _tmp$3 = false; value = _tmp$2; found = _tmp$3;
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = s.substring((i$1 + 1 >> 0)); _tmp$5 = true; value = _tmp$4; found = _tmp$5;
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = ""; _tmp$7 = false; value = _tmp$6; found = _tmp$7;
		return [value, found];
		/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); return [value, found]; } }; $blocking_Getenv.$blocking = true; return $blocking_Getenv;
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24));
		return $bytesToString($subslice(new sliceType$36(buf), i));
	};
	ByteSliceFromString = $pkg.ByteSliceFromString = function(s) {
		var a, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 0) {
				return [sliceType$37.nil, new Errno(22)];
			}
			i = i + (1) >> 0;
		}
		a = $makeSlice(sliceType$38, (s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec = new $Int64(0, 0), sec = new $Int64(0, 0), ts;
		ts = this;
		_tmp = ts.Sec; _tmp$1 = ts.Nsec; sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = $pkg.ReadDirent = function(fd, buf) {
		var _tuple, base, buf, err = $ifaceNil, fd, n = 0;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base); n = _tuple[0]; err = _tuple[1];
		if (true && ($interfaceIsEqual(err, new Errno(22)) || $interfaceIsEqual(err, new Errno(2)))) {
			err = $ifaceNil;
		}
		return [n, err];
	};
	Sysctl = $pkg.Sysctl = function(name) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, buf, err = $ifaceNil, mib, n, name, value = "", x;
		_tuple = nametomib(name); mib = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ""; _tmp$1 = err; value = _tmp; err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ptrType$25.nil, new ptrType$53(function() { return n; }, function($v) { n = $v; }), ptrType$27.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ""; _tmp$3 = err; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = ""; _tmp$5 = $ifaceNil; value = _tmp$4; err = _tmp$5;
			return [value, err];
		}
		buf = $makeSlice(sliceType$46, n);
		err = sysctl(mib, new ptrType$54(function() { return (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v); }, buf), new ptrType$55(function() { return n; }, function($v) { n = $v; }), ptrType$27.nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = ""; _tmp$7 = err; value = _tmp$6; err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) === 0)) {
			n = n - (1) >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n)); _tmp$9 = $ifaceNil; value = _tmp$8; err = _tmp$9;
		return [value, err];
	};
	nametomib = function(name) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, buf, bytes$1, err = $ifaceNil, mib = sliceType$51.nil, n, name, p;
		buf = $clone(arrayType$4.zero(), arrayType$4);
		n = 48;
		p = $sliceToArray(new sliceType$52(buf));
		_tuple = ByteSliceFromString(name); bytes$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = sliceType$51.nil; _tmp$1 = err; mib = _tmp; err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new sliceType$53([0, 3]), p, new ptrType$58(function() { return n; }, function($v) { n = $v; }), new ptrType$59(function() { return (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v); }, bytes$1), (name.length >>> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = sliceType$51.nil; _tmp$3 = err; mib = _tmp$2; err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new sliceType$54(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))); _tmp$5 = $ifaceNil; mib = _tmp$4; err = _tmp$5;
		return [mib, err];
	};
	ParseDirent = $pkg.ParseDirent = function(buf, max, names) {
		var _array, _struct, _tmp, _tmp$1, _tmp$2, _view, buf, bytes$1, consumed = 0, count = 0, dirent, max, name, names, newnames = sliceType$55.nil, origlen, x;
		origlen = buf.$length;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			dirent = [undefined];
			dirent[0] = (_array = $sliceToArray(buf), _struct = new Dirent.ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent[0].Reclen === 0) {
				buf = sliceType$56.nil;
				break;
			}
			buf = $subslice(buf, dirent[0].Reclen);
			if ((x = dirent[0].Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new sliceType$57(dirent[0].Name));
			name = $bytesToString($subslice(new sliceType$58(bytes$1), 0, dirent[0].Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0; _tmp$1 = count; _tmp$2 = names; consumed = _tmp; count = _tmp$1; newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags, $b) {
		var $args = arguments, $deferred = [], $err = null, $r, $s = 0, $this = this, _key, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data = sliceType$61.nil, err = $ifaceNil, errno, m, p, sl, x, x$1;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Mmap = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		m = $this;
		if (length <= 0) {
			_tmp = sliceType$61.nil; _tmp$1 = new Errno(22); data = _tmp; err = _tmp$1;
			return [data, err];
		}
		_tuple = m.mmap(0, (length >>> 0), prot, flags, fd, offset); addr = _tuple[0]; errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType$61.nil; _tmp$3 = errno; data = _tmp$2; err = _tmp$3;
			return [data, err];
		}
		sl = new structType.ptr(addr, length, length);
		b = sl;
		p = new ptrType$62(function() { return (x$1 = b.$capacity - 1 >> 0, ((x$1 < 0 || x$1 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$1])); }, function($v) { (x = b.$capacity - 1 >> 0, ((x < 0 || x >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x] = $v)); }, b);
		$r = m.Mutex.Lock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), [$BLOCKING]]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: b };
		_tmp$4 = b; _tmp$5 = $ifaceNil; data = _tmp$4; err = _tmp$5;
		return [data, err];
		/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); return [data, err]; } }; $blocking_Mmap.$blocking = true; return $blocking_Mmap;
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags, $b) { return this.$val.Mmap(fd, offset, length, prot, flags, $b); };
	mmapper.ptr.prototype.Munmap = function(data, $b) {
		var $args = arguments, $deferred = [], $err = null, $r, $s = 0, $this = this, _entry, b, err = $ifaceNil, errno, m, p, x, x$1;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Munmap = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		m = $this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			return err;
		}
		p = new ptrType$63(function() { return (x$1 = data.$capacity - 1 >> 0, ((x$1 < 0 || x$1 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$1])); }, function($v) { (x = data.$capacity - 1 >> 0, ((x < 0 || x >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x] = $v)); }, data);
		$r = m.Mutex.Lock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), [$BLOCKING]]);
		b = (_entry = m.active[p.$key()], _entry !== undefined ? _entry.v : sliceType$62.nil);
		if (b === sliceType$62.nil || !($pointerIsEqual(new ptrType$64(function() { return (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v); }, b), new ptrType$65(function() { return (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 >= this.$target.$length ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v); }, data)))) {
			err = new Errno(22);
			return err;
		}
		errno = m.munmap($sliceToArray(b), (b.$length >>> 0));
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			return err;
		}
		delete m.active[p.$key()];
		err = $ifaceNil;
		return err;
		/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); return err; } }; $blocking_Munmap.$blocking = true; return $blocking_Munmap;
	};
	mmapper.prototype.Munmap = function(data, $b) { return this.$val.Munmap(data, $b); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Read = $pkg.Read = function(fd, p) {
		var _tuple, err = $ifaceNil, fd, n = 0, p;
		_tuple = read(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Write = $pkg.Write = function(fd, p) {
		var _tuple, err = $ifaceNil, fd, n = 0, p;
		_tuple = write(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var _p0, _tuple, e1, err = $ifaceNil, mib, new$1, newlen, old, oldlen;
		_p0 = 0;
		if (mib.$length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.$length >>> 0), old, oldlen, new$1, newlen); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Close = $pkg.Close = function(fd) {
		var _tuple, e1, err = $ifaceNil, fd;
		_tuple = Syscall(6, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchdir = $pkg.Fchdir = function(fd) {
		var _tuple, e1, err = $ifaceNil, fd;
		_tuple = Syscall(13, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchmod = $pkg.Fchmod = function(fd, mode) {
		var _tuple, e1, err = $ifaceNil, fd, mode;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchown = $pkg.Fchown = function(fd, uid, gid) {
		var _tuple, e1, err = $ifaceNil, fd, gid, uid;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fstat = $pkg.Fstat = function(fd, stat) {
		var _array, _struct, _tuple, _view, e1, err = $ifaceNil, fd, stat;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0); e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fsync = $pkg.Fsync = function(fd) {
		var _tuple, e1, err = $ifaceNil, fd;
		_tuple = Syscall(95, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Ftruncate = $pkg.Ftruncate = function(fd, length) {
		var _tuple, e1, err = $ifaceNil, fd, length;
		_tuple = Syscall(201, (fd >>> 0), (length.$low >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Getdirentries = $pkg.Getdirentries = function(fd, buf, basep) {
		var _p0, _tuple, basep, buf, e1, err = $ifaceNil, fd, n = 0, r0;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.$length >>> 0), basep, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Lstat = $pkg.Lstat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err = $ifaceNil, path, stat;
		_p0 = ptrType$84.nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0); e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		use(_p0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Pread = $pkg.Pread = function(fd, p, offset) {
		var _p0, _tuple, e1, err = $ifaceNil, fd, n = 0, offset, p, r0;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Pwrite = $pkg.Pwrite = function(fd, p, offset) {
		var _p0, _tuple, e1, err = $ifaceNil, fd, n = 0, offset, p, r0;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	read = function(fd, p) {
		var _p0, _tuple, e1, err = $ifaceNil, fd, n = 0, p, r0;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Seek = $pkg.Seek = function(fd, offset, whence) {
		var _tuple, e1, err = $ifaceNil, fd, newoffset = new $Int64(0, 0), offset, r0, whence;
		_tuple = Syscall(199, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [newoffset, err];
	};
	write = function(fd, p) {
		var _p0, _tuple, e1, err = $ifaceNil, fd, n = 0, p, r0;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var _tuple, addr, e1, err = $ifaceNil, fd, flag, length, pos, prot, r0, ret = 0;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.$low >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var _tuple, addr, e1, err = $ifaceNil, length;
		_tuple = Syscall(73, addr, length, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	ptrType$110.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType$61, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType$70], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$115.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	mmapper.init([{prop: "Mutex", name: "", pkg: "", typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", pkg: "syscall", typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", pkg: "syscall", typ: funcType, tag: ""}, {prop: "munmap", name: "munmap", pkg: "syscall", typ: funcType$1, tag: ""}]);
	Timespec.init([{prop: "Sec", name: "Sec", pkg: "", typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", pkg: "", typ: $Int64, tag: ""}]);
	Stat_t.init([{prop: "Dev", name: "Dev", pkg: "", typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", pkg: "", typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", pkg: "", typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", pkg: "", typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", pkg: "", typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$13, tag: ""}, {prop: "Atimespec", name: "Atimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", pkg: "", typ: Timespec, tag: ""}, {prop: "Size", name: "Size", pkg: "", typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", pkg: "", typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", pkg: "", typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", pkg: "", typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", pkg: "", typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", pkg: "", typ: arrayType$14, tag: ""}]);
	Dirent.init([{prop: "Ino", name: "Ino", pkg: "", typ: $Uint64, tag: ""}, {prop: "Seekoff", name: "Seekoff", pkg: "", typ: $Uint64, tag: ""}, {prop: "Reclen", name: "Reclen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Namlen", name: "Namlen", pkg: "", typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: $Uint8, tag: ""}, {prop: "Name", name: "Name", pkg: "", typ: arrayType$21, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", pkg: "", typ: arrayType$22, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_syscall = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		envOnce = new sync.Once.ptr();
		envLock = new sync.RWMutex.ptr();
		env = false;
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(), new $Map(), mmap, munmap);
		init();
		/* */ } return; } }; $init_syscall.$blocking = true; return $init_syscall;
	};
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, Once, funcType, ptrType$3;
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		this.doing = doing_ !== undefined ? doing_ : false;
		this.done = done_ !== undefined ? done_ : false;
	});
	funcType = $funcType([], [], false);
	ptrType$3 = $ptrType(Once);
	Once.ptr.prototype.Do = function(f) {
		var $deferred = [], $err = null, f, o;
		/* */ try { $deferFrames.push($deferred);
		o = this;
		if (o.done) {
			return;
		}
		if (o.doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o.doing = true;
		$deferred.push([(function() {
			o.doing = false;
			o.done = true;
		}), []]);
		f();
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType], [], false)}];
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", typ: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_nosync = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_nosync.$blocking = true; return $init_nosync;
	};
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, errors, js, io, unicode, utf8, sliceType$13, sliceType$14, sliceType$15, sliceType$16, sliceType$18, sliceType$19, sliceType$20, sliceType$21, IndexByte, explode, hashStr, hashStrRev, Count, Contains, Index, LastIndex, IndexRune, genSplit, Split, Join, HasPrefix, Map, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimRight, TrimSpace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType$13 = $sliceType($String);
	sliceType$14 = $sliceType($String);
	sliceType$15 = $sliceType($String);
	sliceType$16 = $sliceType($String);
	sliceType$18 = $sliceType($Uint8);
	sliceType$19 = $sliceType($Uint8);
	sliceType$20 = $sliceType($Uint8);
	sliceType$21 = $sliceType($Uint8);
	IndexByte = $pkg.IndexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	explode = function(s, n) {
		var _tmp, _tmp$1, _tuple, a, ch, cur, i, l, n, s, size;
		if (n === 0) {
			return sliceType$13.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$14, n);
		size = 0;
		ch = 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;
		while (true) {
			if (!((i + 1 >> 0) < n)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0)));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur));
		}
		return a;
	};
	hashStr = function(sep) {
		var _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;
		hash = 0;
		i = 0;
		while (true) {
			if (!(i < sep.length)) { break; }
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	hashStrRev = function(sep) {
		var _tmp, _tmp$1, hash, i, i$1, pow, sep, sq, x, x$1;
		hash = 0;
		i = sep.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i - (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (true) {
			if (!(i$1 > 0)) { break; }
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	Count = $pkg.Count = function(s, sep) {
		var _tuple, c, h, hashsep, i, i$1, i$2, lastmatch, n, pow, s, sep, x, x$1;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (true) {
				if (!(i < s.length)) { break; }
				if (s.charCodeAt(i) === c) {
					n = n + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < sep.length)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + (1) >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (true) {
			if (!(i$2 < s.length)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$2 = i$2 + (1) >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {
				n = n + (1) >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	Contains = $pkg.Contains = function(s, substr) {
		var s, substr;
		return Index(s, substr) >= 0;
	};
	Index = $pkg.Index = function(s, sep) {
		var _tuple, h, hashsep, i, i$1, n, pow, s, sep, x, x$1;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	LastIndex = $pkg.LastIndex = function(s, sep) {
		var _tuple, c, h, hashsep, i, i$1, i$2, last, n, pow, s, sep, x, x$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		} else if (n === 1) {
			c = sep.charCodeAt(0);
			i = s.length - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - (1) >> 0;
			}
			return -1;
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStrRev(sep); hashsep = _tuple[0]; pow = _tuple[1];
		last = s.length - n >> 0;
		h = 0;
		i$1 = s.length - 1 >> 0;
		while (true) {
			if (!(i$1 >= last)) { break; }
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 - (1) >> 0;
		}
		if ((h === hashsep) && s.substring(last) === sep) {
			return last;
		}
		i$2 = last - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 + n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			if ((h === hashsep) && s.substring(i$2, (i$2 + n >> 0)) === sep) {
				return i$2;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return -1;
	};
	IndexRune = $pkg.IndexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var a, c, i, n, na, s, sep, sepSave, start;
		if (n === 0) {
			return sliceType$15.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = $makeSlice(sliceType$16, n);
		na = 0;
		i = 0;
		while (true) {
			if (!((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n)) { break; }
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0)));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		((na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start));
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = $pkg.Split = function(s, sep) {
		var s, sep;
		return genSplit(s, sep, 0, -1);
	};
	Join = $pkg.Join = function(a, sep) {
		var _i, _ref, a, b, bp, i, n, s, sep;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = sep.length * ((a.$length - 1 >> 0)) >> 0;
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType$18, n);
		bp = $copyString(b, (0 >= a.$length ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	Map = $pkg.Map = function(mapping, s) {
		var _i, _ref, _rune, b, c, i, mapping, maxbytes, nb, nbytes, r, s, wid;
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType$19.nil;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			r = mapping(c);
			if (b === sliceType$19.nil) {
				if (r === c) {
					_i += _rune[1];
					continue;
				}
				b = $makeSlice(sliceType$20, maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = (maxbytes * 2 >> 0) + 4 >> 0;
					nb = $makeSlice(sliceType$21, maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		}
		if (b === sliceType$19.nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
	};
	ToLower = $pkg.ToLower = function(s) {
		var s;
		return Map(unicode.ToLower, s);
	};
	TrimLeftFunc = $pkg.TrimLeftFunc = function(s, f) {
		var f, i, s;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return "";
		}
		return s.substring(i);
	};
	TrimRightFunc = $pkg.TrimRightFunc = function(s, f) {
		var _tuple, f, i, s, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString(s.substring(i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return s.substring(0, i);
	};
	TrimFunc = $pkg.TrimFunc = function(s, f) {
		var f, s;
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	indexFunc = function(s, f, truth) {
		var _tuple, f, r, s, start, truth, wid;
		start = 0;
		while (true) {
			if (!(start < s.length)) { break; }
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var _tuple, f, i, r, s, size, truth;
		i = s.length;
		while (true) {
			if (!(i > 0)) { break; }
			_tuple = utf8.DecodeLastRuneInString(s.substring(0, i)); r = _tuple[0]; size = _tuple[1];
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	makeCutsetFunc = function(cutset) {
		var cutset;
		return (function(r) {
			var r;
			return IndexRune(cutset, r) >= 0;
		});
	};
	TrimRight = $pkg.TrimRight = function(s, cutset) {
		var cutset, s;
		if (s === "" || cutset === "") {
			return s;
		}
		return TrimRightFunc(s, makeCutsetFunc(cutset));
	};
	TrimSpace = $pkg.TrimSpace = function(s) {
		var s;
		return TrimFunc(s, unicode.IsSpace);
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_strings = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_strings.$blocking = true; return $init_strings;
	};
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, ptrType, sliceType$6, sliceType$7, arrayType, sliceType$8, arrayType$1, sliceType$9, sliceType$10, arrayType$2, sliceType$11, sliceType$12, ptrType$1, ptrType$2, arrayType$4, sliceType$17, sliceType$18, sliceType$19, sliceType$20, sliceType$21, sliceType$22, sliceType$23, sliceType$24, ptrType$3, sliceType$25, sliceType$26, sliceType$27, sliceType$28, sliceType$29, sliceType$30, ptrType$4, ptrType$5, sliceType$31, sliceType$32, ptrType$11, ptrType$14, sliceType$43, sliceType$44, sliceType$45, sliceType$46, sliceType$47, ptrType$15, ptrType$16, ptrType$17, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, localLoc, localOnce, zoneinfo, badData, zoneDirs, _tuple, _r, initLocal, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		this.Layout = Layout_ !== undefined ? Layout_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.LayoutElem = LayoutElem_ !== undefined ? LayoutElem_ : "";
		this.ValueElem = ValueElem_ !== undefined ? ValueElem_ : "";
		this.Message = Message_ !== undefined ? Message_ : "";
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		this.sec = sec_ !== undefined ? sec_ : new $Int64(0, 0);
		this.nsec = nsec_ !== undefined ? nsec_ : 0;
		this.loc = loc_ !== undefined ? loc_ : ptrType$2.nil;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.zone = zone_ !== undefined ? zone_ : sliceType$4.nil;
		this.tx = tx_ !== undefined ? tx_ : sliceType$5.nil;
		this.cacheStart = cacheStart_ !== undefined ? cacheStart_ : new $Int64(0, 0);
		this.cacheEnd = cacheEnd_ !== undefined ? cacheEnd_ : new $Int64(0, 0);
		this.cacheZone = cacheZone_ !== undefined ? cacheZone_ : ptrType.nil;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.isDST = isDST_ !== undefined ? isDST_ : false;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		this.when = when_ !== undefined ? when_ : new $Int64(0, 0);
		this.index = index_ !== undefined ? index_ : 0;
		this.isstd = isstd_ !== undefined ? isstd_ : false;
		this.isutc = isutc_ !== undefined ? isutc_ : false;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType($String);
	sliceType$4 = $sliceType(zone);
	sliceType$5 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$6 = $sliceType($String);
	sliceType$7 = $sliceType(zone);
	arrayType = $arrayType($Uint8, 32);
	sliceType$8 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	sliceType$9 = $sliceType($Uint8);
	sliceType$10 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 64);
	sliceType$11 = $sliceType($Uint8);
	sliceType$12 = $sliceType($Uint8);
	ptrType$1 = $ptrType(Location);
	ptrType$2 = $ptrType(Location);
	arrayType$4 = $arrayType($Uint8, 32);
	sliceType$17 = $sliceType($Uint8);
	sliceType$18 = $sliceType($Uint8);
	sliceType$19 = $sliceType($Uint8);
	sliceType$20 = $sliceType($Uint8);
	sliceType$21 = $sliceType($Uint8);
	sliceType$22 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType($Uint8);
	ptrType$3 = $ptrType(Location);
	sliceType$25 = $sliceType($Uint8);
	sliceType$26 = $sliceType($Uint8);
	sliceType$27 = $sliceType($Uint8);
	sliceType$28 = $sliceType($Uint8);
	sliceType$29 = $sliceType($Uint8);
	sliceType$30 = $sliceType($Uint8);
	ptrType$4 = $ptrType(Location);
	ptrType$5 = $ptrType(Location);
	sliceType$31 = $sliceType(zone);
	sliceType$32 = $sliceType(zoneTrans);
	ptrType$11 = $ptrType(ParseError);
	ptrType$14 = $ptrType(Location);
	sliceType$43 = $sliceType($Uint8);
	sliceType$44 = $sliceType($Uint8);
	sliceType$45 = $sliceType($Uint8);
	sliceType$46 = $sliceType($Uint8);
	sliceType$47 = $sliceType($Uint8);
	ptrType$15 = $ptrType(Time);
	ptrType$16 = $ptrType(Location);
	ptrType$17 = $ptrType(Location);
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType$7([new zone.ptr(localLoc.name, ($parseInt(d.getTimezoneOffset()) >> 0) * -60 >> 0, false)]);
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$9, c, ch, i, j, layout, prefix = "", std = 0, std$1, suffix = "", x;
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i); _tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x])); _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = ""; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var _q, _q$1, _r$1, _r$2, b, buf, n, pad, x;
		if (x < 10) {
			if (!((pad === 0))) {
				b = $append(b, pad);
			}
			return $append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = $append(b, ((48 + (_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = $clone(arrayType.zero(), arrayType);
		n = 32;
		if (x === 0) {
			return $append(b, 48);
		}
		while (true) {
			if (!(x >= 10)) { break; }
			n = n - (1) >> 0;
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (((_r$2 = x % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			x = (_q$1 = x / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		n = n - (1) >> 0;
		((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = ((x + 48 >>> 0) << 24 >>> 24));
		return $appendSlice(b, $subslice(new sliceType$8(buf), n));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err = $ifaceNil, neg, q, rem, s, x = 0;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x; _tmp$3 = $ifaceNil; x = _tmp$2; err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r$1, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = $clone(arrayType$1.zero(), arrayType$1);
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r$1 = u % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$9(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var t;
		t = $clone(this, Time);
		return t.Format("2006-01-02 15:04:05.999999999 -0700 MST");
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _q, _q$1, _q$2, _q$3, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, buf, day, hour, hr, hr$1, layout, m, max, min, month, name, offset, prefix, s, sec, std, suffix, t, y, y$1, year, zone$1, zone$2;
		t = $clone(this, Time);
		_tuple$1 = t.locabs(); name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = sliceType$10.nil;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = $subslice(new sliceType$11(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$12, 0, max);
		}
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, new sliceType$10($stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = $append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("000")));
				} else if (year < 100) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("00")));
				} else if (year < 1000) {
					b = $append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = $appendSlice(b, new sliceType$10($stringToBytes(new Month(month).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = new Month(month).String();
				b = $appendSlice(b, new sliceType$10($stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = $appendSlice(b, new sliceType$10($stringToBytes(new Weekday(absWeekday(abs)).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = new Weekday(absWeekday(abs)).String();
				b = $appendSlice(b, new sliceType$10($stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("PM")));
				} else {
					b = $appendSlice(b, new sliceType$10($stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$10($stringToBytes("pm")));
				} else {
					b = $appendSlice(b, new sliceType$10($stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29) || (std === 25) || (std === 30)) {
					b = $append(b, 58);
				}
				b = appendUint(b, ((_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendUint(b, ((_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, new sliceType$10($stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return $bytesToString(b);
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0) * 10 >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = $pkg.Parse = function(layout, value) {
		var layout, value;
		return parse(layout, value, $pkg.UTC, $pkg.Local);
	};
	parse = function(layout, value, defaultLocation, local) {
		var _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset;
		_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;
				_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];
				if (year >= 69) {
					year = year + (1900) >> 0;
				} else {
					year = year + (2000) >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];
					std = std & (65535);
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (true) {
						if (!(n < value.length && isDigit(value, n))) { break; }
						n = n + (1) >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = ""; _tmp$11 = ""; _tmp$12 = ""; _tmp$13 = ""; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = "00"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = "00"; _tmp$22 = "00"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = "00"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;
				}
				_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;
				_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];
				}
				zoneOffset = ((((hr * 60 >> 0) + mm >> 0)) * 60 >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (true) {
					if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
					i = i + (1) >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (!(z === ptrType$1.nil)) {
			return [Date(year, (month >> 0), day, hour, min, sec, nsec, z), $ifaceNil];
		}
		if (!((zoneOffset === -1))) {
			t = $clone(Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_tuple$23 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); name = _tuple$23[0]; offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		}
		if (!(zoneName === "")) {
			t$1 = $clone(Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			_tuple$24 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];
				offset$1 = offset$1 * (3600) >> 0;
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		}
		return [Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation), $ifaceNil];
	};
	parseTimeZone = function(value) {
		var _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length = 0, nUpper, ok = false, value;
		if (value.length < 3) {
			_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple$1, err, rem, sign, value, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple$1, err = $ifaceNil, i, nbytes, ns = 0, rangeErrString = "", scaleDigits, value;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = ns * (10) >> 0;
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err = $ifaceNil, i, rem = "", s, x = new $Int64(0, 0), x$1, x$2, x$3;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low >= 3435973835))) {
				_tmp = new $Int64(0, 0); _tmp$1 = ""; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			i = i + (1) >> 0;
		}
		_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = $ifaceNil; x = _tmp$3; rem = _tmp$4; err = _tmp$5;
		return [x, rem, err];
	};
	Time.ptr.prototype.After = function(u) {
		var t, u, x, x$1, x$2, x$3;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, u, x, x$1, x$2, x$3;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x, x$1;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$2.nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			} else {
				_tuple$1 = l.lookup(sec); offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			}
		}
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _tuple$1, abs = new $Uint64(0, 0), l, name = "", offset = 0, sec, t, x, x$1, x$2, x$3, x$4;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$2.nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
			} else {
				_tuple$1 = l.lookup(sec); name = _tuple$1[0]; offset = _tuple$1[1];
			}
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
		} else {
			name = "UTC";
		}
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _tuple$1, day = 0, month = 0, t, year = 0;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		return [year, month, day];
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _tuple$1, t, year;
		t = $clone(this, Time);
		_tuple$1 = t.date(false); year = _tuple$1[0];
		return year;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _tuple$1, month, t;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); month = _tuple$1[1];
		return month;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _tuple$1, day, t;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); day = _tuple$1[2];
		return day;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var t;
		t = $clone(this, Time);
		return absWeekday(t.abs());
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r$1, _r$2, _r$3, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week = 0, yday, year = 0;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		wday = (_r$1 = ((t.Weekday() + 6 >> 0) >> 0) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$2 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$3 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _tuple$1, hour = 0, min = 0, sec = 0, t;
		t = $clone(this, Time);
		_tuple$1 = absClock(t.abs()); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return [hour, min, sec];
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour = 0, min = 0, sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((hour * 3600 >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((min * 60 >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, t;
		t = $clone(this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, t;
		t = $clone(this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var t;
		t = $clone(this, Time);
		return ($div64(t.abs(), new $Uint64(0, 60), true).$low >> 0);
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _tuple$1, t, yday;
		t = $clone(this, Time);
		_tuple$1 = t.date(false); yday = _tuple$1[3];
		return yday + 1 >> 0;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = $clone(arrayType$4.zero(), arrayType$4);
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$17(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$18(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$19(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115);
			_tuple$2 = fmtFrac($subslice(new sliceType$20(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$21(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$22(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$23(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $bytesToString($subslice(new sliceType$24(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv = new $Uint64(0, 0), nw = 0, prec, print, v, w;
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (digit.$low << 24 >>> 24) + 48 << 24 >>> 24);
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24);
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var d, nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, t, u, x, x$1, x$2, x$3, x$4;
		t = $clone(this, Time);
		u = $clone(u, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _tuple$1, _tuple$2, day, days$1, hour, min, month, months$1, sec, t, year, years;
		t = $clone(this, Time);
		_tuple$1 = t.Date(); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		_tuple$2 = t.Clock(); hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];
		return Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc);
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _tuple$1, day = 0, full, month = 0, t, yday = 0, year = 0;
		t = $clone(this, Time);
		_tuple$1 = absDate(t.abs(), full); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		return [year, month, day, yday];
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day = 0, end, full, month = 0, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday = 0, year = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = $clone(this, Time);
		if (loc === ptrType$3.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _tuple$1, name = "", offset = 0, t, x;
		t = $clone(this, Time);
		_tuple$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); name = _tuple$1[0]; offset = _tuple$1[1];
		return [name, offset];
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r$1, _tuple$1, enc, offset, offsetMin, t;
		t = $clone(this, Time);
		offsetMin = 0;
		if (t.Location() === utcLoc) {
			offsetMin = -1;
		} else {
			_tuple$1 = t.Zone(); offset = _tuple$1[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$25.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$25.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		}
		enc = new sliceType$26([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var _tuple$1, buf, data$1, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, (7 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, (6 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, (5 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, (4 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, (3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, (2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, (1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, (0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = ((((3 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | (((2 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | (((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = ((((1 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | (((0 >= buf.$length ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0) * 60 >> 0;
		if (offset === -60) {
			t.loc = utcLoc;
		} else {
			_tuple$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		}
		return $ifaceNil;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var t;
		t = $clone(this, Time);
		return t.MarshalBinary();
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var data$1, t;
		t = this;
		return t.UnmarshalBinary(data$1);
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var t, y;
		t = $clone(this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [sliceType$27.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		return [new sliceType$28($stringToBytes(t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""))), $ifaceNil];
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var _tuple$1, data$1, err = $ifaceNil, t;
		t = this;
		_tuple$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var t, y;
		t = $clone(this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [sliceType$29.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		return [new sliceType$30($stringToBytes(t.Format("2006-01-02T15:04:05.999999999Z07:00"))), $ifaceNil];
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var _tuple$1, data$1, err = $ifaceNil, t;
		t = this;
		_tuple$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = $pkg.Unix = function(sec, nsec) {
		var n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	isLeap = function(year) {
		var _r$1, _r$2, _r$3, year;
		return ((_r$1 = year % 4, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$2 = year % 100, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$3 = year % 400, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi = 0, nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + ((n * base >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - ((n$1 * base >> 0)) >> 0;
		}
		_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = $pkg.Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year;
		if (loc === ptrType$4.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, (((hour * 3600 >> 0) + (min * 60 >> 0) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_tuple$6 = loc.lookup(unix); offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];
		if (!((offset === 0))) {
			utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
			if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) {
				_tuple$7 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); offset = _tuple$7[1];
			} else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) {
				_tuple$8 = loc.lookup(end); offset = _tuple$8[1];
			}
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		}
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
	};
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple$1, d, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple$1, d, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2 = 0, r = new Duration(0, 0), sec, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r$1 = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0; _tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low); u0x = _tmp; u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0; _tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low)); u0x = _tmp$2; u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (true) {
				if (!(!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0; _tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low); u0x = _tmp$4; u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l;
		l = this;
		if (l === ptrType$5.nil) {
			return utcLoc;
		}
		if (l === localLoc) {
			localOnce.Do(initLocal);
		}
		return l;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var l;
		l = this;
		return l.get().name;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = $pkg.FixedZone = function(name, offset) {
		var l, name, offset, x;
		l = new Location.ptr(name, new sliceType$31([new zone.ptr(name, offset, false)]), new sliceType$32([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	Location.ptr.prototype.lookup = function(sec) {
		var _q, end = new $Int64(0, 0), hi, isDST = false, l, lim, lo, m, name = "", offset = 0, sec, start = new $Int64(0, 0), tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3;
		l = this;
		l = l.get();
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, (0 >= x$3.$length ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST = false, isDST$1, l, nam, name, offset = 0, offset$1, ok = false, unix, x, x$1, x$2, zone$1, zone$2;
		l = this;
		l = l.get();
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (zone$1.name === name) {
				_tuple$1 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;
					return [offset, isDST, ok];
				}
			}
			_i++;
		}
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$11.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$3], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$14], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$25, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$44, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$27, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$29, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$15.methods = [{prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$43], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$45], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$46], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$47], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}];
	ptrType$17.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$16], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", typ: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", typ: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", typ: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", typ: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", typ: ptrType$2, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", typ: sliceType$4, tag: ""}, {prop: "tx", name: "tx", pkg: "time", typ: sliceType$5, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", typ: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", typ: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", typ: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", typ: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", typ: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_time = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = nosync.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = syscall.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		localLoc = new Location.ptr();
		localOnce = new nosync.Once.ptr();
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$1(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$3(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType$4.nil, sliceType$5.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_r = syscall.Getenv("ZONEINFO", $BLOCKING); /* */ $s = 7; case 7: if (_r && _r.$blocking) { _r = _r(); }
		_tuple = _r; zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new sliceType$6(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
		/* */ } return; } }; $init_time.$blocking = true; return $init_time;
	};
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, errors, js, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, sliceType$4, sliceType$5, sliceType$6, ptrType$2, sliceType$7, ptrType$3, ptrType$6, ptrType$7, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, sliceType$12, ptrType$29, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, funcType$1, ptrType$39, ptrType$40, ptrType$42, ptrType$43, ptrType$44, sliceType$15, sliceType$16, arrayType$3, sliceType$18, ptrType$53, ptrType$54, ptrType$59, ptrType$60, sliceType$21, sliceType$22, sliceType$23, sliceType$24, sliceType$25, sliceType$26, sliceType$27, sliceType$28, ptrType$61, ptrType$62, sliceType$29, ptrType$63, errFinished, lstat, useSyscallwd, supportsCloseOnExec, runtime_args, init, NewSyscallError, IsNotExist, isNotExist, fixCount, sigpipe, syscallMode, NewFile, epipecheck, Lstat, basename, init$1, useSyscallwdDarwin, init$2, fileInfoFromStat, timespecToTime, init$3;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		this.Syscall = Syscall_ !== undefined ? Syscall_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Old = Old_ !== undefined ? Old_ : "";
		this.New = New_ !== undefined ? New_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		this.file = file_ !== undefined ? file_ : ptrType$60.nil;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_, nepipe_) {
		this.$val = this;
		this.fd = fd_ !== undefined ? fd_ : 0;
		this.name = name_ !== undefined ? name_ : "";
		this.dirinfo = dirinfo_ !== undefined ? dirinfo_ : ptrType.nil;
		this.nepipe = nepipe_ !== undefined ? nepipe_ : 0;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : sliceType$29.nil;
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.bufp = bufp_ !== undefined ? bufp_ : 0;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.size = size_ !== undefined ? size_ : new $Int64(0, 0);
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.modTime = modTime_ !== undefined ? modTime_ : new time.Time.ptr();
		this.sys = sys_ !== undefined ? sys_ : $ifaceNil;
	});
	sliceType = $sliceType($String);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType($String);
	sliceType$3 = $sliceType($String);
	ptrType = $ptrType(dirInfo);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($String);
	sliceType$6 = $sliceType(FileInfo);
	ptrType$2 = $ptrType(File);
	sliceType$7 = $sliceType($String);
	ptrType$3 = $ptrType(File);
	ptrType$6 = $ptrType(PathError);
	ptrType$7 = $ptrType(LinkError);
	ptrType$23 = $ptrType(File);
	ptrType$24 = $ptrType(File);
	ptrType$25 = $ptrType(File);
	ptrType$26 = $ptrType(File);
	ptrType$27 = $ptrType(File);
	ptrType$28 = $ptrType(File);
	sliceType$12 = $sliceType($Uint8);
	ptrType$29 = $ptrType(File);
	ptrType$32 = $ptrType(File);
	ptrType$33 = $ptrType(File);
	ptrType$34 = $ptrType(File);
	ptrType$35 = $ptrType(File);
	ptrType$36 = $ptrType(File);
	ptrType$37 = $ptrType(File);
	ptrType$38 = $ptrType(file);
	funcType$1 = $funcType([ptrType$38], [$error], false);
	ptrType$39 = $ptrType($Int32);
	ptrType$40 = $ptrType($Int32);
	ptrType$42 = $ptrType(File);
	ptrType$43 = $ptrType(file);
	ptrType$44 = $ptrType(File);
	sliceType$15 = $sliceType(FileInfo);
	sliceType$16 = $sliceType(FileInfo);
	arrayType$3 = $arrayType($Uint8, 32);
	sliceType$18 = $sliceType($Uint8);
	ptrType$53 = $ptrType(PathError);
	ptrType$54 = $ptrType(SyscallError);
	ptrType$59 = $ptrType(LinkError);
	ptrType$60 = $ptrType(file);
	sliceType$21 = $sliceType($Uint8);
	sliceType$22 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType($Uint8);
	sliceType$25 = $sliceType($Uint8);
	sliceType$26 = $sliceType($Uint8);
	sliceType$27 = $sliceType($Uint8);
	sliceType$28 = $sliceType($Uint8);
	ptrType$61 = $ptrType(File);
	ptrType$62 = $ptrType(file);
	sliceType$29 = $sliceType($Uint8);
	ptrType$63 = $ptrType(fileStat);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType$1, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType$2(["?"]);
		}
	};
	File.ptr.prototype.readdirnames = function(n) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, d, err = $ifaceNil, errno, f, n, names = sliceType$3.nil, nb, nc, size;
		f = this;
		if (f.file.dirinfo === ptrType.nil) {
			f.file.dirinfo = new dirInfo.ptr();
			f.file.dirinfo.buf = $makeSlice(sliceType$4, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType$5, 0, size);
		while (true) {
			if (!(!((n === 0)))) { break; }
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple$1 = syscall.ReadDirent(f.file.fd, d.buf);
				_tuple = fixCount(_tuple$1[0], _tuple$1[1]); d.nbuf = _tuple[0]; errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names; _tmp$1 = NewSyscallError("readdirent", errno); names = _tmp; err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0; _tmp$3 = 0; nb = _tmp$2; nc = _tmp$3;
			_tuple$2 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names); nb = _tuple$2[0]; nc = _tuple$2[1]; names = _tuple$2[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names; _tmp$5 = io.EOF; names = _tmp$4; err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names; _tmp$7 = $ifaceNil; names = _tmp$6; err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, f, fi = sliceType$6.nil, n;
		f = this;
		if (f === ptrType$2.nil) {
			_tmp = sliceType$6.nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tuple = f.readdir(n); fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, f, n, names = sliceType$7.nil;
		f = this;
		if (f === ptrType$3.nil) {
			_tmp = sliceType$7.nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n); names = _tuple[0]; err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Path + ": " + e.Err.Error();
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Syscall + ": " + e.Err.Error();
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = $pkg.NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	IsNotExist = $pkg.IsNotExist = function(err) {
		var err;
		return isNotExist(err);
	};
	isNotExist = function(err) {
		var _ref, err, pe;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			pe = _ref.$val;
			err = pe.Err;
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			pe = _ref.$val;
			err = pe.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Old + " " + e.New + ": " + e.Err.Error();
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, e, err = $ifaceNil, f, n = 0;
		f = this;
		if (f === ptrType$23.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err = $ifaceNil, f, m, n = 0, off, x;
		f = this;
		if (f === ptrType$24.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pread(b, off); m = _tuple[0]; e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err = $ifaceNil, f, n = 0;
		f = this;
		if (f === ptrType$25.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _tmp, _tmp$1, _tuple, b, e, err = $ifaceNil, f, m, n = 0, off, x;
		f = this;
		if (f === ptrType$26.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (true) {
			if (!(b.$length > 0)) { break; }
			_tuple = f.pwrite(b, off); m = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err = $ifaceNil, f, offset, r, ret = new $Int64(0, 0), whence;
		f = this;
		if (f === ptrType$27.nil) {
			_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence); r = _tuple[0]; e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.ptr("seek", f.file.name, e); ret = _tmp$2; err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r; _tmp$5 = $ifaceNil; ret = _tmp$4; err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, f, ret = 0, s;
		f = this;
		if (f === ptrType$28.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.Write(new sliceType$12($stringToBytes(s))); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var e, f;
		f = this;
		if (f === ptrType$29.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	fixCount = function(n, err) {
		var err, n;
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	sigpipe = function() {
		$panic("Native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var i, o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var e, f, mode;
		f = this;
		if (f === ptrType$32.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var e, f, gid, uid;
		f = this;
		if (f === ptrType$33.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var e, f, size;
		f = this;
		if (f === ptrType$34.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var e, err = $ifaceNil, f;
		f = this;
		if (f === ptrType$35.nil) {
			err = $pkg.ErrInvalid;
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var f;
		f = this;
		if (f === ptrType$36.nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = $pkg.NewFile = function(fd, name) {
		var f, fd, fdi, name;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ptrType$37.nil;
		}
		f = new File.ptr(new file.ptr(fdi, name, ptrType.nil, 0));
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$38.prototype.close)));
		return f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32))) {
			if (atomic.AddInt32(new ptrType$39(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1), 1) >= 10) {
				sigpipe();
			}
		} else {
			atomic.StoreInt32(new ptrType$40(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1), 0);
		}
	};
	File.ptr.prototype.Close = function() {
		var f;
		f = this;
		if (f === ptrType$42.nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$43.nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.Stat = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err = $ifaceNil, f, fi = $ifaceNil, stat;
		f = this;
		if (f === ptrType$44.nil) {
			_tmp = $ifaceNil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		stat = $clone(new syscall.Stat_t.ptr(), syscall.Stat_t);
		err = syscall.Fstat(f.file.fd, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = $ifaceNil; _tmp$3 = new PathError.ptr("stat", f.file.name, err); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		_tmp$4 = fileInfoFromStat(stat, f.file.name); _tmp$5 = $ifaceNil; fi = _tmp$4; err = _tmp$5;
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = $pkg.Lstat = function(name) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, err = $ifaceNil, fi = $ifaceNil, name, stat;
		stat = $clone(new syscall.Stat_t.ptr(), syscall.Stat_t);
		err = syscall.Lstat(name, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $ifaceNil; _tmp$1 = new PathError.ptr("lstat", name, err); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	File.ptr.prototype.readdir = function(n) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err = $ifaceNil, f, fi = sliceType$15.nil, filename, fip, lerr, n, names;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n); names = _tuple[0]; err = _tuple[1];
		fi = $makeSlice(sliceType$16, 0, names.$length);
		_ref = names;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$1 = lstat(dirname + "/" + filename); fip = _tuple$1[0]; lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi; _tmp$1 = lerr; fi = _tmp; err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		}
		_tmp$2 = fi; _tmp$3 = err; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.read = function(b) {
		var _tuple, _tuple$1, b, err = $ifaceNil, f, n = 0;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Read(f.file.fd, b);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _tuple, _tuple$1, b, err = $ifaceNil, f, n = 0, off;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pread(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _tmp, _tmp$1, _tuple, _tuple$1, b, bcap, err = $ifaceNil, err$1, f, m, n = 0;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple$1 = syscall.Write(f.file.fd, bcap);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]); m = _tuple[0]; err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _tuple, _tuple$1, b, err = $ifaceNil, f, n = 0, off;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple$1 = syscall.Pwrite(f.file.fd, b, off);
		_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _tuple, err = $ifaceNil, f, offset, ret = new $Int64(0, 0), whence;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$1 = function() {
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	init$2 = function() {
		$pkg.Args = runtime_args();
	};
	fileInfoFromStat = function(st, name) {
		var _ref, fs, name, st;
		fs = new fileStat.ptr(basename(name), st.Size, 0, $clone(timespecToTime(st.Mtimespec), time.Time), st);
		fs.mode = (((st.Mode & 511) >>> 0) >>> 0);
		_ref = (st.Mode & 61440) >>> 0;
		if (_ref === 24576 || _ref === 57344) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_ref === 8192) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_ref === 16384) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_ref === 4096) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_ref === 40960) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_ref === 32768) {
		} else if (_ref === 49152) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((st.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((st.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((st.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
		return fs;
	};
	timespecToTime = function(ts) {
		var ts;
		ts = $clone(ts, syscall.Timespec);
		return time.Unix(ts.Sec, ts.Nsec);
	};
	init$3 = function() {
		var _i, _ref, _rune, _tuple, err, i, osver;
		_tuple = syscall.Sysctl("kern.osrelease"); osver = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = $clone(arrayType$3.zero(), arrayType$3);
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24));
			} else {
				((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$18(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$53.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$54.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$59.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$61.methods = [{prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType$3, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$6, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType$7, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$21], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$22, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$23], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$24, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$15, $error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$25], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$26, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$27], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$28, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}];
	ptrType$62.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$63.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	LinkError.init([{prop: "Op", name: "Op", pkg: "", typ: $String, tag: ""}, {prop: "Old", name: "Old", pkg: "", typ: $String, tag: ""}, {prop: "New", name: "New", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", typ: ptrType$60, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", typ: ptrType, tag: ""}, {prop: "nepipe", name: "nepipe", pkg: "os", typ: $Int32, tag: ""}]);
	dirInfo.init([{prop: "buf", name: "buf", pkg: "os", typ: sliceType$29, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "os", typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", pkg: "os", typ: $Int, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", typ: $String, tag: ""}, {prop: "size", name: "size", pkg: "os", typ: $Int64, tag: ""}, {prop: "mode", name: "mode", pkg: "os", typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", pkg: "os", typ: time.Time, tag: ""}, {prop: "sys", name: "sys", pkg: "os", typ: $emptyInterface, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_os = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = atomic.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = syscall.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = time.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.Args = sliceType.nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function(param) {
			var param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		init$3();
		/* */ } return; } }; $init_os.$blocking = true; return $init_os;
	};
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, ptrType, ptrType$1, ptrType$2, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, arrayType, sliceType$14, arrayType$1, arrayType$2, sliceType$15, ptrType$3, sliceType$16, arrayType$3, sliceType$17, arrayType$4, sliceType$18, sliceType$19, sliceType$20, sliceType$21, arrayType$5, arrayType$6, sliceType$22, sliceType$23, sliceType$24, arrayType$7, sliceType$25, sliceType$26, arrayType$8, sliceType$27, sliceType$28, sliceType$29, sliceType$32, sliceType$33, arrayType$9, sliceType$34, sliceType$35, sliceType$36, ptrType$4, arrayType$10, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, FormatBool, AppendBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatUint, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		this.Func = Func_ !== undefined ? Func_ : "";
		this.Num = Num_ !== undefined ? Num_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : arrayType$10.zero();
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.trunc = trunc_ !== undefined ? trunc_ : false;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		this.delta = delta_ !== undefined ? delta_ : 0;
		this.cutoff = cutoff_ !== undefined ? cutoff_ : "";
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		this.mant = mant_ !== undefined ? mant_ : new $Uint64(0, 0);
		this.exp = exp_ !== undefined ? exp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		this.mantbits = mantbits_ !== undefined ? mantbits_ : 0;
		this.expbits = expbits_ !== undefined ? expbits_ : 0;
		this.bias = bias_ !== undefined ? bias_ : 0;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : sliceType$19.nil;
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint16);
	sliceType$6 = $sliceType($Uint32);
	sliceType$7 = $sliceType($Uint16);
	sliceType$8 = $sliceType($Uint8);
	ptrType = $ptrType(NumError);
	ptrType$1 = $ptrType(NumError);
	ptrType$2 = $ptrType(NumError);
	sliceType$9 = $sliceType($Uint8);
	sliceType$10 = $sliceType($Uint8);
	sliceType$11 = $sliceType($Uint8);
	sliceType$12 = $sliceType($Uint8);
	sliceType$13 = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 24);
	sliceType$14 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 32);
	arrayType$2 = $arrayType($Uint8, 24);
	sliceType$15 = $sliceType($Uint8);
	ptrType$3 = $ptrType(floatInfo);
	sliceType$16 = $sliceType($Uint8);
	arrayType$3 = $arrayType($Uint8, 32);
	sliceType$17 = $sliceType($Uint8);
	arrayType$4 = $arrayType($Uint8, 24);
	sliceType$18 = $sliceType($Uint8);
	sliceType$19 = $sliceType($Uint8);
	sliceType$20 = $sliceType($Uint8);
	sliceType$21 = $sliceType($Uint8);
	arrayType$5 = $arrayType($Uint8, 3);
	arrayType$6 = $arrayType($Uint8, 50);
	sliceType$22 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType($Uint8);
	arrayType$7 = $arrayType($Uint8, 65);
	sliceType$25 = $sliceType($Uint8);
	sliceType$26 = $sliceType($Uint8);
	arrayType$8 = $arrayType($Uint8, 4);
	sliceType$27 = $sliceType($Uint8);
	sliceType$28 = $sliceType($Uint8);
	sliceType$29 = $sliceType($Uint8);
	sliceType$32 = $sliceType($Uint8);
	sliceType$33 = $sliceType($Uint8);
	arrayType$9 = $arrayType($Uint8, 4);
	sliceType$34 = $sliceType($Uint8);
	sliceType$35 = $sliceType($Uint8);
	sliceType$36 = $sliceType($Uint8);
	ptrType$4 = $ptrType(NumError);
	arrayType$10 = $arrayType($Uint8, 800);
	ptrType$5 = $ptrType(floatInfo);
	ptrType$6 = $ptrType(decimal);
	ptrType$7 = $ptrType(floatInfo);
	ptrType$8 = $ptrType(floatInfo);
	ptrType$9 = $ptrType(floatInfo);
	ptrType$10 = $ptrType(decimalSlice);
	ptrType$11 = $ptrType(decimalSlice);
	ptrType$12 = $ptrType(extFloat);
	ptrType$13 = $ptrType(extFloat);
	ParseBool = $pkg.ParseBool = function(str) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err = $ifaceNil, str, value = false;
		_ref = str;
		if (_ref === "1" || _ref === "t" || _ref === "T" || _ref === "true" || _ref === "TRUE" || _ref === "True") {
			_tmp = true; _tmp$1 = $ifaceNil; value = _tmp; err = _tmp$1;
			return [value, err];
		} else if (_ref === "0" || _ref === "f" || _ref === "F" || _ref === "false" || _ref === "FALSE" || _ref === "False") {
			_tmp$2 = false; _tmp$3 = $ifaceNil; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false; _tmp$5 = syntaxError("ParseBool", str); value = _tmp$4; err = _tmp$5;
		return [value, err];
	};
	FormatBool = $pkg.FormatBool = function(b) {
		var b;
		if (b) {
			return "true";
		}
		return "false";
	};
	AppendBool = $pkg.AppendBool = function(dst, b) {
		var b, dst;
		if (b) {
			return $appendSlice(dst, new sliceType$8($stringToBytes("true")));
		}
		return $appendSlice(dst, new sliceType$8($stringToBytes("false")));
	};
	equalIgnoreCase = function(s1, s2) {
		var c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f = 0, ok = false, s;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var b, e, esign, i, ok = false, s, sawdigits, sawdot, x, x$1;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var _ref, c, dp, e, esign, exp = 0, i, mantissa = new $Uint64(0, 0), nd, ndMant, neg = false, ok = false, s, sawdigits, sawdot, trunc = false, x;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_ref = true;
			if (_ref === (c === 46)) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_ref === 48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $args = arguments, $s = 0, $this = this, _tmp, _tmp$1, b = new $Uint64(0, 0), bits, d, exp, mant, n, n$1, n$2, overflow = false, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3;
		/* */ s: while (true) { switch ($s) { case 0:
		d = $this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;
		return [b, overflow];
		/* */ case -1: } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f = 0, mantissa, neg, ok = false, x, x$1, x$2;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f = 0, mantissa, neg, ok = false, x, x$1, x$2;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp])); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2]))); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err = $ifaceNil, exp, ext, f = 0, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = $fround(val); _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err = $ifaceNil, exp, ext, f = 0, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	ParseFloat = $pkg.ParseFloat = function(s, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bitSize, err = $ifaceNil, err1, err1$1, f = 0, f1, f1$1, s;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tmp = f1; _tmp$1 = err1; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];
		_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	NumError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + e.Err.Error();
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var base, x;
		if (base < 2) {
			return new $Uint64(0, 0);
		}
		return (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
	};
	ParseUint = $pkg.ParseUint = function(s, base, bitSize) {
		var $args = arguments, $s = 0, $this = this, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, cutoff, d, err = $ifaceNil, i, maxVal, n = new $Uint64(0, 0), n1, s0, v, x, x$1;
		/* */ s: while (true) { switch ($s) { case 0:
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* */ if (s.length < 1) { $s = 1; continue; }
		/* */ if (2 <= base && base <= 36) { $s = 2; continue; }
		/* */ if (base === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (s.length < 1) { */ case 1:
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 6; continue;
			$s = 5; continue;
		/* } else if (2 <= base && base <= 36) { */ case 2:
			$s = 5; continue;
		/* } else if (base === 0) { */ case 3:
			/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 7; continue; }
			/* */ if (s.charCodeAt(0) === 48) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 7:
				base = 16;
				s = s.substring(2);
				/* */ if (s.length < 1) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (s.length < 1) { */ case 11:
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 6; continue;
				/* } */ case 12:
				$s = 10; continue;
			/* } else if (s.charCodeAt(0) === 48) { */ case 8:
				base = 8;
				$s = 10; continue;
			/* } else { */ case 9:
				base = 10;
			/* } */ case 10:
			$s = 5; continue;
		/* } else { */ case 4:
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 6; continue;
		/* } */ case 5:
		n = new $Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.$high - 0, x.$low - 1));
		i = 0;
		/* while (true) { */ case 13:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 14; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* */ if (48 <= d && d <= 57) { $s = 15; continue; }
			/* */ if (97 <= d && d <= 122) { $s = 16; continue; }
			/* */ if (65 <= d && d <= 90) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (48 <= d && d <= 57) { */ case 15:
				v = d - 48 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (97 <= d && d <= 122) { */ case 16:
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else if (65 <= d && d <= 90) { */ case 17:
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
				$s = 19; continue;
			/* } else { */ case 18:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 19:
			/* */ if ((v >> 0) >= base) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((v >> 0) >= base) { */ case 20:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 6; continue;
			/* } */ case 21:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 22:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 23:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$1 = new $Uint64(0, v), new $Uint64(n.$high + x$1.$high, n.$low + x$1.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 24:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 6; continue;
			/* } */ case 25:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* Error: */ case 6:
		_tmp$4 = n; _tmp$5 = new NumError.ptr("ParseUint", s0, err); n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ case -1: } return; }
	};
	ParseInt = $pkg.ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err = $ifaceNil, i = new $Int64(0, 0), n, neg, s, s0, un, x, x$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0); _tmp$1 = syntaxError("ParseInt", s); i = _tmp; err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType$1).Func = "ParseInt";
			$assertType(err, ptrType$2).Num = s0;
			_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)); _tmp$5 = rangeError("ParseInt", s0); i = _tmp$4; err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low)); _tmp$7 = rangeError("ParseInt", s0); i = _tmp$6; err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n; _tmp$9 = $ifaceNil; i = _tmp$8; err = _tmp$9;
		return [i, err];
	};
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$9, n);
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$10(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$11(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$12(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$13(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = $clone(arrayType.zero(), arrayType);
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, n, r, w, x, x$1, x$2, x$3, y, y$1;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((n >> $min(k, 31)) >> 0) === 0)) { break; }
					n = n * 10 >> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0);
			n = ((n * 10 >> 0) + c >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >> 0);
			dig = (n >> $min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >> 0) << 24 >>> 24)));
			w = w + (1) >> 0;
			n = ((n * 10 >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (n >> $min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >> 0) << 24 >>> 24)));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$14(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >> 0) << 24 >>> 24)));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >> 0) << 24 >>> 24)));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 27)) { break; }
				leftShift(a, 27);
				k = k - (27) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (true) {
				if (!(k < -27)) { break; }
				rightShift(a, 27);
				k = k + (27) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = (x$1 = a.d, ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])) + (1) << 24 >>> 24));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var bits = new $Uint64(0, 0), exp, f, flt, mant, n, overflow = false, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower = new extFloat.ptr(), mant, neg, upper = new extFloat.ptr(), x, x$1, x$2, x$3, x$4;
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat); _tmp$1 = $clone(f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		$copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg), extFloat);
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			$copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg), extFloat);
		} else {
			$copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg), extFloat);
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift = 0, x, x$1, x$2, x$3, x$4, x$5;
		f = this;
		_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		g = $clone(g, extFloat);
		_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.$low >>> 0)); fhi = _tmp; flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.$low >>> 0)); ghi = _tmp$2; glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok = false, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10 = 0, f, i, index = 0;
		f = this;
		approxExp10 = (_q = (((-46 - f.exp >> 0)) * 28 >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + (i * 8 >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10 = 0, i;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, nonAsciiName, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		nonAsciiName = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$5 = (pow10.$low >>> 0), (((integer >>> 16 << 16) * x$5 >>> 0) + (integer << 16 >>> 16) * x$5) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = $clone(arrayType$1.zero(), arrayType$1);
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$6 = d.d, x$7 = i$1 - pos >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				nonAsciiName = $mul64(nonAsciiName, (new $Uint64(0, 10)));
				if ((x$8 = $mul64(new $Uint64(0, 2), nonAsciiName), x$9 = $shiftLeft64(new $Uint64(0, 1), shift), (x$8.$high > x$9.$high || (x$8.$high === x$9.$high && x$8.$low > x$9.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$10 = d.d, ((nd < 0 || nd >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24)));
				fraction = (x$11 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$11.$high, fraction.$low - x$11.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$12 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$12.$high | fraction.$high, (x$12.$low | fraction.$low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$13 = d.d, ((i$2 < 0 || i$2 >= x$13.$length) ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var d, den, i, nonAsciiName, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + nonAsciiName.$high, num.$low + nonAsciiName.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - nonAsciiName.$high, num.$low - nonAsciiName.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + i] = (x$9 = d.d, ((i < 0 || i >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = $clone(arrayType$2.zero(), arrayType$2);
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24)));
			integer = integer - ((x$19 = (pow$1.$low >>> 0), (((digit >>> 16 << 16) * x$19 >>> 0) + (digit << 16 >>> 16) * x$19) >>> 0)) >>> 0;
			currentDiff = (x$20 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$20.$high + fraction.$high, x$20.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$21 = d.d, x$22 = d.nd, ((x$22 < 0 || x$22 >= x$21.$length) ? $throwRuntimeError("index out of range") : x$21.$array[x$21.$offset + x$22] = ((digit$1 + 48 >> 0) << 24 >>> 24)));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$23 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$23.$high, fraction.$low - x$23.$low));
			if ((x$24 = $mul64(allowance, multiplier), (fraction.$high < x$24.$high || (fraction.$high === x$24.$high && fraction.$low < x$24.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + _index] = (x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = $pkg.FormatFloat = function(f, fmt, prec, bitSize) {
		var bitSize, f, fmt, prec;
		return $bytesToString(genericFtoa($makeSlice(sliceType$15, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	AppendFloat = $pkg.AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _ref, _ref$1, _ref$2, _ref$3, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$3.nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits($fround(val)));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, new sliceType$16($stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = $clone(_tuple[0], extFloat); upper = $clone(_tuple[1], extFloat);
			buf = $clone(arrayType$3.zero(), arrayType$3);
			digs.d = new sliceType$17(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + (1) >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = $clone(arrayType$4.zero(), arrayType$4);
				digs.d = new sliceType$18(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _ref, _ref$1, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			$copy(digs, new decimalSlice.ptr(new sliceType$20(d.d), d.nd, d.dp, false), decimalSlice);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			$copy(digs, new decimalSlice.ptr(new sliceType$21(d.d), d.nd, d.dp, false), decimalSlice);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _ref, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		digs = $clone(digs, decimalSlice);
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var _tmp, _tmp$1, _tmp$2, d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (332 * ((d.dp - d.nd >> 0)) >> 0) >= (100 * ((exp - (flt.mantbits >> 0) >> 0)) >> 0)) {
			return;
		}
		upper = new decimal.ptr();
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr();
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			} else {
				l = 48;
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _r, _ref, buf, ch, d, dst, exp, fmt, i, i$1, m, neg, prec, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (true) {
				if (!(i < m)) { break; }
				dst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		buf = $clone(arrayType$5.zero(), arrayType$5);
		i$1 = 3;
		while (true) {
			if (!(exp >= 10)) { break; }
			i$1 = i$1 - (1) >> 0;
			((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24));
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - (1) >> 0;
		((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24));
		_ref = i$1;
		if (_ref === 0) {
			dst = $append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = $append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = $append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, i$1, j, neg, prec, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (true) {
				if (!(i < d.dp && i < d.nd)) { break; }
				dst = $append(dst, (x = d.d, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
				i = i + (1) >> 0;
			}
			while (true) {
				if (!(i < d.dp)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i$1 = 0;
			while (true) {
				if (!(i$1 < prec)) { break; }
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x$1 = d.d, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				}
				dst = $append(dst, ch);
				i$1 = i$1 + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _q, _r, buf, dst, esign, exp, flt, mant, n, neg, w, x;
		buf = $clone(arrayType$6.zero(), arrayType$6);
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (true) {
			if (!(exp > 0 || n < 1)) { break; }
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24));
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		w = w - (1) >> 0;
		((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = esign);
		w = w - (1) >> 0;
		((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 112);
		n = 0;
		while (true) {
			if (!((mant.$high > 0 || (mant.$high === 0 && mant.$low > 0)) || n < 1)) { break; }
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.$high + 0, x.$low + 48)).$low << 24 >>> 24));
			mant = $div64(mant, (new $Uint64(0, 10)), false);
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45);
		}
		return $appendSlice(dst, $subslice(new sliceType$22(buf), w));
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = $pkg.FormatUint = function(i, base) {
		var _tuple, base, i, s;
		_tuple = formatBits(sliceType$23.nil, i, base, false, false); s = _tuple[1];
		return s;
	};
	FormatInt = $pkg.FormatInt = function(i, base) {
		var _tuple, base, i, s;
		_tuple = formatBits(sliceType$23.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false); s = _tuple[1];
		return s;
	};
	Itoa = $pkg.Itoa = function(i) {
		var i;
		return FormatInt(new $Int64(0, i), 10);
	};
	AppendInt = $pkg.AppendInt = function(dst, i, base) {
		var _tuple, base, dst, i;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true); dst = _tuple[0];
		return dst;
	};
	AppendUint = $pkg.AppendUint = function(dst, i, base) {
		var _tuple, base, dst, i;
		_tuple = formatBits(dst, i, base, false, true); dst = _tuple[0];
		return dst;
	};
	formatBits = function(dst, u, base, neg, append_) {
		var a, append_, b, b$1, base, d = sliceType$24.nil, dst, i, j, m, neg, q, q$1, s = "", s$1, u, x, x$1, x$2, x$3;
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = $clone(arrayType$7.zero(), arrayType$7);
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 100)))) { break; }
				i = i - (2) >> 0;
				q = $div64(u, new $Uint64(0, 100), false);
				j = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
				(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a[x$1] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j)));
				(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a[x$2] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j)));
				u = q;
			}
			if ((u.$high > 0 || (u.$high === 0 && u.$low >= 10))) {
				i = i - (1) >> 0;
				q$1 = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$3 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.$high - x$3.$high, u.$low - x$3.$low)).$low >>> 0)));
				u = q$1;
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new $Uint64(0, base);
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(($div64(u, b$1, true).$low >>> 0)));
					u = $div64(u, (b$1), false);
				}
			}
		}
		i = i - (1) >> 0;
		((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0)));
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$25(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$26(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var ASCIIonly, _q, _ref, _tuple, buf, n, quote, r, runeTmp, s, s$1, s$2, width;
		runeTmp = $clone(arrayType$8.zero(), arrayType$8);
		buf = $makeSlice(sliceType$27, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\x")));
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new sliceType$28(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$29(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\x")));
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\u")));
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\u")));
					s$1 = 12;
					while (true) {
						if (!(s$1 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, new sliceType$27($stringToBytes("\\U")));
					s$2 = 28;
					while (true) {
						if (!(s$2 >= 0)) { break; }
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = $pkg.Quote = function(s) {
		var s;
		return quoteWith(s, 34, false);
	};
	QuoteToASCII = $pkg.QuoteToASCII = function(s) {
		var s;
		return quoteWith(s, 34, true);
	};
	QuoteRune = $pkg.QuoteRune = function(r) {
		var r;
		return quoteWith($encodeRune(r), 39, false);
	};
	AppendQuoteRune = $pkg.AppendQuoteRune = function(dst, r) {
		var dst, r;
		return $appendSlice(dst, new sliceType$32($stringToBytes(QuoteRune(r))));
	};
	QuoteRuneToASCII = $pkg.QuoteRuneToASCII = function(r) {
		var r;
		return quoteWith($encodeRune(r), 39, true);
	};
	AppendQuoteRuneToASCII = $pkg.AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return $appendSlice(dst, new sliceType$33($stringToBytes(QuoteRuneToASCII(r))));
	};
	CanBackquote = $pkg.CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok = false, v = 0;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = $pkg.UnquoteChar = function(s, quote) {
		var _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err = $ifaceNil, j, j$1, multibyte = false, n, ok, quote, r, s, size, tail = "", v, v$1, value = 0, x, x$1;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = $ifaceNil; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = $ifaceNil; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (true) {
				if (!(j < n)) { break; }
				_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + (1) >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (true) {
				if (!(j$1 < 2)) { break; }
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + (1) >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	Unquote = $pkg.Unquote = function(s) {
		var _q, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err = $ifaceNil, err$1, multibyte, n, n$1, quote, r, runeTmp, s, size, ss, t = "";
		n = s.length;
		if (n < 2) {
			_tmp = ""; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = ""; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = ""; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s; _tmp$7 = $ifaceNil; t = _tmp$6; err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = ""; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = ""; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s; _tmp$13 = $ifaceNil; t = _tmp$12; err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s; _tmp$15 = $ifaceNil; t = _tmp$14; err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = $clone(arrayType$9.zero(), arrayType$9);
		buf = $makeSlice(sliceType$34, 0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = ""; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$35(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$36(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = ""; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf); _tmp$21 = $ifaceNil; t = _tmp$20; err = _tmp$21;
		return [t, err];
	};
	contains = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = $pkg.IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = i & ~1, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = i$1 & ~1, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$5], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$13.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$7], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$8], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$9], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$10, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$11, ptrType$12, ptrType$12], [$Bool], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", typ: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", typ: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", typ: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", typ: arrayType$10, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", typ: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", typ: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", typ: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", typ: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", typ: sliceType$19, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", typ: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", typ: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", typ: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_strconv = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2226, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8381, 8400, 8432, 8448, 8585, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42929, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43871, 43876, 43877, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65069, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$5([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42654, 42895, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$6([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70088, 70093, 70093, 70096, 70106, 70113, 70132, 70144, 70205, 70320, 70378, 70384, 70393, 70401, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71113, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74648, 74752, 74868, 77824, 78894, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127788, 127792, 127869, 127872, 127950, 127956, 127991, 128000, 128330, 128336, 128578, 128581, 128719, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$7([12, 39, 59, 62, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 4626, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62719, 62842, 62884]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } }; $init_strconv.$blocking = true; return $init_strconv;
	};
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, sliceType$1, ptrType$4, funcType$1, sliceType$2, ptrType$5, ptrType$6, arrayType$1, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, sliceType$3, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, sliceType$4, ptrType$20, sliceType$5, sliceType$6, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, sliceType$7, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, sliceType$8, ptrType$35, sliceType$9, ptrType$36, sliceType$10, sliceType$11, sliceType$12, structType$5, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, arrayType$2, structType$6, ptrType$45, ptrType$46, ptrType$47, sliceType$14, ptrType$48, sliceType$15, sliceType$16, sliceType$17, sliceType$18, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, sliceType$20, sliceType$21, sliceType$22, ptrType$58, sliceType$23, ptrType$59, sliceType$24, sliceType$25, ptrType$60, ptrType$61, ptrType$62, ptrType$63, ptrType$67, ptrType$81, sliceType$27, ptrType$84, ptrType$85, ptrType$89, sliceType$29, sliceType$30, ptrType$90, ptrType$91, ptrType$92, sliceType$33, funcType$3, ptrType$96, ptrType$97, ptrType$98, ptrType$99, sliceType$34, funcType$4, ptrType$100, funcType$5, funcType$6, ptrType$101, ptrType$102, sliceType$35, funcType$7, ptrType$103, ptrType$111, sliceType$38, sliceType$39, sliceType$40, sliceType$41, sliceType$42, sliceType$43, sliceType$44, sliceType$45, funcType$8, arrayType$4, sliceType$46, sliceType$47, sliceType$48, ptrType$112, ptrType$113, initialized, stringPtrMap, callHelper, jsObjectPtr, kindNames, uint8Type, init, jsType, reflectType, setKindType, newStringPtr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		this.t = t_ !== undefined ? t_ : $ifaceNil;
		this.m = m_ !== undefined ? m_ : null;
		this.keys = keys_ !== undefined ? keys_ : null;
		this.i = i_ !== undefined ? i_ : 0;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this._$2 = _$2_ !== undefined ? _$2_ : 0;
		this.align = align_ !== undefined ? align_ : 0;
		this.fieldAlign = fieldAlign_ !== undefined ? fieldAlign_ : 0;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.alg = alg_ !== undefined ? alg_ : ptrType$6.nil;
		this.gc = gc_ !== undefined ? gc_ : arrayType$1.zero();
		this.string = string_ !== undefined ? string_ : ptrType$7.nil;
		this.uncommonType = uncommonType_ !== undefined ? uncommonType_ : ptrType$8.nil;
		this.ptrToThis = ptrToThis_ !== undefined ? ptrToThis_ : ptrType$9.nil;
		this.zero = zero_ !== undefined ? zero_ : 0;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		this.hash = hash_ !== undefined ? hash_ : $throwNilPointerError;
		this.equal = equal_ !== undefined ? equal_ : $throwNilPointerError;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$12.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$13.nil;
		this.mtyp = mtyp_ !== undefined ? mtyp_ : ptrType$14.nil;
		this.typ = typ_ !== undefined ? typ_ : ptrType$15.nil;
		this.ifn = ifn_ !== undefined ? ifn_ : 0;
		this.tfn = tfn_ !== undefined ? tfn_ : 0;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$10.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$11.nil;
		this.methods = methods_ !== undefined ? methods_ : sliceType$3.nil;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$16.nil;
		this.slice = slice_ !== undefined ? slice_ : ptrType$17.nil;
		this.len = len_ !== undefined ? len_ : 0;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$18.nil;
		this.dir = dir_ !== undefined ? dir_ : 0;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.dotdotdot = dotdotdot_ !== undefined ? dotdotdot_ : false;
		this.in$2 = in$2_ !== undefined ? in$2_ : sliceType$4.nil;
		this.out = out_ !== undefined ? out_ : sliceType$5.nil;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$27.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$28.nil;
		this.typ = typ_ !== undefined ? typ_ : ptrType$29.nil;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.methods = methods_ !== undefined ? methods_ : sliceType$6.nil;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.key = key_ !== undefined ? key_ : ptrType$21.nil;
		this.elem = elem_ !== undefined ? elem_ : ptrType$22.nil;
		this.bucket = bucket_ !== undefined ? bucket_ : ptrType$23.nil;
		this.hmap = hmap_ !== undefined ? hmap_ : ptrType$24.nil;
		this.keysize = keysize_ !== undefined ? keysize_ : 0;
		this.indirectkey = indirectkey_ !== undefined ? indirectkey_ : 0;
		this.valuesize = valuesize_ !== undefined ? valuesize_ : 0;
		this.indirectvalue = indirectvalue_ !== undefined ? indirectvalue_ : 0;
		this.bucketsize = bucketsize_ !== undefined ? bucketsize_ : 0;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$25.nil;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$26.nil;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$30.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$31.nil;
		this.typ = typ_ !== undefined ? typ_ : ptrType$32.nil;
		this.tag = tag_ !== undefined ? tag_ : ptrType$33.nil;
		this.offset = offset_ !== undefined ? offset_ : 0;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.fields = fields_ !== undefined ? fields_ : sliceType$7.nil;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Func = Func_ !== undefined ? Func_ : new Value.ptr();
		this.Index = Index_ !== undefined ? Index_ : 0;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Tag = Tag_ !== undefined ? Tag_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Index = Index_ !== undefined ? Index_ : sliceType$24.nil;
		this.Anonymous = Anonymous_ !== undefined ? Anonymous_ : false;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ptrType$58.nil;
		this.index = index_ !== undefined ? index_ : sliceType$23.nil;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ptrType$40.nil;
		this.ptr = ptr_ !== undefined ? ptr_ : 0;
		this.flag = flag_ !== undefined ? flag_ : 0;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		this.itab = itab_ !== undefined ? itab_ : ptrType$45.nil;
		this.word = word_ !== undefined ? word_ : 0;
	});
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$4 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$1], [ptrType$4], true);
	sliceType$2 = $sliceType($String);
	ptrType$5 = $ptrType(rtype);
	ptrType$6 = $ptrType(typeAlg);
	arrayType$1 = $arrayType($UnsafePointer, 2);
	ptrType$7 = $ptrType($String);
	ptrType$8 = $ptrType(uncommonType);
	ptrType$9 = $ptrType(rtype);
	ptrType$10 = $ptrType($String);
	ptrType$11 = $ptrType($String);
	sliceType$3 = $sliceType(method);
	ptrType$12 = $ptrType($String);
	ptrType$13 = $ptrType($String);
	ptrType$14 = $ptrType(rtype);
	ptrType$15 = $ptrType(rtype);
	ptrType$16 = $ptrType(rtype);
	ptrType$17 = $ptrType(rtype);
	ptrType$18 = $ptrType(rtype);
	ptrType$19 = $ptrType(rtype);
	sliceType$4 = $sliceType(ptrType$19);
	ptrType$20 = $ptrType(rtype);
	sliceType$5 = $sliceType(ptrType$20);
	sliceType$6 = $sliceType(imethod);
	ptrType$21 = $ptrType(rtype);
	ptrType$22 = $ptrType(rtype);
	ptrType$23 = $ptrType(rtype);
	ptrType$24 = $ptrType(rtype);
	ptrType$25 = $ptrType(rtype);
	ptrType$26 = $ptrType(rtype);
	sliceType$7 = $sliceType(structField);
	ptrType$27 = $ptrType($String);
	ptrType$28 = $ptrType($String);
	ptrType$29 = $ptrType(rtype);
	ptrType$30 = $ptrType($String);
	ptrType$31 = $ptrType($String);
	ptrType$32 = $ptrType(rtype);
	ptrType$33 = $ptrType($String);
	ptrType$34 = $ptrType(rtype);
	sliceType$8 = $sliceType(method);
	ptrType$35 = $ptrType(rtype);
	sliceType$9 = $sliceType(ptrType$35);
	ptrType$36 = $ptrType(rtype);
	sliceType$10 = $sliceType(ptrType$36);
	sliceType$11 = $sliceType(imethod);
	sliceType$12 = $sliceType(structField);
	structType$5 = $structType([{prop: "str", name: "str", pkg: "reflect", typ: $String, tag: ""}]);
	ptrType$37 = $ptrType($String);
	ptrType$38 = $ptrType($String);
	ptrType$39 = $ptrType($String);
	ptrType$40 = $ptrType(rtype);
	ptrType$41 = $ptrType(rtype);
	ptrType$42 = $ptrType(nonEmptyInterface);
	ptrType$43 = $ptrType(rtype);
	ptrType$44 = $ptrType(rtype);
	arrayType$2 = $arrayType($UnsafePointer, 100000);
	structType$6 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", typ: ptrType$43, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$44, tag: ""}, {prop: "link", name: "link", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", typ: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", typ: arrayType$2, tag: ""}]);
	ptrType$45 = $ptrType(structType$6);
	ptrType$46 = $ptrType(uncommonType);
	ptrType$47 = $ptrType(js.Object);
	sliceType$14 = $sliceType(ptrType$47);
	ptrType$48 = $ptrType(uncommonType);
	sliceType$15 = $sliceType(Value);
	sliceType$16 = $sliceType(Value);
	sliceType$17 = $sliceType(Value);
	sliceType$18 = $sliceType(Value);
	ptrType$49 = $ptrType($Uint8);
	ptrType$50 = $ptrType(uncommonType);
	ptrType$51 = $ptrType(uncommonType);
	ptrType$52 = $ptrType(rtype);
	ptrType$53 = $ptrType(uncommonType);
	ptrType$54 = $ptrType(uncommonType);
	ptrType$55 = $ptrType(method);
	ptrType$56 = $ptrType(interfaceType);
	ptrType$57 = $ptrType(imethod);
	sliceType$20 = $sliceType($Int);
	sliceType$21 = $sliceType(fieldScan);
	sliceType$22 = $sliceType(fieldScan);
	ptrType$58 = $ptrType(structType);
	sliceType$23 = $sliceType($Int);
	ptrType$59 = $ptrType(rtype);
	sliceType$24 = $sliceType($Int);
	sliceType$25 = $sliceType($Int);
	ptrType$60 = $ptrType(rtype);
	ptrType$61 = $ptrType(rtype);
	ptrType$62 = $ptrType(rtype);
	ptrType$63 = $ptrType(rtype);
	ptrType$67 = $ptrType(rtype);
	ptrType$81 = $ptrType($UnsafePointer);
	sliceType$27 = $sliceType(Value);
	ptrType$84 = $ptrType($UnsafePointer);
	ptrType$85 = $ptrType($UnsafePointer);
	ptrType$89 = $ptrType(rtype);
	sliceType$29 = $sliceType($Uint8);
	sliceType$30 = $sliceType($Int32);
	ptrType$90 = $ptrType(rtype);
	ptrType$91 = $ptrType(js.Object);
	ptrType$92 = $ptrType(js.Object);
	sliceType$33 = $sliceType($Int);
	funcType$3 = $funcType([$String], [$Bool], false);
	ptrType$96 = $ptrType(rtype);
	ptrType$97 = $ptrType(uncommonType);
	ptrType$98 = $ptrType(rtype);
	ptrType$99 = $ptrType(rtype);
	sliceType$34 = $sliceType($Int);
	funcType$4 = $funcType([$String], [$Bool], false);
	ptrType$100 = $ptrType(rtype);
	funcType$5 = $funcType([$UnsafePointer, $Uintptr, $Uintptr], [$Uintptr], false);
	funcType$6 = $funcType([$UnsafePointer, $UnsafePointer, $Uintptr], [$Bool], false);
	ptrType$101 = $ptrType(uncommonType);
	ptrType$102 = $ptrType(interfaceType);
	sliceType$35 = $sliceType($Int);
	funcType$7 = $funcType([$String], [$Bool], false);
	ptrType$103 = $ptrType(structType);
	ptrType$111 = $ptrType(js.Object);
	sliceType$38 = $sliceType(Value);
	sliceType$39 = $sliceType($Uint8);
	sliceType$40 = $sliceType($Int32);
	sliceType$41 = $sliceType(Value);
	sliceType$42 = $sliceType(Value);
	sliceType$43 = $sliceType(Value);
	sliceType$44 = $sliceType(Value);
	sliceType$45 = $sliceType($Int);
	funcType$8 = $funcType([$String], [$Bool], false);
	arrayType$4 = $arrayType($Uintptr, 2);
	sliceType$46 = $sliceType(Value);
	sliceType$47 = $sliceType($Uint8);
	sliceType$48 = $sliceType($Int32);
	ptrType$112 = $ptrType(rtype);
	ptrType$113 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		used = (function(i) {
			var i;
		});
		used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$6.nil, arrayType$1.zero(), ptrType$7.nil, ptrType$8.nil, ptrType$9.nil, 0), new x.constructor.elem(x)));
		used((x$1 = new uncommonType.ptr(ptrType$10.nil, ptrType$11.nil, sliceType$3.nil), new x$1.constructor.elem(x$1)));
		used((x$2 = new method.ptr(ptrType$12.nil, ptrType$13.nil, ptrType$14.nil, ptrType$15.nil, 0, 0), new x$2.constructor.elem(x$2)));
		used((x$3 = new arrayType.ptr(new rtype.ptr(), ptrType$16.nil, ptrType$17.nil, 0), new x$3.constructor.elem(x$3)));
		used((x$4 = new chanType.ptr(new rtype.ptr(), ptrType$18.nil, 0), new x$4.constructor.elem(x$4)));
		used((x$5 = new funcType.ptr(new rtype.ptr(), false, sliceType$4.nil, sliceType$5.nil), new x$5.constructor.elem(x$5)));
		used((x$6 = new interfaceType.ptr(new rtype.ptr(), sliceType$6.nil), new x$6.constructor.elem(x$6)));
		used((x$7 = new mapType.ptr(new rtype.ptr(), ptrType$21.nil, ptrType$22.nil, ptrType$23.nil, ptrType$24.nil, 0, 0, 0, 0, 0), new x$7.constructor.elem(x$7)));
		used((x$8 = new ptrType.ptr(new rtype.ptr(), ptrType$25.nil), new x$8.constructor.elem(x$8)));
		used((x$9 = new sliceType.ptr(new rtype.ptr(), ptrType$26.nil), new x$9.constructor.elem(x$9)));
		used((x$10 = new structType.ptr(new rtype.ptr(), sliceType$7.nil), new x$10.constructor.elem(x$10)));
		used((x$11 = new imethod.ptr(ptrType$27.nil, ptrType$28.nil, ptrType$29.nil), new x$11.constructor.elem(x$11)));
		used((x$12 = new structField.ptr(ptrType$30.nil, ptrType$31.nil, ptrType$32.nil, ptrType$33.nil, 0), new x$12.constructor.elem(x$12)));
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$34);
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _i, _i$1, _i$2, _i$3, _i$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, out, params, reflectFields, reflectMethods, results, rt, t, typ;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr((($parseInt(typ.size) >> 0) >>> 0), 0, 0, 0, 0, (($parseInt(typ.kind) >> 0) << 24 >>> 24), ptrType$6.nil, arrayType$1.zero(), newStringPtr(typ.string), ptrType$8.nil, ptrType$9.nil, 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!($internalize(typ.typeName, $String) === "") || !(($parseInt(methodSet.length) === 0))) {
				reflectMethods = $makeSlice(sliceType$8, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					t = m.typ;
					$copy(((i < 0 || i >= reflectMethods.$length) ? $throwRuntimeError("index out of range") : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newStringPtr(m.name), newStringPtr(m.pkg), reflectType(t), reflectType($funcType(new ($global.Array)(typ).concat(t.params), t.results, t.variadic)), 0, 0), method);
					_i++;
				}
				rt.uncommonType = new uncommonType.ptr(newStringPtr(typ.typeName), newStringPtr(typ.pkg), reflectMethods);
				rt.uncommonType.jsType = typ;
			}
			_ref$1 = rt.Kind();
			if (_ref$1 === 17) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(), reflectType(typ.elem), ptrType$17.nil, (($parseInt(typ.len) >> 0) >>> 0)));
			} else if (_ref$1 === 18) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(), reflectType(typ.elem), (dir >>> 0)));
			} else if (_ref$1 === 19) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$9, $parseInt(params.length));
				_ref$2 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$2.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$10, $parseInt(results.length));
				_ref$3 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$3.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), !!(typ.variadic), in$1, out));
			} else if (_ref$1 === 20) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$11, $parseInt(methods.length));
				_ref$4 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$4.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					$copy(((i$3 < 0 || i$3 >= imethods.$length) ? $throwRuntimeError("index out of range") : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newStringPtr(m$1.name), newStringPtr(m$1.pkg), reflectType(m$1.typ)), imethod);
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), imethods));
			} else if (_ref$1 === 21) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(), reflectType(typ.key), reflectType(typ.elem), ptrType$23.nil, ptrType$24.nil, 0, 0, 0, 0, 0));
			} else if (_ref$1 === 22) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(), reflectType(typ.elem)));
			} else if (_ref$1 === 23) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(), reflectType(typ.elem)));
			} else if (_ref$1 === 25) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$12, $parseInt(fields.length));
				_ref$5 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$5.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					$copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? $throwRuntimeError("index out of range") : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr(newStringPtr(f.name), newStringPtr(f.pkg), reflectType(f.typ), newStringPtr(f.tag), (i$4 >>> 0)), structField);
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), reflectFields));
			}
		}
		return typ.reflectType;
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	newStringPtr = function(strObj) {
		var _entry, _key, _tuple, c, ok, ptr, str, strObj;
		c = $clone(new structType$5.ptr(), structType$5);
		c.str = strObj;
		str = c.str;
		if (str === "") {
			return ptrType$37.nil;
		}
		_tuple = (_entry = stringPtrMap[str], _entry !== undefined ? [_entry.v, true] : [ptrType$38.nil, false]); ptr = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			ptr = new ptrType$39(function() { return str; }, function($v) { str = $v; });
			_key = str; (stringPtrMap || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: ptr };
		}
		return ptr;
	};
	isWrapped = function(typ) {
		var _ref, typ;
		_ref = typ.Kind();
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) {
			return true;
		} else if (_ref === 22) {
			return typ.Elem().Kind() === 17;
		}
		return false;
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var fl, rt, t, v;
		rt = t.common();
		if ((t.Kind() === 17) || (t.Kind() === 25) || (t.Kind() === 22)) {
			return new Value.ptr(rt, v, (fl | (t.Kind() >>> 0)) >>> 0);
		}
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (t.Kind() >>> 0)) >>> 0) | 64) >>> 0);
	};
	MakeSlice = $pkg.MakeSlice = function(typ, len, cap) {
		var cap, len, typ;
		if (!((typ.Kind() === 23))) {
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		}
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		return makeValue(typ, $makeSlice(jsType(typ), len, cap, (function() {
			return jsType(typ.Elem()).zero();
		})), 0);
	};
	TypeOf = $pkg.TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$6.nil, arrayType$1.zero(), ptrType$7.nil, ptrType$8.nil, ptrType$9.nil, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	ValueOf = $pkg.ValueOf = function(i) {
		var i;
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$40.nil, 0, 0);
		}
		return makeValue(reflectType(i.constructor), i.$val, 0);
	};
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = $pkg.SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	Zero = $pkg.Zero = function(typ) {
		var typ;
		return makeValue(typ, jsType(typ).zero(), 0);
	};
	unsafe_New = function(typ) {
		var _ref, typ;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var _ref, bits, f, ptr, t, typ;
		typ = t.common();
		ptr = unsafe_New(typ);
		_ref = typ.Kind();
		if (_ref === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_ref === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			ptr.$set((bits.$low >> 0));
		} else if (_ref === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_ref === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_ref === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			ptr.$set((bits.$low >>> 0));
		} else if (_ref === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	memmove = function(adst, asrc, n) {
		var adst, asrc, n;
		adst.$set(asrc.$get());
	};
	mapaccess = function(t, m, key) {
		var entry, k, key, m, t;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		entry = m[$externalize($internalize(k, $String), $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var entry, et, jsVal, k, key, kv, m, newVal, t, val;
		kv = key.$get();
		k = kv;
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		jsVal = val.$get();
		et = t.Elem();
		if (et.Kind() === 25) {
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		}
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize($internalize(k, $String), $String)] = entry;
	};
	mapdelete = function(t, m, key) {
		var k, key, m, t;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		delete m[$externalize($internalize(k, $String), $String)];
	};
	mapiterinit = function(t, m) {
		var m, t;
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var it, iter, k;
		iter = it;
		k = iter.keys[iter.i];
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, jsType(PtrTo(iter.t.Key())));
	};
	mapiternext = function(it) {
		var it, iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _ref, k, slice, srcVal, typ, v, val;
		v = v;
		srcVal = v.object();
		if (srcVal === jsType(v.typ).nil) {
			return makeValue(typ, jsType(typ).nil, v.flag);
		}
		val = null;
		k = typ.Kind();
		_ref = k;
		switch (0) { default: if (_ref === 18) {
			val = new (jsType(typ))();
		} else if (_ref === 23) {
			slice = new (jsType(typ))(srcVal.$array);
			slice.$offset = srcVal.$offset;
			slice.$length = srcVal.$length;
			slice.$capacity = srcVal.$capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
		} else if (_ref === 22) {
			if (typ.Elem().Kind() === 25) {
				if ($interfaceIsEqual(typ.Elem(), v.typ.Elem())) {
					val = srcVal;
					break;
				}
				val = new (jsType(typ))();
				copyStruct(val, srcVal, typ.Elem());
				break;
			}
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
		} else if (_ref === 25) {
			val = new (jsType(typ).ptr)();
			copyStruct(val, srcVal, typ);
		} else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) {
			val = v.ptr;
		} else {
			$panic(new ValueError.ptr("reflect.Convert", k));
		} }
		return new Value.ptr(typ.common(), val, (((v.flag & 96) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	Copy = $pkg.Copy = function(dst, src) {
		var dk, dst, dstVal, sk, src, srcVal;
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem());
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
	};
	methodReceiver = function(op, v, i) {
		var fn = 0, i, iface, m, m$1, op, prop, rcvr, rcvrtype = ptrType$41.nil, t = ptrType$41.nil, tt, ut, v, x, x$1;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!($pointerIsEqual(m.pkgPath, ptrType$28.nil))) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$42);
			if (iface.itab === ptrType$45.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$46.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!($pointerIsEqual(m$1.pkgPath, ptrType$13.nil))) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		var safe, v;
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 32) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			v = makeMethodValue("Interface", v);
		}
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.object());
		}
		return v.object();
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _tuple, fn, fv, op, rcvr, v;
		v = v;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); fn = _tuple[2];
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fv = (function() {
			return fn.apply(rcvr, $externalize(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments, [])), sliceType$14));
		});
		return new Value.ptr(v.Type().common(), fv, (((v.flag & 32) >>> 0) | 19) >>> 0);
	};
	rtype.ptr.prototype.pointers = function() {
		var _ref, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _ref, i, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 19 || _ref === 23 || _ref === 21) {
			return false;
		} else if (_ref === 17) {
			return t.Elem().Comparable();
		} else if (_ref === 25) {
			i = 0;
			while (true) {
				if (!(i < t.NumField())) { break; }
				if (!t.Field(i).Type.Comparable()) {
					return false;
				}
				i = i + (1) >> 0;
			}
		}
		return true;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var fl, fn, i, m = new Method.ptr(), mt, p, prop, t, x;
		t = this;
		if (t === ptrType$48.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!($pointerIsEqual(p.name, ptrType$12.nil))) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!($pointerIsEqual(p.pkgPath, ptrType$13.nil))) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = (function(rcvr) {
			var rcvr;
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments, [])), 1), sliceType$14));
		});
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _ref, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.$high, val.$low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.$real, val.$imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.$array);
					newVal.$offset = val.$offset;
					newVal.$length = val.$length;
					newVal.$capacity = val.$capacity;
					val = newVal;
				} }
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1;
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); t = _tuple[1]; fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.object();
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;
			if (!xt.AssignableTo(targ)) {
				$panic(new $String("reflect: " + op + " using " + xt.String() + " as type " + targ.String()));
			}
			i = i + (1) >> 0;
		}
		if (!isSlice && t.IsVariadic()) {
			m = in$1.$length - n >> 0;
			slice = MakeSlice(t.In(n), m, m);
			elem = t.In(n).Elem();
			i$1 = 0;
			while (true) {
				if (!(i$1 < m)) { break; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				if (!xt$1.AssignableTo(elem)) {
					$panic(new $String("reflect: cannot use " + xt$1.String() + " as type " + elem.String() + " in " + op));
				}
				slice.Index(i$1).Set(x$2);
				i$1 = i$1 + (1) >> 0;
			}
			origIn = in$1;
			in$1 = $makeSlice(sliceType$15, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice);
		}
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn() + 1 >> 0);
		_ref$1 = in$1;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			argsArray[i$2] = unwrapJsObject(t.In(i$2), arg.assignTo("reflect.Value.Call", t.In(i$2).common(), 0).object());
			_i$1++;
		}
		argsArray[t.NumIn()] = $BLOCKING;
		results = callHelper(new sliceType$1([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)]));
		_ref$2 = nout;
		if (_ref$2 === 0) {
			return sliceType$16.nil;
		} else if (_ref$2 === 1) {
			return new sliceType$17([$clone(makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0), Value)]);
		} else {
			ret = $makeSlice(sliceType$18, nout);
			_ref$3 = ret;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				i$3 = _i$2;
				((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0));
				_i$2++;
			}
			return ret;
		}
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 18 || _ref === 23) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, reflectType(jsObjectPtr))) {
			return new (jsObjectPtr)(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, reflectType(jsObjectPtr))) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var _ref, fl, k, tt, typ, v, val, val$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 20) {
			val = v.object();
			if (val === $ifaceNil) {
				return new Value.ptr(ptrType$40.nil, 0, 0);
			}
			typ = reflectType(val.constructor);
			return makeValue(typ, val.$val, (v.flag & 32) >>> 0);
		} else if (_ref === 22) {
			if (v.IsNil()) {
				return new Value.ptr(ptrType$40.nil, 0, 0);
			}
			val$1 = v.object();
			tt = v.typ.kindType;
			fl = (((((v.flag & 32) >>> 0) | 64) >>> 0) | 128) >>> 0;
			fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
			return new Value.ptr(tt.elem, wrapJsObject(tt.elem, val$1), fl);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Elem", k));
		}
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var field, fl, i, prop, s, tt, typ, v, x;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		prop = $internalize(jsType(v.typ).fields[i].prop, $String);
		typ = field.typ;
		fl = (v.flag & 224) >>> 0;
		if (!($pointerIsEqual(field.pkgPath, ptrType$31.nil))) {
			fl = (fl | (32)) >>> 0;
		}
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		s = v.ptr;
		if (!((((fl & 64) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
			return new Value.ptr(typ, new (jsType(PtrTo(typ)))((function() {
				return wrapJsObject(typ, s[$externalize(prop, $String)]);
			}), (function(v$1) {
				var v$1;
				s[$externalize(prop, $String)] = unwrapJsObject(typ, v$1);
			})), fl);
		}
		return makeValue(typ, wrapJsObject(typ, s[$externalize(prop, $String)]), fl);
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	Value.ptr.prototype.Index = function(i) {
		var _ref, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			tt = v.typ.kindType;
			if (i < 0 || i > (tt.len >> 0)) {
				$panic(new $String("reflect: array index out of range"));
			}
			typ = tt.elem;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
			a = v.ptr;
			if (!((((fl & 64) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
				return new Value.ptr(typ, new (jsType(PtrTo(typ)))((function() {
					return wrapJsObject(typ, a[i]);
				}), (function(v$1) {
					var v$1;
					a[i] = unwrapJsObject(typ, v$1);
				})), fl);
			}
			return makeValue(typ, wrapJsObject(typ, a[i]), fl);
		} else if (_ref === 23) {
			s = v.object();
			if (i < 0 || i >= ($parseInt(s.$length) >> 0)) {
				$panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.kindType;
			typ$1 = tt$1.elem;
			fl$1 = (192 | ((v.flag & 32) >>> 0)) >>> 0;
			fl$1 = (fl$1 | ((typ$1.Kind() >>> 0))) >>> 0;
			i = i + (($parseInt(s.$offset) >> 0)) >> 0;
			a$1 = s.$array;
			if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ$1.Kind() === 17)) && !((typ$1.Kind() === 25))) {
				return new Value.ptr(typ$1, new (jsType(PtrTo(typ$1)))((function() {
					return wrapJsObject(typ$1, a$1[i]);
				}), (function(v$1) {
					var v$1;
					a$1[i] = unwrapJsObject(typ$1, v$1);
				})), fl$1);
			}
			return makeValue(typ$1, wrapJsObject(typ$1, a$1[i]), fl$1);
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || i >= str.length) {
				$panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 32) >>> 0) | 8) >>> 0;
			c = str.charCodeAt(i);
			return new Value.ptr(uint8Type, new ptrType$49(function() { return c; }, function($v) { c = $v; }), (fl$2 | 64) >>> 0);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Index", k));
		}
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.IsNil = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 22 || _ref === 23) {
			return v.object() === jsType(v.typ).nil;
		} else if (_ref === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.object() === false;
		} else if (_ref === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17 || _ref === 24) {
			return $parseInt(v.object().length);
		} else if (_ref === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_ref === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_ref === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_ref === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _ref, v, x;
		v = this;
		x = x;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		x = x.assignTo("reflect.Set", v.typ, 0);
		if (!((((v.flag & 64) >>> 0) === 0))) {
			_ref = v.typ.Kind();
			if (_ref === 17) {
				$copy(v.ptr, x.ptr, jsType(v.typ));
			} else if (_ref === 20) {
				v.ptr.$set(valueInterface(x, false));
			} else if (_ref === 25) {
				copyStruct(v.ptr, x.ptr, v.typ);
			} else {
				v.ptr.$set(x.object());
			}
			return;
		}
		v.ptr = x.ptr;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _ref, cap, i, j, kind, s, str, tt, typ, v;
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			return ValueOf(new $String(str.substring(i, j)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice", kind));
		}
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j), (v.flag & 32) >>> 0);
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _ref, cap, i, j, k, kind, s, tt, typ, v;
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.kindType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j, k), (v.flag & 32) >>> 0);
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.ptr.prototype.TrySend = function(x) {
		var c, tt, v, x;
		v = this;
		x = x;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		c = v.object();
		if (!!!(c.$closed) && ($parseInt(c.$recvQueue.length) === 0) && ($parseInt(c.$buffer.length) === ($parseInt(c.$capacity) >> 0))) {
			return false;
		}
		x = x.assignTo("reflect.Value.Send", tt.elem, 0);
		$send(c, x.object());
		return true;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Send = function(x) {
		var v, x;
		v = this;
		x = x;
		$panic(new runtime.NotSupportedError.ptr("reflect.Value.Send, use reflect.Value.TrySend if possible"));
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.TryRecv = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok = false, res, tt, v, x = new Value.ptr();
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		tt = v.typ.kindType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		res = $recv(v.object());
		if (res.constructor === $global.Function) {
			_tmp = new Value.ptr(ptrType$40.nil, 0, 0); _tmp$1 = false; x = _tmp; ok = _tmp$1;
			return [x, ok];
		}
		_tmp$2 = makeValue(tt.elem, res[0], 0); _tmp$3 = !!(res[1]); x = _tmp$2; ok = _tmp$3;
		return [x, ok];
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.Recv = function() {
		var ok = false, v, x = new Value.ptr();
		v = this;
		$panic(new runtime.NotSupportedError.ptr("reflect.Value.Recv, use reflect.Value.TryRecv if possible"));
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		if (t === ptrType$50.nil || $pointerIsEqual(t.pkgPath, ptrType$11.nil)) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var t;
		t = this;
		if (t === ptrType$51.nil || $pointerIsEqual(t.name, ptrType$10.nil)) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$52.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (t.size >> 0) * 8 >> 0;
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		if (t === ptrType$53.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var _i, _ref, _tmp, _tmp$1, i, m = new Method.ptr(), name, ok = false, p, t, x;
		t = this;
		if (t === ptrType$54.nil) {
			return [m, ok];
		}
		p = ptrType$55.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!($pointerIsEqual(p.name, ptrType$12.nil)) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var i, m = new Method.ptr(), t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			$copy(m, tt.Method(i), Method);
			return m;
		}
		$copy(m, t.uncommonType.Method(i), Method);
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var _tuple, _tuple$1, m = new Method.ptr(), name, ok = false, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.kindType;
			_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.kindType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.kindType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _ref, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.kindType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.kindType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.kindType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.kindType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.kindType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.kindType;
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var index, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.kindType;
		return tt.FieldByIndex(index);
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var name, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.kindType;
		return tt.FieldByName(name);
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var match, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.kindType;
		return tt.FieldByNameFunc(match);
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.kindType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.kindType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.kindType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.kindType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.kindType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.kindType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _ref, d;
		d = this.$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m = new Method.ptr(), p, t, x;
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!($pointerIsEqual(p.pkgPath, ptrType$28.nil))) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var _i, _ref, _tmp, _tmp$1, i, m = new Method.ptr(), name, ok = false, p, t, x;
		t = this;
		if (t === ptrType$56.nil) {
			return [m, ok];
		}
		p = ptrType$57.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var _tuple, i, key, name, qvalue, tag, value;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var f = new StructField.ptr(), i, p, t, t$1, x;
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		if (!($pointerIsEqual(p.name, ptrType$30.nil))) {
			f.Name = p.name.$get();
		} else {
			t$1 = f.Type;
			if (t$1.Kind() === 22) {
				t$1 = t$1.Elem();
			}
			f.Name = t$1.Name();
			f.Anonymous = true;
		}
		if (!($pointerIsEqual(p.pkgPath, ptrType$31.nil))) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!($pointerIsEqual(p.tag, ptrType$33.nil))) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$20([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _ref, f = new StructField.ptr(), ft, i, index, t, x;
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				ft = f.Type;
				if ((ft.Kind() === 22) && (ft.Elem().Kind() === 25)) {
					ft = ft.Elem();
				}
				f.Type = ft;
			}
			$copy(f, f.Type.Field(x), StructField);
			_i++;
		}
		return f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _map, _map$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok = false, result = new StructField.ptr(), scan, styp, t, t$1, visited, x;
		t = this;
		current = new sliceType$21([]);
		next = new sliceType$22([new fieldScan.ptr(t, sliceType$23.nil)]);
		nextCount = false;
		visited = (_map = new $Map(), _map);
		while (true) {
			if (!(next.$length > 0)) { break; }
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$1 = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$59.nil;
					if (!($pointerIsEqual(f.name, ptrType$30.nil))) {
						fname = f.name.$get();
					} else {
						ntyp = f.typ;
						if (ntyp.Kind() === 22) {
							ntyp = ntyp.Elem().common();
						}
						fname = ntyp.Name();
					}
					if (match(fname)) {
						if ((_entry$1 = count[t$1.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$24.nil, false); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;
							return [result, ok];
						}
						$copy(result, t$1.Field(i), StructField);
						result.Index = sliceType$24.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						continue;
					}
					if (ok || ntyp === ptrType$59.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						continue;
					}
					styp = ntyp.kindType;
					if ((_entry$2 = nextCount[styp.$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: 2 };
						_i$1++;
						continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new $Map(), _map$1);
					}
					_key$4 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: 2 };
					}
					index = sliceType$25.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				}
				_i++;
			}
			if (ok) {
				break;
			}
		}
		return [result, ok];
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var _i, _ref, _tmp, _tmp$1, _tuple, f = new StructField.ptr(), hasAnon, i, name, present = false, t, tf, x;
		t = this;
		hasAnon = false;
		if (!(name === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				if ($pointerIsEqual(tf.name, ptrType$30.nil)) {
					hasAnon = true;
					_i++;
					continue;
				}
				if (tf.name.$get() === name) {
					_tmp = $clone(t.Field(i), StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;
					return [f, present];
				}
				_i++;
			}
		}
		if (!hasAnon) {
			return [f, present];
		}
		_tuple = t.FieldByNameFunc((function(s) {
			var s;
			return s === name;
		})); $copy(f, _tuple[0], StructField); present = _tuple[1];
		return [f, present];
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = $pkg.PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$60).ptrTo();
	};
	rtype.ptr.prototype.Implements = function(u) {
		var t, u;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		if (!((u.Kind() === 20))) {
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		}
		return implements$1($assertType(u, ptrType$61), t);
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$62);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var t, u, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$63);
		return !(convertOp(uu, t) === $throwNilPointerError);
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.kindType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.kindType;
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if ($pointerIsEqual(vm.name, tm.name) && $pointerIsEqual(vm.pkgPath, tm.pkgPath) && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$46.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (true) {
			if (!(j$1 < v$1.methods.$length)) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if ($pointerIsEqual(vm$1.name, tm$1.name) && $pointerIsEqual(vm$1.pkgPath, tm$1.pkgPath) && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var T, V;
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var T, V, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.kindType;
			v = V.kindType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.kindType;
			v$1 = V.kindType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.kindType;
			v$2 = V.kindType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$3.$length)) { break; }
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!($pointerIsEqual(tf.name, vf.name)) && ($pointerIsEqual(tf.name, ptrType$30.nil) || $pointerIsEqual(vf.name, ptrType$30.nil) || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!($pointerIsEqual(tf.pkgPath, vf.pkgPath)) && ($pointerIsEqual(tf.pkgPath, ptrType$31.nil) || $pointerIsEqual(vf.pkgPath, ptrType$31.nil) || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!($pointerIsEqual(tf.tag, vf.tag)) && ($pointerIsEqual(tf.tag, ptrType$33.nil) || $pointerIsEqual(vf.tag, ptrType$33.nil) || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$67.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 128) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 32) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 128) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 160) >>> 0) === 128;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var in$1, v;
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		return v.call("Call", in$1);
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var in$1, v;
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		return v.call("CallSlice", in$1);
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _ref, i, index, v, x;
		v = this;
		if (index.$length === 1) {
			return v.Field((0 >= index.$length ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0]));
		}
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				if ((v.Kind() === 22) && (v.typ.Elem().Kind() === 25)) {
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					v = v.Elem();
				}
			}
			v = v.Field(x);
			_i++;
		}
		return v;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var _tuple, f, name, ok, v;
		v = this;
		new flag(v.flag).mustBe(25);
		_tuple = v.typ.FieldByName(name); f = $clone(_tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.ptr(ptrType$40.nil, 0, 0);
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _tuple, f, match, ok, v;
		v = this;
		_tuple = v.typ.FieldByNameFunc(match); f = $clone(_tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.ptr(ptrType$40.nil, 0, 0);
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return v.ptr.$get();
		} else if (_ref === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _ref, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 32) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var i = $ifaceNil, v;
		v = this;
		i = valueInterface(v, true);
		return i;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(20);
		return v.ptr;
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var c, e, fl, k, key, tt, typ, v;
		v = this;
		key = key;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		key = key.assignTo("reflect.Value.MapIndex", tt.key, 0);
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = new ptrType$81(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$40.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 32) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			memmove(c, e, typ.size);
			return new Value.ptr(typ, c, (fl | 64) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var a, c, fl, i, it, key, keyType, m, mlen, tt, v;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.kindType;
		keyType = tt.key;
		fl = (((v.flag & 32) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$27, mlen);
		i = 0;
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			key = mapiterkey(it);
			if (key === 0) {
				break;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				memmove(c, key, keyType.size);
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 64) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, i);
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var fl, i, v;
		v = this;
		if (v.typ === ptrType$40.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 96) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 256) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var v;
		v = this;
		if (v.typ === ptrType$40.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var _tuple, m, name, ok, v;
		v = this;
		if (v.typ === ptrType$40.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return new Value.ptr(ptrType$40.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = $clone(_tuple[0], Method); ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$40.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.kindType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_ref === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _ref, bitSize, k, trunc, v, x, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _ref, bitSize, k, trunc, v, x, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		}
		v.ptr.$set(x);
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		}
		v.ptr.$set(x);
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_ref === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set($fround(x));
		} else if (_ref === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var e, k, key, tt, v, val;
		v = this;
		val = val;
		key = key;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.kindType;
		key = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0);
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = new ptrType$84(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		}
		if (val.typ === ptrType$40.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		val = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0);
		e = 0;
		if (!((((val.flag & 64) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = new ptrType$85(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val);
		}
		mapassign(v.typ, v.pointer(), k, e);
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _ref, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x);
		} else if (_ref === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		return "<" + v.Type().String() + " Value>";
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.Type = function() {
		var f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 256) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.kindType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$46.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _ref, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$40.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var t1, t2, what;
		if (!($interfaceIsEqual(t1, t2))) {
			$panic(new $String(what + ": " + t1.String() + " != " + t2.String()));
		}
	};
	New = $pkg.New = function(typ) {
		var fl, ptr, typ;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$89));
		fl = 22;
		return new Value.ptr(typ.common().ptrTo(), ptr, fl);
	};
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var context, dst, fl, target, v, x;
		v = this;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			v = makeMethodValue(context, v);
		}
		if (directlyAssignable(dst, v.typ)) {
			v.typ = dst;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
			return new Value.ptr(dst, v.ptr, fl);
		} else if (implements$1(dst, v.typ)) {
			if (target === 0) {
				target = unsafe_New(dst);
			}
			x = valueInterface(v, false);
			if (dst.NumMethod() === 0) {
				target.$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.ptr(dst, target, 84);
		}
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var op, t, v;
		v = this;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			v = makeMethodValue("Convert", v);
		}
		op = convertOp(t.common(), v.typ);
		if (op === $throwNilPointerError) {
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + t.String()));
		}
		return op(v, t);
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, dst, src;
		_ref = src.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
		} else if (_ref === 13 || _ref === 14) {
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
		} else if (_ref === 15 || _ref === 16) {
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
		} else if (_ref === 24) {
			if ((dst.Kind() === 23) && dst.Elem().PkgPath() === "") {
				_ref$5 = dst.Elem().Kind();
				if (_ref$5 === 8) {
					return cvtStringBytes;
				} else if (_ref$5 === 5) {
					return cvtStringRunes;
				}
			}
		} else if (_ref === 23) {
			if ((dst.Kind() === 24) && src.Elem().PkgPath() === "") {
				_ref$6 = src.Elem().Kind();
				if (_ref$6 === 8) {
					return cvtBytesString;
				} else if (_ref$6 === 5) {
					return cvtRunesString;
				}
			}
		}
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if ((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "" && haveIdenticalUnderlyingType(dst.Elem().common(), src.Elem().common())) {
			return cvtDirect;
		}
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
	};
	makeFloat = function(f, v, t) {
		var _ref, f, ptr, t, typ, v;
		typ = t.common();
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 4) {
			ptr.$set($fround(v));
		} else if (_ref === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	makeComplex = function(f, v, t) {
		var _ref, f, ptr, t, typ, v;
		typ = t.common();
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_ref === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	makeString = function(f, v, t) {
		var f, ret, t, v;
		ret = New(t).Elem();
		ret.SetString(v);
		ret.flag = ((ret.flag & ~128) | f) >>> 0;
		return ret;
	};
	makeBytes = function(f, v, t) {
		var f, ret, t, v;
		ret = New(t).Elem();
		ret.SetBytes(v);
		ret.flag = ((ret.flag & ~128) | f) >>> 0;
		return ret;
	};
	makeRunes = function(f, v, t) {
		var f, ret, t, v;
		ret = New(t).Elem();
		ret.setRunes(v);
		ret.flag = ((ret.flag & ~128) | f) >>> 0;
		return ret;
	};
	cvtInt = function(v, t) {
		var t, v, x;
		v = v;
		return makeInt((v.flag & 32) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t);
	};
	cvtUint = function(v, t) {
		var t, v;
		v = v;
		return makeInt((v.flag & 32) >>> 0, v.Uint(), t);
	};
	cvtFloatInt = function(v, t) {
		var t, v, x;
		v = v;
		return makeInt((v.flag & 32) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t);
	};
	cvtFloatUint = function(v, t) {
		var t, v;
		v = v;
		return makeInt((v.flag & 32) >>> 0, new $Uint64(0, v.Float()), t);
	};
	cvtIntFloat = function(v, t) {
		var t, v;
		v = v;
		return makeFloat((v.flag & 32) >>> 0, $flatten64(v.Int()), t);
	};
	cvtUintFloat = function(v, t) {
		var t, v;
		v = v;
		return makeFloat((v.flag & 32) >>> 0, $flatten64(v.Uint()), t);
	};
	cvtFloat = function(v, t) {
		var t, v;
		v = v;
		return makeFloat((v.flag & 32) >>> 0, v.Float(), t);
	};
	cvtComplex = function(v, t) {
		var t, v;
		v = v;
		return makeComplex((v.flag & 32) >>> 0, v.Complex(), t);
	};
	cvtIntString = function(v, t) {
		var t, v;
		v = v;
		return makeString((v.flag & 32) >>> 0, $encodeRune(v.Int().$low), t);
	};
	cvtUintString = function(v, t) {
		var t, v;
		v = v;
		return makeString((v.flag & 32) >>> 0, $encodeRune(v.Uint().$low), t);
	};
	cvtBytesString = function(v, t) {
		var t, v;
		v = v;
		return makeString((v.flag & 32) >>> 0, $bytesToString(v.Bytes()), t);
	};
	cvtStringBytes = function(v, t) {
		var t, v;
		v = v;
		return makeBytes((v.flag & 32) >>> 0, new sliceType$29($stringToBytes(v.String())), t);
	};
	cvtRunesString = function(v, t) {
		var t, v;
		v = v;
		return makeString((v.flag & 32) >>> 0, $runesToString(v.runes()), t);
	};
	cvtStringRunes = function(v, t) {
		var t, v;
		v = v;
		return makeRunes((v.flag & 32) >>> 0, new sliceType$30($stringToRunes(v.String())), t);
	};
	cvtT2I = function(v, typ) {
		var target, typ, v, x;
		v = v;
		target = unsafe_New(typ.common());
		x = valueInterface(v, false);
		if (typ.NumMethod() === 0) {
			target.$set(x);
		} else {
			ifaceE2I($assertType(typ, ptrType$90), x, target);
		}
		return new Value.ptr(typ.common(), target, (((((v.flag & 32) >>> 0) | 64) >>> 0) | 20) >>> 0);
	};
	cvtI2I = function(v, typ) {
		var ret, typ, v;
		v = v;
		if (v.IsNil()) {
			ret = Zero(typ);
			ret.flag = (ret.flag | (((v.flag & 32) >>> 0))) >>> 0;
			return ret;
		}
		return cvtT2I(v.Elem(), typ);
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$100.methods = [{prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$98], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$99], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$34], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$4], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ptrType$101.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$46], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$102.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$103.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$35], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$7], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$111], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$38], [sliceType$16], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$39], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$40], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$41], [sliceType$42], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$43], [sliceType$44], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$45], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$8], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$4], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$46], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$47], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$48], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$112, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$113.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", typ: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", typ: ptrType$91, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", typ: ptrType$92, tag: ""}, {prop: "i", name: "i", pkg: "reflect", typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$33], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$96], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$97], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", typ: $Uint32, tag: ""}, {prop: "_$2", name: "_", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", typ: ptrType$6, tag: ""}, {prop: "gc", name: "gc", pkg: "reflect", typ: arrayType$1, tag: ""}, {prop: "string", name: "string", pkg: "reflect", typ: ptrType$7, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", typ: ptrType$8, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", typ: ptrType$9, tag: ""}, {prop: "zero", name: "zero", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", typ: funcType$5, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", typ: funcType$6, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$12, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$13, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", typ: ptrType$14, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$15, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$10, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$11, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$3, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$16, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", typ: ptrType$17, tag: ""}, {prop: "len", name: "len", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$18, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", typ: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", typ: sliceType$4, tag: ""}, {prop: "out", name: "out", pkg: "reflect", typ: sliceType$5, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$27, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$28, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$29, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", typ: sliceType$6, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", typ: ptrType$21, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$22, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", typ: ptrType$23, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", typ: ptrType$24, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", typ: $Uint16, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$25, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", typ: ptrType$26, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", typ: ptrType$30, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: ptrType$31, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$32, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", typ: ptrType$33, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", typ: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", typ: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", typ: sliceType$7, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", typ: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", typ: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", typ: sliceType$24, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", typ: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$58, tag: ""}, {prop: "index", name: "index", pkg: "reflect", typ: sliceType$23, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", typ: ptrType$40, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", typ: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", typ: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", typ: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", typ: ptrType$45, tag: ""}, {prop: "word", name: "word", pkg: "reflect", typ: $UnsafePointer, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_reflect = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		initialized = false;
		stringPtrMap = new $Map();
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		jsObjectPtr = $jsObjectPtr;
		kindNames = new sliceType$2(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$5);
		init();
		/* */ } return; } }; $init_reflect.$blocking = true; return $init_reflect;
	};
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, scanError, ss, ssave, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, sliceType$15, sliceType$16, sliceType$17, sliceType$18, sliceType$19, arrayType, sliceType$20, sliceType$21, sliceType$22, sliceType$23, sliceType$24, sliceType$25, sliceType$26, sliceType$27, sliceType$28, sliceType$29, sliceType$30, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, sliceType$32, sliceType$33, sliceType$34, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, sliceType$35, ptrType$30, ptrType$31, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, ptrType$46, ptrType$47, ptrType$48, sliceType$36, sliceType$37, ptrType$49, ptrType$50, ptrType$51, ptrType$52, ptrType$53, ptrType$54, ptrType$55, ptrType$56, ptrType$57, ptrType$58, ptrType$59, ptrType$60, ptrType$61, ptrType$62, ptrType$63, ptrType$64, ptrType$65, ptrType$66, ptrType$67, ptrType$68, ptrType$69, ptrType$70, ptrType$71, ptrType$72, ptrType$73, sliceType$38, ptrType$85, sliceType$46, arrayType$3, ptrType$114, ptrType$115, sliceType$49, sliceType$50, sliceType$51, ptrType$116, sliceType$52, sliceType$53, ptrType$117, arrayType$4, sliceType$54, sliceType$55, sliceType$56, ptrType$118, sliceType$60, funcType$1, funcType$2, sliceType$61, sliceType$62, ptrType$120, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, init, doPrec, newPrinter, Sprintf, Errorf, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		this.widPresent = widPresent_ !== undefined ? widPresent_ : false;
		this.precPresent = precPresent_ !== undefined ? precPresent_ : false;
		this.minus = minus_ !== undefined ? minus_ : false;
		this.plus = plus_ !== undefined ? plus_ : false;
		this.sharp = sharp_ !== undefined ? sharp_ : false;
		this.space = space_ !== undefined ? space_ : false;
		this.unicode = unicode_ !== undefined ? unicode_ : false;
		this.uniQuote = uniQuote_ !== undefined ? uniQuote_ : false;
		this.zero = zero_ !== undefined ? zero_ : false;
		this.plusV = plusV_ !== undefined ? plusV_ : false;
		this.sharpV = sharpV_ !== undefined ? sharpV_ : false;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		this.intbuf = intbuf_ !== undefined ? intbuf_ : arrayType$3.zero();
		this.buf = buf_ !== undefined ? buf_ : ptrType$114.nil;
		this.wid = wid_ !== undefined ? wid_ : 0;
		this.prec = prec_ !== undefined ? prec_ : 0;
		this.fmtFlags = fmtFlags_ !== undefined ? fmtFlags_ : new fmtFlags.ptr();
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		this.n = n_ !== undefined ? n_ : 0;
		this.panicking = panicking_ !== undefined ? panicking_ : false;
		this.erroring = erroring_ !== undefined ? erroring_ : false;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.arg = arg_ !== undefined ? arg_ : $ifaceNil;
		this.value = value_ !== undefined ? value_ : new reflect.Value.ptr();
		this.reordered = reordered_ !== undefined ? reordered_ : false;
		this.goodArgNum = goodArgNum_ !== undefined ? goodArgNum_ : false;
		this.runeBuf = runeBuf_ !== undefined ? runeBuf_ : arrayType$4.zero();
		this.fmt = fmt_ !== undefined ? fmt_ : new fmt.ptr();
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		this.rr = rr_ !== undefined ? rr_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.peekRune = peekRune_ !== undefined ? peekRune_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
		this.count = count_ !== undefined ? count_ : 0;
		this.atEOF = atEOF_ !== undefined ? atEOF_ : false;
		this.ssave = ssave_ !== undefined ? ssave_ : new ssave.ptr();
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		this.validSave = validSave_ !== undefined ? validSave_ : false;
		this.nlIsEnd = nlIsEnd_ !== undefined ? nlIsEnd_ : false;
		this.nlIsSpace = nlIsSpace_ !== undefined ? nlIsSpace_ : false;
		this.argLimit = argLimit_ !== undefined ? argLimit_ : 0;
		this.limit = limit_ !== undefined ? limit_ : 0;
		this.maxWid = maxWid_ !== undefined ? maxWid_ : 0;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType($Uint8);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType($Uint8);
	sliceType$6 = $sliceType($Uint8);
	sliceType$7 = $sliceType($Uint8);
	sliceType$8 = $sliceType($Uint8);
	sliceType$9 = $sliceType($Uint8);
	sliceType$10 = $sliceType($Uint8);
	sliceType$11 = $sliceType($Uint8);
	sliceType$12 = $sliceType($Uint8);
	sliceType$13 = $sliceType($Uint8);
	sliceType$14 = $sliceType($Uint8);
	sliceType$15 = $sliceType($Uint8);
	sliceType$16 = $sliceType($Uint8);
	sliceType$17 = $sliceType($Uint8);
	sliceType$18 = $sliceType($Uint8);
	sliceType$19 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint16, 2);
	sliceType$20 = $sliceType(arrayType);
	sliceType$21 = $sliceType($Uint8);
	sliceType$22 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType($Uint8);
	sliceType$25 = $sliceType($Uint8);
	sliceType$26 = $sliceType($Uint8);
	sliceType$27 = $sliceType($Uint8);
	sliceType$28 = $sliceType($Uint8);
	sliceType$29 = $sliceType($Uint8);
	sliceType$30 = $sliceType($Uint8);
	ptrType = $ptrType(pp);
	ptrType$1 = $ptrType(buffer);
	ptrType$2 = $ptrType(reflect.rtype);
	ptrType$3 = $ptrType(buffer);
	ptrType$4 = $ptrType(buffer);
	ptrType$5 = $ptrType(buffer);
	ptrType$6 = $ptrType(buffer);
	ptrType$7 = $ptrType(buffer);
	ptrType$8 = $ptrType(buffer);
	ptrType$9 = $ptrType(buffer);
	ptrType$10 = $ptrType(buffer);
	ptrType$11 = $ptrType(buffer);
	sliceType$32 = $sliceType($Uint8);
	sliceType$33 = $sliceType($Uint8);
	sliceType$34 = $sliceType($Uint8);
	ptrType$12 = $ptrType(buffer);
	ptrType$13 = $ptrType(buffer);
	ptrType$14 = $ptrType(buffer);
	ptrType$15 = $ptrType(buffer);
	ptrType$16 = $ptrType(buffer);
	ptrType$17 = $ptrType(buffer);
	ptrType$18 = $ptrType(buffer);
	ptrType$19 = $ptrType(buffer);
	ptrType$20 = $ptrType(buffer);
	ptrType$21 = $ptrType(buffer);
	ptrType$22 = $ptrType(buffer);
	ptrType$23 = $ptrType(buffer);
	ptrType$24 = $ptrType(buffer);
	ptrType$25 = $ptrType(buffer);
	ptrType$26 = $ptrType(buffer);
	ptrType$27 = $ptrType(buffer);
	ptrType$28 = $ptrType(buffer);
	ptrType$29 = $ptrType(buffer);
	sliceType$35 = $sliceType($Uint8);
	ptrType$30 = $ptrType(buffer);
	ptrType$31 = $ptrType(buffer);
	ptrType$32 = $ptrType(buffer);
	ptrType$33 = $ptrType(buffer);
	ptrType$34 = $ptrType(buffer);
	ptrType$35 = $ptrType(buffer);
	ptrType$36 = $ptrType(buffer);
	ptrType$37 = $ptrType(buffer);
	ptrType$38 = $ptrType(buffer);
	ptrType$39 = $ptrType(buffer);
	ptrType$40 = $ptrType(buffer);
	ptrType$41 = $ptrType(buffer);
	ptrType$42 = $ptrType(buffer);
	ptrType$43 = $ptrType(buffer);
	ptrType$44 = $ptrType(buffer);
	ptrType$45 = $ptrType(buffer);
	ptrType$46 = $ptrType(buffer);
	ptrType$47 = $ptrType(buffer);
	ptrType$48 = $ptrType(buffer);
	sliceType$36 = $sliceType($Uint8);
	sliceType$37 = $sliceType($Uint8);
	ptrType$49 = $ptrType(buffer);
	ptrType$50 = $ptrType(buffer);
	ptrType$51 = $ptrType(buffer);
	ptrType$52 = $ptrType(buffer);
	ptrType$53 = $ptrType(buffer);
	ptrType$54 = $ptrType(buffer);
	ptrType$55 = $ptrType(buffer);
	ptrType$56 = $ptrType(buffer);
	ptrType$57 = $ptrType(buffer);
	ptrType$58 = $ptrType(buffer);
	ptrType$59 = $ptrType(buffer);
	ptrType$60 = $ptrType(buffer);
	ptrType$61 = $ptrType(buffer);
	ptrType$62 = $ptrType(buffer);
	ptrType$63 = $ptrType(buffer);
	ptrType$64 = $ptrType(buffer);
	ptrType$65 = $ptrType(buffer);
	ptrType$66 = $ptrType(buffer);
	ptrType$67 = $ptrType(buffer);
	ptrType$68 = $ptrType(buffer);
	ptrType$69 = $ptrType(buffer);
	ptrType$70 = $ptrType(buffer);
	ptrType$71 = $ptrType(buffer);
	ptrType$72 = $ptrType(buffer);
	ptrType$73 = $ptrType(buffer);
	sliceType$38 = $sliceType($Uint8);
	ptrType$85 = $ptrType(buffer);
	sliceType$46 = $sliceType($Uint8);
	arrayType$3 = $arrayType($Uint8, 65);
	ptrType$114 = $ptrType(buffer);
	ptrType$115 = $ptrType(buffer);
	sliceType$49 = $sliceType($Uint8);
	sliceType$50 = $sliceType($Uint8);
	sliceType$51 = $sliceType($Uint8);
	ptrType$116 = $ptrType(fmt);
	sliceType$52 = $sliceType($Uint8);
	sliceType$53 = $sliceType($Uint8);
	ptrType$117 = $ptrType(buffer);
	arrayType$4 = $arrayType($Uint8, 4);
	sliceType$54 = $sliceType($Uint8);
	sliceType$55 = $sliceType($emptyInterface);
	sliceType$56 = $sliceType($emptyInterface);
	ptrType$118 = $ptrType(pp);
	sliceType$60 = $sliceType($Uint8);
	funcType$1 = $funcType([$Int32], [$Bool], false);
	funcType$2 = $funcType([$Int32], [$Bool], false);
	sliceType$61 = $sliceType($emptyInterface);
	sliceType$62 = $sliceType($emptyInterface);
	ptrType$120 = $ptrType(ss);
	init = function() {
		var i;
		i = 0;
		while (true) {
			if (!(i < 65)) { break; }
			((i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48);
			((i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32);
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		$copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false), fmtFlags);
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth = 0, padding = sliceType$21.nil, rightWidth = 0, w, width;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var f, m, n, padding;
		f = this;
		while (true) {
			if (!(n > 0)) { break; }
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var _tuple, b, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var _tuple, f, left, padding, right, s;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var _ref, _ref$1, a, base, buf, digits, f, i, j, negative, next, prec, runeWidth, signedness, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		buf = $subslice(new sliceType$22(f.intbuf), 0);
		if (f.fmtFlags.widPresent) {
			width = f.wid;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (width > 65) {
				buf = $makeSlice(sliceType$23, width);
			}
		}
		negative = signedness === true && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_ref = base;
		if ((_ref.$high === 0 && _ref.$low === 10)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24));
				ua = next;
			}
		} else if ((_ref.$high === 0 && _ref.$low === 16)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0))));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 8)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 2)) {
			while (true) {
				if (!((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24));
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_ref$1 = base;
			if ((_ref$1.$high === 0 && _ref$1.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
				}
			} else if ((_ref$1.$high === 0 && _ref$1.$low === 16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24);
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85);
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32);
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32);
			j = j + (1) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			((j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39);
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, n, s, x;
		f = this;
		n = b.$length;
		if (b === sliceType$24.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType$25.nil;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType$24.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var digits, f, s;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType$24.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var b, digits, f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var f, quoted, s;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var c, f, quoted;
		f = this;
		quoted = sliceType$26.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType$27(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType$28(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		var def, f;
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $deferred = [], $err = null, f, n, num, prec, v, verb;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType$29(f.intbuf), 0, 1), v, verb, prec, n);
		if (((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43);
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32);
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || ((0 >= num.$length ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var f, v;
		f = this;
		f.formatFloat(v, 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var f, v, verb;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var _ref, f, i, j, oldPlus, oldSpace, oldWid, r, size, verb;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var _tmp, _tmp$1, b, err = $ifaceNil, n = 0, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var _tmp, _tmp$1, b, err = $ifaceNil, n = 0, s;
		b = this;
		b.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));
		_tmp = s.length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$30(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var p;
		p = $assertType(ppFree.Get(), ptrType);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init(new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p));
		return p;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok = false, p, wid = 0;
		p = this;
		_tmp = p.fmt.wid; _tmp$1 = p.fmt.fmtFlags.widPresent; wid = _tmp; ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok = false, p, prec = 0;
		p = this;
		_tmp = p.fmt.prec; _tmp$1 = p.fmt.fmtFlags.precPresent; prec = _tmp; ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _ref, b, p;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_ref === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_ref === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_ref === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_ref === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var c, p;
		p = this;
		new ptrType$3(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var _tuple, b, err = $ifaceNil, p, ret = 0;
		p = this;
		_tuple = new ptrType$4(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Sprintf = $pkg.Sprintf = function(format, a) {
		var a, format, p, s;
		p = newPrinter();
		p.doPrintf(format, a);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	Errorf = $pkg.Errorf = function(format, a) {
		var a, format;
		return errors.New(Sprintf(format, a));
	};
	getField = function(v, i) {
		var i, v, val;
		v = v;
		val = v.Field(i);
		if ((val.Kind() === 20) && !val.IsNil()) {
			val = val.Elem();
		}
		return val;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, end, isnum = false, newi = 0, num = 0, s, start;
		if (start >= end) {
			_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			num = (num * 10 >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var p, v;
		p = this;
		v = v;
		if (!v.IsValid()) {
			new ptrType$5(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
			return;
		}
		new ptrType$6(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(63);
		new ptrType$7(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(v.Type().String());
		new ptrType$8(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(63);
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var p, verb;
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		if (!($interfaceIsEqual(p.arg, $ifaceNil))) {
			new ptrType$9(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(p.arg).String());
			p.add(61);
			p.printArg(p.arg, 118, 0);
		} else if (p.value.IsValid()) {
			new ptrType$10(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(p.value.Type().String());
			p.add(61);
			p.printValue(p.value, 118, 0);
		} else {
			new ptrType$11(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
		}
		p.add(41);
		p.erroring = false;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 116 || _ref === 118) {
			p.fmt.fmt_boolean(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var c, p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType$32(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType$33(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(v);
		} else if (_ref === 100 || _ref === 118) {
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
		} else if (_ref === 111) {
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) {
				p.fmt.fmt_qc(v);
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
		} else if (_ref === 85) {
			p.fmtUnicode(v);
		} else if (_ref === 88) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var p, prec, precPresent, sharp, v;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(new $Int64(v.$high, v.$low));
		} else if (_ref === 100) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
		} else if (_ref === 118) {
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
		} else if (_ref === 111) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) {
				p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
		} else if (_ref === 85) {
			p.fmtUnicode(new $Int64(v.$high, v.$low));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb32(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e32(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E32(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f32(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g32(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G32(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb64(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e64(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E64(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f64(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g64(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G64(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c64(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c64(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c128(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c128(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _ref, p, v, verb;
		p = this;
		_ref = verb;
		if (_ref === 118) {
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
		} else if (_ref === 115) {
			p.fmt.fmt_s(v);
		} else if (_ref === 120) {
			p.fmt.fmt_sx(v, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
		} else if (_ref === 113) {
			p.fmt.fmt_q(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var _i, _ref, _ref$1, c, depth, i, p, typ, v, verb;
		p = this;
		if ((verb === 118) || (verb === 100)) {
			if (p.fmt.fmtFlags.sharpV) {
				if (v === sliceType$34.nil) {
					if ($interfaceIsEqual(typ, $ifaceNil)) {
						new ptrType$12(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("[]byte(nil)");
					} else {
						new ptrType$13(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(typ.String());
						new ptrType$14(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilParenBytes);
					}
					return;
				}
				if ($interfaceIsEqual(typ, $ifaceNil)) {
					new ptrType$15(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(bytesBytes);
				} else {
					new ptrType$16(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(typ.String());
					new ptrType$17(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
				}
			} else {
				new ptrType$18(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(91);
			}
			_ref = v;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$19(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$20(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printArg(new $Uint8(c), 118, depth + 1 >> 0);
				_i++;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$21(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ptrType$22(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
			return;
		}
		_ref$1 = verb;
		if (_ref$1 === 115) {
			p.fmt.fmt_s($bytesToString(v));
		} else if (_ref$1 === 120) {
			p.fmt.fmt_bx(v, "0123456789abcdef");
		} else if (_ref$1 === 88) {
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
		} else if (_ref$1 === 113) {
			p.fmt.fmt_q($bytesToString(v));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _ref, _ref$1, p, u, use0x64, value, verb;
		p = this;
		value = value;
		use0x64 = true;
		_ref = verb;
		if (_ref === 112 || _ref === 118) {
		} else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) {
			use0x64 = false;
		} else {
			p.badVerb(verb);
			return;
		}
		u = 0;
		_ref$1 = value.Kind();
		if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) {
			u = value.Pointer();
		} else {
			p.badVerb(verb);
			return;
		}
		if (p.fmt.fmtFlags.sharpV) {
			p.add(40);
			new ptrType$23(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
			p.add(41);
			p.add(40);
			if (u === 0) {
				new ptrType$24(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
		} else if ((verb === 118) && (u === 0)) {
			new ptrType$25(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
		} else {
			if (use0x64) {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
			} else {
				p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb);
			}
		}
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var arg, err, p, v, verb;
		p = this;
		err = $recover();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			v = reflect.ValueOf(arg);
			if ((v.Kind() === 22) && v.IsNil()) {
				new ptrType$26(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			new ptrType$27(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
			p.add(verb);
			new ptrType$28(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(panicBytes);
			p.panicking = true;
			p.printArg(err, 118, 0);
			p.panicking = false;
			new ptrType$29(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(41);
		}
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var p, plusV = false, sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var p, plusV, sharpV;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $deferred = [], $err = null, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, depth, formatter, handled = false, ok, ok$1, p, stringer, v, verb;
		/* */ try { $deferFrames.push($deferred);
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true); formatter = _tuple[0]; ok = _tuple[1];
		if (ok) {
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			formatter.Format(p, verb);
			return handled;
		}
		if (p.fmt.fmtFlags.sharpV) {
			_tuple$2 = $assertType(p.arg, GoStringer, true); stringer = _tuple$2[0]; ok$1 = _tuple$2[1];
			if (ok$1) {
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				p.fmt.fmt_s(stringer.GoString());
				return handled;
			}
		} else {
			_ref = verb;
			if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) {
				_ref$1 = p.arg;
				if ($assertType(_ref$1, $error, true)[1]) {
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					p.printArg(new $String(v.Error()), verb, depth);
					return handled;
				} else if ($assertType(_ref$1, Stringer, true)[1]) {
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					p.printArg(new $String(v.String()), verb, depth);
					return handled;
				}
			}
		}
		handled = false;
		return handled;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return handled; }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var _ref, _ref$1, arg, depth, f, handled, p, verb, wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		if ($interfaceIsEqual(arg, $ifaceNil)) {
			if ((verb === 84) || (verb === 118)) {
				p.fmt.pad(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(reflect.TypeOf(arg).String()), 115, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer(reflect.ValueOf(arg), verb);
			wasString = false;
			return wasString;
		}
		_ref$1 = arg;
		if ($assertType(_ref$1, $Bool, true)[1]) {
			f = _ref$1.$val;
			p.fmtBool(f, verb);
		} else if ($assertType(_ref$1, $Float32, true)[1]) {
			f = _ref$1.$val;
			p.fmtFloat32(f, verb);
		} else if ($assertType(_ref$1, $Float64, true)[1]) {
			f = _ref$1.$val;
			p.fmtFloat64(f, verb);
		} else if ($assertType(_ref$1, $Complex64, true)[1]) {
			f = _ref$1.$val;
			p.fmtComplex64(f, verb);
		} else if ($assertType(_ref$1, $Complex128, true)[1]) {
			f = _ref$1.$val;
			p.fmtComplex128(f, verb);
		} else if ($assertType(_ref$1, $Int, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int8, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int16, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int32, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int64, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(f, verb);
		} else if ($assertType(_ref$1, $Uint, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint8, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint16, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint32, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint64, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(f, verb);
		} else if ($assertType(_ref$1, $Uintptr, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f.constructor === Number ? f : 1), verb);
		} else if ($assertType(_ref$1, $String, true)[1]) {
			f = _ref$1.$val;
			p.fmtString(f, verb);
			wasString = (verb === 115) || (verb === 118);
		} else if ($assertType(_ref$1, sliceType$35, true)[1]) {
			f = _ref$1.$val;
			p.fmtBytes(f, verb, $ifaceNil, depth);
			wasString = verb === 115;
		} else {
			f = _ref$1;
			handled = p.handleMethods(verb, depth);
			if (handled) {
				wasString = false;
				return wasString;
			}
			wasString = p.printReflectValue(reflect.ValueOf(arg), verb, depth);
			return wasString;
		}
		p.arg = $ifaceNil;
		return wasString;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _ref, depth, handled, p, value, verb, wasString = false;
		p = this;
		value = value;
		if (!value.IsValid()) {
			if ((verb === 84) || (verb === 118)) {
				new ptrType$30(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(value.Type().String()), 115, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer(value, verb);
			wasString = false;
			return wasString;
		}
		p.arg = $ifaceNil;
		if (value.CanInterface()) {
			p.arg = value.Interface();
		}
		handled = p.handleMethods(verb, depth);
		if (handled) {
			wasString = false;
			return wasString;
		}
		wasString = p.printReflectValue(value, verb, depth);
		return wasString;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var _i, _i$1, _ref, _ref$1, _ref$2, _ref$3, a, bytes, depth, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value, value$1, verb, wasString = false, x;
		p = this;
		value = value;
		oldValue = p.value;
		p.value = value;
		f = value;
		_ref = f.Kind();
		BigSwitch:
		switch (0) { default: if (_ref === 1) {
			p.fmtBool(f.Bool(), verb);
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			p.fmtInt64(f.Int(), verb);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			p.fmtUint64(f.Uint(), verb);
		} else if (_ref === 13 || _ref === 14) {
			if (f.Type().Size() === 4) {
				p.fmtFloat32($fround(f.Float()), verb);
			} else {
				p.fmtFloat64(f.Float(), verb);
			}
		} else if (_ref === 15 || _ref === 16) {
			if (f.Type().Size() === 8) {
				p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb);
			} else {
				p.fmtComplex128(f.Complex(), verb);
			}
		} else if (_ref === 24) {
			p.fmtString(f.String(), verb);
		} else if (_ref === 21) {
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$31(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f.Type().String());
				if (f.IsNil()) {
					new ptrType$32(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("(nil)");
					break;
				}
				new ptrType$33(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
			} else {
				new ptrType$34(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(mapBytes);
			}
			keys = f.MapKeys();
			_ref$1 = keys;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				key = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$35(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$36(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printValue(key, verb, depth + 1 >> 0);
				new ptrType$37(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(58);
				p.printValue(f.MapIndex(key), verb, depth + 1 >> 0);
				_i++;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$38(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ptrType$39(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
		} else if (_ref === 25) {
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$40(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
			}
			p.add(123);
			v = f;
			t = v.Type();
			i$1 = 0;
			while (true) {
				if (!(i$1 < v.NumField())) { break; }
				if (i$1 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$41(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$42(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) {
					f$1 = $clone(t.Field(i$1), reflect.StructField);
					if (!(f$1.Name === "")) {
						new ptrType$43(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f$1.Name);
						new ptrType$44(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(58);
					}
				}
				p.printValue(getField(v, i$1), verb, depth + 1 >> 0);
				i$1 = i$1 + (1) >> 0;
			}
			new ptrType$45(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
		} else if (_ref === 20) {
			value$1 = f.Elem();
			if (!value$1.IsValid()) {
				if (p.fmt.fmtFlags.sharpV) {
					new ptrType$46(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f.Type().String());
					new ptrType$47(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilParenBytes);
				} else {
					new ptrType$48(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
				}
			} else {
				wasString = p.printValue(value$1, verb, depth + 1 >> 0);
			}
		} else if (_ref === 17 || _ref === 23) {
			typ = f.Type();
			if ((typ.Elem().Kind() === 8) && ($interfaceIsEqual(typ.Elem(), byteType) || (verb === 115) || (verb === 113) || (verb === 120))) {
				bytes = sliceType$36.nil;
				if (f.Kind() === 23) {
					bytes = f.Bytes();
				} else if (f.CanAddr()) {
					bytes = f.Slice(0, f.Len()).Bytes();
				} else {
					bytes = $makeSlice(sliceType$37, f.Len());
					_ref$2 = bytes;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$2.$length)) { break; }
						i$2 = _i$1;
						((i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (f.Index(i$2).Uint().$low << 24 >>> 24));
						_i$1++;
					}
				}
				p.fmtBytes(bytes, verb, typ, depth);
				wasString = verb === 115;
				break;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$49(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
				if ((f.Kind() === 23) && f.IsNil()) {
					new ptrType$50(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("(nil)");
					break;
				}
				new ptrType$51(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
			} else {
				new ptrType$52(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(91);
			}
			i$3 = 0;
			while (true) {
				if (!(i$3 < f.Len())) { break; }
				if (i$3 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$53(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$54(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printValue(f.Index(i$3), verb, depth + 1 >> 0);
				i$3 = i$3 + (1) >> 0;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$55(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ptrType$56(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
		} else if (_ref === 22) {
			v$1 = f.Pointer();
			if (!((v$1 === 0)) && (depth === 0)) {
				a = f.Elem();
				_ref$3 = a.Kind();
				if (_ref$3 === 17 || _ref$3 === 23) {
					new ptrType$57(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue(a, verb, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 25) {
					new ptrType$58(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue(a, verb, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 21) {
					new ptrType$59(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue(a, verb, depth + 1 >> 0);
					break BigSwitch;
				}
			}
			p.fmtPointer(value, verb);
		} else if (_ref === 18 || _ref === 19 || _ref === 26) {
			p.fmtPointer(value, verb);
		} else {
			p.unknownType(f);
		} }
		p.value = oldValue;
		wasString = wasString;
		return wasString;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _tuple, a, argNum, isInt = false, newArgNum = 0, num = 0;
		newArgNum = argNum;
		if (argNum < a.$length) {
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, format, i, index = 0, newi, ok = false, ok$1, wid = 0, width;
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;
					return [index, wid, ok];
				}
				_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found = false, i, index, newArgNum = 0, newi = 0, numArgs, ok, p, wid;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, arg$1, argNum, c, end, format, i, lasti, p, w;
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		while (true) {
			if (!(i < end)) { break; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				new ptrType$60(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				break;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (true) {
				if (!(i < end)) { break; }
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_ref === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_ref === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_ref === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_ref === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + (1) >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.fmtFlags.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					new ptrType$61(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.fmtFlags.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + (1) >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.fmtFlags.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.fmtFlags.precPresent) {
						new ptrType$62(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.fmtFlags.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				new ptrType$63(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(noVerbBytes);
				continue;
			}
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			if (c === 37) {
				new ptrType$64(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(37);
				continue;
			}
			if (!p.goodArgNum) {
				new ptrType$65(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
				p.add(c);
				new ptrType$66(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badIndexBytes);
				continue;
			} else if (argNum >= a.$length) {
				new ptrType$67(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
				p.add(c);
				new ptrType$68(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(missingBytes);
				continue;
			}
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			p.printArg(arg, c, 0);
		}
		if (!p.reordered && argNum < a.$length) {
			new ptrType$69(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(extraBytes);
			while (true) {
				if (!(argNum < a.$length)) { break; }
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				if (!($interfaceIsEqual(arg$1, $ifaceNil))) {
					new ptrType$70(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(arg$1).String());
					new ptrType$71(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(61);
				}
				p.printArg(arg$1, 118, 0);
				if ((argNum + 1 >> 0) < a.$length) {
					new ptrType$72(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			}
			new ptrType$73(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(41);
		}
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err = $ifaceNil, n = 0, s;
		s = this;
		_tmp = 0; _tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune"); n = _tmp; err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _tuple, err = $ifaceNil, r = 0, s, size = 0;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_tuple = s.rr.ReadRune(); r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok = false, s, wid = 0;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _tuple, err, r = 0, s;
		s = this;
		_tuple = s.ReadRune(); r = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _tuple, ok, s, u;
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true); u = _tuple[0]; ok = _tuple[1];
		if (ok) {
			u.UnreadRune();
		} else {
			s.peekRune = s.prevRune;
		}
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $deferred = [], $err = null, err = $ifaceNil, f, s, skipSpace, tok = sliceType$38.nil;
		/* */ try { $deferFrames.push($deferred);
		s = this;
		$deferred.push([(function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true); se = $clone(_tuple[0], scanError); ok = _tuple[1];
				if (ok) {
					err = se.err;
				} else {
					$panic(e);
				}
			}
		}), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		tok = s.token(skipSpace, f);
		return [tok, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [tok, err]; }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var s;
		s = this;
		s.skipSpace(false);
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		old = $clone(old, ssave);
		if (old.validSave) {
			$copy(s.ssave, old, ssave);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var r, s, stopAtNewline;
		s = this;
		while (true) {
			r = s.getRune();
			if (r === -1) {
				return;
			}
			if ((r === 13) && s.peek("\n")) {
				continue;
			}
			if (r === 10) {
				if (stopAtNewline) {
					break;
				}
				if (s.ssave.nlIsSpace) {
					continue;
				}
				s.errorString("unexpected newline");
				return;
			}
			if (!isSpace(r)) {
				s.UnreadRune();
				break;
			}
		}
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var f, r, s, skipSpace, x;
		s = this;
		if (skipSpace) {
			s.skipSpace(false);
		}
		while (true) {
			r = s.getRune();
			if (r === -1) {
				break;
			}
			if (!f(r)) {
				s.UnreadRune();
				break;
			}
			new ptrType$85(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(r);
		}
		return (x = s.buf, $subslice(new sliceType$46(x.$array), x.$offset, x.$offset + x.$length));
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var ok, r, s;
		s = this;
		r = s.getRune();
		if (!((r === -1))) {
			s.UnreadRune();
		}
		return indexRune(ok, r) >= 0;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$116.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$115], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", typ: $funcType([$Int], [sliceType$21, $Int, $Int], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int, sliceType$49], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$50], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", typ: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$24, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$51, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", typ: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", typ: $funcType([$Float64], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", typ: $funcType([$Float32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", typ: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}];
	ptrType$117.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$53], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$error], false)}];
	ptrType$118.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "add", name: "add", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$54], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", typ: $funcType([$Int64, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", typ: $funcType([$Int64], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", typ: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", typ: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", typ: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", typ: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", typ: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$34, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", typ: $funcType([], [$Bool, $Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", typ: $funcType([$Bool, $Bool], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType$55], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType$56, $Bool, $Bool], [], false)}];
	ptrType$120.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$60], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType$1], [sliceType$38, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType$2], [sliceType$46], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexDigit", name: "hexDigit", pkg: "fmt", typ: $funcType([$Int32], [$Int], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType$61], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType$62], [$Int, $error], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", typ: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", typ: arrayType$3, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: ptrType$114, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", typ: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", typ: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", typ: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$52], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", typ: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", typ: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", typ: arrayType$4, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", typ: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", typ: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", typ: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", typ: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", typ: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", typ: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", typ: $Int, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_fmt = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = os.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		padZeroBytes = $makeSlice(sliceType, 65);
		padSpaceBytes = $makeSlice(sliceType$1, 65);
		trueBytes = new sliceType$2($stringToBytes("true"));
		falseBytes = new sliceType$3($stringToBytes("false"));
		commaSpaceBytes = new sliceType$4($stringToBytes(", "));
		nilAngleBytes = new sliceType$5($stringToBytes("<nil>"));
		nilParenBytes = new sliceType$6($stringToBytes("(nil)"));
		nilBytes = new sliceType$7($stringToBytes("nil"));
		mapBytes = new sliceType$8($stringToBytes("map["));
		percentBangBytes = new sliceType$9($stringToBytes("%!"));
		missingBytes = new sliceType$10($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType$11($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType$12($stringToBytes("(PANIC="));
		extraBytes = new sliceType$13($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType$14($stringToBytes("i)"));
		bytesBytes = new sliceType$15($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType$16($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType$17($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType$18($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$19.nil, (function() {
			return new pp.ptr();
		}));
		intBits = reflect.TypeOf(new $Int(0)).Bits();
		uintptrBits = reflect.TypeOf(new $Uintptr(0)).Bits();
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$20([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$19.nil, (function() {
			return new ss.ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } }; $init_fmt.$blocking = true; return $init_fmt;
	};
	return $pkg;
})();
$packages["encoding/xml"] = (function() {
	var $pkg = {}, bufio, bytes, encoding, errors, fmt, io, reflect, strconv, strings, sync, unicode, utf8, Marshaler, MarshalerAttr, Encoder, printer, parentStack, UnsupportedTypeError, UnmarshalError, Unmarshaler, UnmarshalerAttr, typeInfo, fieldInfo, fieldFlags, TagPathError, SyntaxError, Name, Attr, Token, StartElement, EndElement, CharData, Comment, ProcInst, Directive, Decoder, stack, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, sliceType$3, ptrType$3, ptrType$4, ptrType$5, sliceType$4, sliceType$5, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, sliceType$15, sliceType$16, sliceType$17, ptrType$6, ptrType$7, sliceType$20, sliceType$21, ptrType$8, ptrType$9, sliceType$22, sliceType$23, sliceType$24, sliceType$25, sliceType$26, sliceType$27, ptrType$10, sliceType$28, ptrType$11, ptrType$12, sliceType$29, sliceType$30, ptrType$13, sliceType$31, arrayType, sliceType$32, sliceType$33, sliceType$34, sliceType$35, sliceType$36, sliceType$37, sliceType$38, sliceType$39, sliceType$40, ptrType$14, sliceType$41, sliceType$42, sliceType$43, sliceType$44, ptrType$15, sliceType$45, sliceType$46, sliceType$47, ptrType$16, ptrType$17, sliceType$48, ptrType$18, sliceType$49, ptrType$19, sliceType$50, ptrType$20, sliceType$51, sliceType$52, sliceType$53, ptrType$21, ptrType$22, sliceType$54, sliceType$55, sliceType$56, sliceType$57, sliceType$58, sliceType$59, ptrType$23, ptrType$24, ptrType$25, ptrType$26, sliceType$60, sliceType$61, sliceType$62, sliceType$63, sliceType$64, sliceType$65, sliceType$66, sliceType$67, sliceType$68, ptrType$27, ptrType$28, ptrType$29, ptrType$30, ptrType$31, mapType, mapType$1, sliceType$69, ptrType$32, ptrType$33, ptrType$34, ptrType$35, ptrType$36, ptrType$37, sliceType$70, ptrType$38, ptrType$39, ptrType$40, ptrType$41, ptrType$42, ptrType$43, ptrType$44, ptrType$45, mapType$2, funcType, mapType$3, endComment, endProcInst, endDirective, marshalerType, marshalerAttrType, textMarshalerType, ddBytes, unmarshalerType, unmarshalerAttrType, textUnmarshalerType, tinfoMap, tinfoLock, nameType, errRawToken, entity, first, second, htmlEntity, htmlAutoClose, esc_quot, esc_apos, esc_amp, esc_lt, esc_gt, esc_tab, esc_nl, esc_cr, esc_fffd, x, _map, _key, _map$1, _key$1, defaultStart, isEmptyValue, receiverType, copyValue, getTypeInfo, structFieldInfo, lookupXMLName, min, addFieldInfo, makeCopy, NewDecoder, isInCharacterRange, isNameByte, isName, isNameString, EscapeText, Escape, procInstEncoding;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "xml.Marshaler", "Marshaler", "encoding/xml", null);
	MarshalerAttr = $pkg.MarshalerAttr = $newType(8, $kindInterface, "xml.MarshalerAttr", "MarshalerAttr", "encoding/xml", null);
	Encoder = $pkg.Encoder = $newType(0, $kindStruct, "xml.Encoder", "Encoder", "encoding/xml", function(p_) {
		this.$val = this;
		this.p = p_ !== undefined ? p_ : new printer.ptr();
	});
	printer = $pkg.printer = $newType(0, $kindStruct, "xml.printer", "printer", "encoding/xml", function(Writer_, encoder_, seq_, indent_, prefix_, depth_, indentedIn_, putNewline_, attrNS_, attrPrefix_, prefixes_, tags_) {
		this.$val = this;
		this.Writer = Writer_ !== undefined ? Writer_ : ptrType$6.nil;
		this.encoder = encoder_ !== undefined ? encoder_ : ptrType$7.nil;
		this.seq = seq_ !== undefined ? seq_ : 0;
		this.indent = indent_ !== undefined ? indent_ : "";
		this.prefix = prefix_ !== undefined ? prefix_ : "";
		this.depth = depth_ !== undefined ? depth_ : 0;
		this.indentedIn = indentedIn_ !== undefined ? indentedIn_ : false;
		this.putNewline = putNewline_ !== undefined ? putNewline_ : false;
		this.attrNS = attrNS_ !== undefined ? attrNS_ : false;
		this.attrPrefix = attrPrefix_ !== undefined ? attrPrefix_ : false;
		this.prefixes = prefixes_ !== undefined ? prefixes_ : sliceType$20.nil;
		this.tags = tags_ !== undefined ? tags_ : sliceType$21.nil;
	});
	parentStack = $pkg.parentStack = $newType(0, $kindStruct, "xml.parentStack", "parentStack", "encoding/xml", function(p_, stack_) {
		this.$val = this;
		this.p = p_ !== undefined ? p_ : ptrType$13.nil;
		this.stack = stack_ !== undefined ? stack_ : sliceType$31.nil;
	});
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "xml.UnsupportedTypeError", "UnsupportedTypeError", "encoding/xml", function(Type_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
	});
	UnmarshalError = $pkg.UnmarshalError = $newType(8, $kindString, "xml.UnmarshalError", "UnmarshalError", "encoding/xml", null);
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "xml.Unmarshaler", "Unmarshaler", "encoding/xml", null);
	UnmarshalerAttr = $pkg.UnmarshalerAttr = $newType(8, $kindInterface, "xml.UnmarshalerAttr", "UnmarshalerAttr", "encoding/xml", null);
	typeInfo = $pkg.typeInfo = $newType(0, $kindStruct, "xml.typeInfo", "typeInfo", "encoding/xml", function(xmlname_, fields_) {
		this.$val = this;
		this.xmlname = xmlname_ !== undefined ? xmlname_ : ptrType$10.nil;
		this.fields = fields_ !== undefined ? fields_ : sliceType$50.nil;
	});
	fieldInfo = $pkg.fieldInfo = $newType(0, $kindStruct, "xml.fieldInfo", "fieldInfo", "encoding/xml", function(idx_, name_, xmlns_, flags_, parents_) {
		this.$val = this;
		this.idx = idx_ !== undefined ? idx_ : sliceType$52.nil;
		this.name = name_ !== undefined ? name_ : "";
		this.xmlns = xmlns_ !== undefined ? xmlns_ : "";
		this.flags = flags_ !== undefined ? flags_ : 0;
		this.parents = parents_ !== undefined ? parents_ : sliceType$53.nil;
	});
	fieldFlags = $pkg.fieldFlags = $newType(4, $kindInt, "xml.fieldFlags", "fieldFlags", "encoding/xml", null);
	TagPathError = $pkg.TagPathError = $newType(0, $kindStruct, "xml.TagPathError", "TagPathError", "encoding/xml", function(Struct_, Field1_, Tag1_, Field2_, Tag2_) {
		this.$val = this;
		this.Struct = Struct_ !== undefined ? Struct_ : $ifaceNil;
		this.Field1 = Field1_ !== undefined ? Field1_ : "";
		this.Tag1 = Tag1_ !== undefined ? Tag1_ : "";
		this.Field2 = Field2_ !== undefined ? Field2_ : "";
		this.Tag2 = Tag2_ !== undefined ? Tag2_ : "";
	});
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "xml.SyntaxError", "SyntaxError", "encoding/xml", function(Msg_, Line_) {
		this.$val = this;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
		this.Line = Line_ !== undefined ? Line_ : 0;
	});
	Name = $pkg.Name = $newType(0, $kindStruct, "xml.Name", "Name", "encoding/xml", function(Space_, Local_) {
		this.$val = this;
		this.Space = Space_ !== undefined ? Space_ : "";
		this.Local = Local_ !== undefined ? Local_ : "";
	});
	Attr = $pkg.Attr = $newType(0, $kindStruct, "xml.Attr", "Attr", "encoding/xml", function(Name_, Value_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : new Name.ptr();
		this.Value = Value_ !== undefined ? Value_ : "";
	});
	Token = $pkg.Token = $newType(8, $kindInterface, "xml.Token", "Token", "encoding/xml", null);
	StartElement = $pkg.StartElement = $newType(0, $kindStruct, "xml.StartElement", "StartElement", "encoding/xml", function(Name_, Attr_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : new Name.ptr();
		this.Attr = Attr_ !== undefined ? Attr_ : sliceType$40.nil;
	});
	EndElement = $pkg.EndElement = $newType(0, $kindStruct, "xml.EndElement", "EndElement", "encoding/xml", function(Name_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : new Name.ptr();
	});
	CharData = $pkg.CharData = $newType(12, $kindSlice, "xml.CharData", "CharData", "encoding/xml", null);
	Comment = $pkg.Comment = $newType(12, $kindSlice, "xml.Comment", "Comment", "encoding/xml", null);
	ProcInst = $pkg.ProcInst = $newType(0, $kindStruct, "xml.ProcInst", "ProcInst", "encoding/xml", function(Target_, Inst_) {
		this.$val = this;
		this.Target = Target_ !== undefined ? Target_ : "";
		this.Inst = Inst_ !== undefined ? Inst_ : sliceType$70.nil;
	});
	Directive = $pkg.Directive = $newType(12, $kindSlice, "xml.Directive", "Directive", "encoding/xml", null);
	Decoder = $pkg.Decoder = $newType(0, $kindStruct, "xml.Decoder", "Decoder", "encoding/xml", function(Strict_, AutoClose_, Entity_, CharsetReader_, DefaultSpace_, r_, buf_, saved_, stk_, free_, needClose_, toClose_, nextToken_, nextByte_, ns_, err_, line_, offset_, unmarshalDepth_) {
		this.$val = this;
		this.Strict = Strict_ !== undefined ? Strict_ : false;
		this.AutoClose = AutoClose_ !== undefined ? AutoClose_ : sliceType$59.nil;
		this.Entity = Entity_ !== undefined ? Entity_ : false;
		this.CharsetReader = CharsetReader_ !== undefined ? CharsetReader_ : $throwNilPointerError;
		this.DefaultSpace = DefaultSpace_ !== undefined ? DefaultSpace_ : "";
		this.r = r_ !== undefined ? r_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : new bytes.Buffer.ptr();
		this.saved = saved_ !== undefined ? saved_ : ptrType$17.nil;
		this.stk = stk_ !== undefined ? stk_ : ptrType$23.nil;
		this.free = free_ !== undefined ? free_ : ptrType$24.nil;
		this.needClose = needClose_ !== undefined ? needClose_ : false;
		this.toClose = toClose_ !== undefined ? toClose_ : new Name.ptr();
		this.nextToken = nextToken_ !== undefined ? nextToken_ : $ifaceNil;
		this.nextByte = nextByte_ !== undefined ? nextByte_ : 0;
		this.ns = ns_ !== undefined ? ns_ : false;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.line = line_ !== undefined ? line_ : 0;
		this.offset = offset_ !== undefined ? offset_ : new $Int64(0, 0);
		this.unmarshalDepth = unmarshalDepth_ !== undefined ? unmarshalDepth_ : 0;
	});
	stack = $pkg.stack = $newType(0, $kindStruct, "xml.stack", "stack", "encoding/xml", function(next_, kind_, name_, ok_) {
		this.$val = this;
		this.next = next_ !== undefined ? next_ : ptrType$25.nil;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.name = name_ !== undefined ? name_ : new Name.ptr();
		this.ok = ok_ !== undefined ? ok_ : false;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($Uint8);
	ptrType = $ptrType(Marshaler);
	ptrType$1 = $ptrType(MarshalerAttr);
	ptrType$2 = $ptrType(encoding.TextMarshaler);
	sliceType$3 = $sliceType($Uint8);
	ptrType$3 = $ptrType(Unmarshaler);
	ptrType$4 = $ptrType(UnmarshalerAttr);
	ptrType$5 = $ptrType(encoding.TextUnmarshaler);
	sliceType$4 = $sliceType(unicode.Range16);
	sliceType$5 = $sliceType(unicode.Range32);
	sliceType$6 = $sliceType(unicode.Range16);
	sliceType$7 = $sliceType(unicode.Range16);
	sliceType$8 = $sliceType($String);
	sliceType$9 = $sliceType($Uint8);
	sliceType$10 = $sliceType($Uint8);
	sliceType$11 = $sliceType($Uint8);
	sliceType$12 = $sliceType($Uint8);
	sliceType$13 = $sliceType($Uint8);
	sliceType$14 = $sliceType($Uint8);
	sliceType$15 = $sliceType($Uint8);
	sliceType$16 = $sliceType($Uint8);
	sliceType$17 = $sliceType($Uint8);
	ptrType$6 = $ptrType(bufio.Writer);
	ptrType$7 = $ptrType(Encoder);
	sliceType$20 = $sliceType($String);
	sliceType$21 = $sliceType(Name);
	ptrType$8 = $ptrType(fieldInfo);
	ptrType$9 = $ptrType(StartElement);
	sliceType$22 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType($emptyInterface);
	sliceType$25 = $sliceType($Uint8);
	sliceType$26 = $sliceType($Uint8);
	sliceType$27 = $sliceType($Uint8);
	ptrType$10 = $ptrType(fieldInfo);
	sliceType$28 = $sliceType($Uint8);
	ptrType$11 = $ptrType(StartElement);
	ptrType$12 = $ptrType(fieldInfo);
	sliceType$29 = $sliceType($Uint8);
	sliceType$30 = $sliceType($Uint8);
	ptrType$13 = $ptrType(printer);
	sliceType$31 = $sliceType($String);
	arrayType = $arrayType($Uint8, 64);
	sliceType$32 = $sliceType($Uint8);
	sliceType$33 = $sliceType($Uint8);
	sliceType$34 = $sliceType($Uint8);
	sliceType$35 = $sliceType($Uint8);
	sliceType$36 = $sliceType($Uint8);
	sliceType$37 = $sliceType($Uint8);
	sliceType$38 = $sliceType($Uint8);
	sliceType$39 = $sliceType($String);
	sliceType$40 = $sliceType(Attr);
	ptrType$14 = $ptrType(StartElement);
	sliceType$41 = $sliceType($Uint8);
	sliceType$42 = $sliceType($Uint8);
	sliceType$43 = $sliceType($Uint8);
	sliceType$44 = $sliceType($Uint8);
	ptrType$15 = $ptrType(StartElement);
	sliceType$45 = $sliceType($Uint8);
	sliceType$46 = $sliceType($Uint8);
	sliceType$47 = $sliceType($Uint8);
	ptrType$16 = $ptrType(typeInfo);
	ptrType$17 = $ptrType(bytes.Buffer);
	sliceType$48 = $sliceType($String);
	ptrType$18 = $ptrType(reflect.rtype);
	sliceType$49 = $sliceType($Uint8);
	ptrType$19 = $ptrType(typeInfo);
	sliceType$50 = $sliceType(fieldInfo);
	ptrType$20 = $ptrType(typeInfo);
	sliceType$51 = $sliceType($Int);
	sliceType$52 = $sliceType($Int);
	sliceType$53 = $sliceType($String);
	ptrType$21 = $ptrType(fieldInfo);
	ptrType$22 = $ptrType(fieldInfo);
	sliceType$54 = $sliceType($Int);
	sliceType$55 = $sliceType($emptyInterface);
	sliceType$56 = $sliceType(Attr);
	sliceType$57 = $sliceType($Uint8);
	sliceType$58 = $sliceType($Uint8);
	sliceType$59 = $sliceType($String);
	ptrType$23 = $ptrType(stack);
	ptrType$24 = $ptrType(stack);
	ptrType$25 = $ptrType(stack);
	ptrType$26 = $ptrType(stack);
	sliceType$60 = $sliceType($Uint8);
	sliceType$61 = $sliceType(Attr);
	sliceType$62 = $sliceType(Attr);
	sliceType$63 = $sliceType(Attr);
	sliceType$64 = $sliceType($Uint8);
	sliceType$65 = $sliceType($Uint8);
	sliceType$66 = $sliceType($Uint8);
	sliceType$67 = $sliceType($Uint8);
	sliceType$68 = $sliceType($Uint8);
	ptrType$27 = $ptrType(Encoder);
	ptrType$28 = $ptrType(Encoder);
	ptrType$29 = $ptrType(StartElement);
	ptrType$30 = $ptrType(typeInfo);
	ptrType$31 = $ptrType(printer);
	mapType = $mapType($String, $String);
	mapType$1 = $mapType($String, $String);
	sliceType$69 = $sliceType($String);
	ptrType$32 = $ptrType(parentStack);
	ptrType$33 = $ptrType(UnsupportedTypeError);
	ptrType$34 = $ptrType(Decoder);
	ptrType$35 = $ptrType(fieldInfo);
	ptrType$36 = $ptrType(TagPathError);
	ptrType$37 = $ptrType(SyntaxError);
	sliceType$70 = $sliceType($Uint8);
	ptrType$38 = $ptrType(StartElement);
	ptrType$39 = $ptrType(StartElement);
	ptrType$40 = $ptrType(typeInfo);
	ptrType$41 = $ptrType(StartElement);
	ptrType$42 = $ptrType(Name);
	ptrType$43 = $ptrType(stack);
	ptrType$44 = $ptrType(EndElement);
	ptrType$45 = $ptrType(Decoder);
	mapType$2 = $mapType($String, $String);
	funcType = $funcType([$String, io.Reader], [io.Reader, $error], false);
	mapType$3 = $mapType($String, $String);
	Encoder.ptr.prototype.Indent = function(prefix, indent) {
		var enc, indent, prefix;
		enc = this;
		enc.p.prefix = prefix;
		enc.p.indent = indent;
	};
	Encoder.prototype.Indent = function(prefix, indent) { return this.$val.Indent(prefix, indent); };
	Encoder.ptr.prototype.Encode = function(v, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _r, enc, err;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Encode = function() { s: while (true) { switch ($s) { case 0:
		enc = $this;
		_r = enc.p.marshalValue(reflect.ValueOf(v), ptrType$8.nil, ptrType$9.nil, $BLOCKING); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return enc.p.Writer.Flush();
		/* */ case -1: } return; } }; $blocking_Encode.$blocking = true; return $blocking_Encode;
	};
	Encoder.prototype.Encode = function(v, $b) { return this.$val.Encode(v, $b); };
	Encoder.ptr.prototype.EncodeElement = function(v, start, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _r, enc, err;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_EncodeElement = function() { s: while (true) { switch ($s) { case 0:
		enc = $this;
		start = $clone(start, StartElement);
		_r = enc.p.marshalValue(reflect.ValueOf(v), ptrType$8.nil, start, $BLOCKING); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return enc.p.Writer.Flush();
		/* */ case -1: } return; } }; $blocking_EncodeElement.$blocking = true; return $blocking_EncodeElement;
	};
	Encoder.prototype.EncodeElement = function(v, start, $b) { return this.$val.EncodeElement(v, start, $b); };
	Encoder.ptr.prototype.EncodeToken = function(t) {
		var _ref, enc, err, err$1, p, t, t$1;
		enc = this;
		p = enc.p;
		_ref = t;
		if ($assertType(_ref, StartElement, true)[1]) {
			t$1 = _ref.$val;
			err = p.writeStart(t$1);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		} else if ($assertType(_ref, EndElement, true)[1]) {
			t$1 = _ref.$val;
			err$1 = p.writeEnd(t$1.Name);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
		} else if ($assertType(_ref, CharData, true)[1]) {
			t$1 = _ref.$val;
			EscapeText(p, $subslice(new sliceType$22(t$1.$array), t$1.$offset, t$1.$offset + t$1.$length));
		} else if ($assertType(_ref, Comment, true)[1]) {
			t$1 = _ref.$val;
			if (bytes.Contains($subslice(new sliceType$23(t$1.$array), t$1.$offset, t$1.$offset + t$1.$length), endComment)) {
				return fmt.Errorf("xml: EncodeToken of Comment containing --> marker", new sliceType$24([]));
			}
			p.Writer.WriteString("<!--");
			p.Writer.Write($subslice(new sliceType$25(t$1.$array), t$1.$offset, t$1.$offset + t$1.$length));
			p.Writer.WriteString("-->");
			return p.cachedWriteError();
		} else if ($assertType(_ref, ProcInst, true)[1]) {
			t$1 = _ref.$val;
			if (t$1.Target === "xml" && !((p.Writer.Buffered() === 0))) {
				return fmt.Errorf("xml: EncodeToken of ProcInst xml target only valid for xml declaration, first token encoded", new sliceType$24([]));
			}
			if (!isNameString(t$1.Target)) {
				return fmt.Errorf("xml: EncodeToken of ProcInst with invalid Target", new sliceType$24([]));
			}
			if (bytes.Contains(t$1.Inst, endProcInst)) {
				return fmt.Errorf("xml: EncodeToken of ProcInst containing ?> marker", new sliceType$24([]));
			}
			p.Writer.WriteString("<?");
			p.Writer.WriteString(t$1.Target);
			if (t$1.Inst.$length > 0) {
				p.Writer.WriteByte(32);
				p.Writer.Write(t$1.Inst);
			}
			p.Writer.WriteString("?>");
		} else if ($assertType(_ref, Directive, true)[1]) {
			t$1 = _ref.$val;
			if (bytes.Contains($subslice(new sliceType$23(t$1.$array), t$1.$offset, t$1.$offset + t$1.$length), endDirective)) {
				return fmt.Errorf("xml: EncodeToken of Directive containing > marker", new sliceType$24([]));
			}
			p.Writer.WriteString("<!");
			p.Writer.Write($subslice(new sliceType$25(t$1.$array), t$1.$offset, t$1.$offset + t$1.$length));
			p.Writer.WriteString(">");
		}
		return p.cachedWriteError();
	};
	Encoder.prototype.EncodeToken = function(t) { return this.$val.EncodeToken(t); };
	Encoder.ptr.prototype.Flush = function() {
		var enc;
		enc = this;
		return enc.p.Writer.Flush();
	};
	Encoder.prototype.Flush = function() { return this.$val.Flush(); };
	printer.ptr.prototype.createAttrPrefix = function(url) {
		var _entry, _entry$1, _entry$2, _key$2, _key$3, i, id, p, prefix, prefix$1, url;
		p = this;
		prefix = (_entry = p.attrPrefix[url], _entry !== undefined ? _entry.v : "");
		if (!(prefix === "")) {
			return prefix;
		}
		if (url === "http://www.w3.org/XML/1998/namespace") {
			return "xml";
		}
		if (p.attrPrefix === false) {
			p.attrPrefix = new $Map();
			p.attrNS = new $Map();
		}
		prefix$1 = strings.TrimRight(url, "/");
		i = strings.LastIndex(prefix$1, "/");
		if (i >= 0) {
			prefix$1 = prefix$1.substring((i + 1 >> 0));
		}
		if (prefix$1 === "" || !isName(new sliceType$26($stringToBytes(prefix$1))) || strings.Contains(prefix$1, ":")) {
			prefix$1 = "_";
		}
		if (strings.HasPrefix(prefix$1, "xml")) {
			prefix$1 = "_" + prefix$1;
		}
		if (!((_entry$1 = p.attrNS[prefix$1], _entry$1 !== undefined ? _entry$1.v : "") === "")) {
			p.seq = p.seq + (1) >> 0;
			while (true) {
				id = prefix$1 + "_" + strconv.Itoa(p.seq);
				if ((_entry$2 = p.attrNS[id], _entry$2 !== undefined ? _entry$2.v : "") === "") {
					prefix$1 = id;
					break;
				}
				p.seq = p.seq + (1) >> 0;
			}
		}
		_key$2 = url; (p.attrPrefix || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: prefix$1 };
		_key$3 = prefix$1; (p.attrNS || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: url };
		p.Writer.WriteString("xmlns:");
		p.Writer.WriteString(prefix$1);
		p.Writer.WriteString("=\"");
		EscapeText(p, new sliceType$27($stringToBytes(url)));
		p.Writer.WriteString("\" ");
		p.prefixes = $append(p.prefixes, prefix$1);
		return prefix$1;
	};
	printer.prototype.createAttrPrefix = function(url) { return this.$val.createAttrPrefix(url); };
	printer.ptr.prototype.deleteAttrPrefix = function(prefix) {
		var _entry, p, prefix;
		p = this;
		delete p.attrPrefix[(_entry = p.attrNS[prefix], _entry !== undefined ? _entry.v : "")];
		delete p.attrNS[prefix];
	};
	printer.prototype.deleteAttrPrefix = function(prefix) { return this.$val.deleteAttrPrefix(prefix); };
	printer.ptr.prototype.markPrefix = function() {
		var p;
		p = this;
		p.prefixes = $append(p.prefixes, "");
	};
	printer.prototype.markPrefix = function() { return this.$val.markPrefix(); };
	printer.ptr.prototype.popPrefix = function() {
		var p, prefix, x$1, x$2;
		p = this;
		while (true) {
			if (!(p.prefixes.$length > 0)) { break; }
			prefix = (x$1 = p.prefixes, x$2 = p.prefixes.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2]));
			p.prefixes = $subslice(p.prefixes, 0, (p.prefixes.$length - 1 >> 0));
			if (prefix === "") {
				break;
			}
			p.deleteAttrPrefix(prefix);
		}
	};
	printer.prototype.popPrefix = function() { return this.$val.popPrefix(); };
	printer.ptr.prototype.marshalValue = function(val, finfo, startTemplate, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _i, _r, _r$1, _r$2, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, attr, attr$1, b, b$1, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err1, finfo$1, fv, i, i$1, kind, n, name, name$1, ok, p, pv, pv$1, pv$2, pv$3, s, s$1, start, text, text$1, tinfo, typ, v, x$1, xmlname;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_marshalValue = function() { s: while (true) { switch ($s) { case 0:
		p = $this;
		val = val;
		if (!(startTemplate === ptrType$9.nil) && startTemplate.Name.Local === "") {
			return fmt.Errorf("xml: EncodeElement of StartElement with missing name", new sliceType$24([]));
		}
		if (!val.IsValid()) {
			return $ifaceNil;
		}
		if (!(finfo === ptrType$8.nil) && !(((finfo.flags & 64) === 0)) && isEmptyValue(val)) {
			return $ifaceNil;
		}
		while (true) {
			if (!((val.Kind() === 20) || (val.Kind() === 22))) { break; }
			if (val.IsNil()) {
				return $ifaceNil;
			}
			val = val.Elem();
		}
		kind = val.Kind();
		typ = val.Type();
		if (val.CanInterface() && typ.Implements(marshalerType)) {
			return p.marshalInterface($assertType(val.Interface(), Marshaler), defaultStart(typ, finfo, startTemplate));
		}
		if (val.CanAddr()) {
			pv = val.Addr();
			if (pv.CanInterface() && pv.Type().Implements(marshalerType)) {
				return p.marshalInterface($assertType(pv.Interface(), Marshaler), defaultStart(pv.Type(), finfo, startTemplate));
			}
		}
		if (val.CanInterface() && typ.Implements(textMarshalerType)) {
			return p.marshalTextInterface($assertType(val.Interface(), encoding.TextMarshaler), defaultStart(typ, finfo, startTemplate));
		}
		if (val.CanAddr()) {
			pv$1 = val.Addr();
			if (pv$1.CanInterface() && pv$1.Type().Implements(textMarshalerType)) {
				return p.marshalTextInterface($assertType(pv$1.Interface(), encoding.TextMarshaler), defaultStart(pv$1.Type(), finfo, startTemplate));
			}
		}
		/* */ if (((kind === 23) || (kind === 17)) && !((typ.Elem().Kind() === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((kind === 23) || (kind === 17)) && !((typ.Elem().Kind() === 8))) { */ case 1:
			_tmp = 0; _tmp$1 = val.Len(); i = _tmp; n = _tmp$1;
			/* while (true) { */ case 3:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 4; continue; }
				_r = p.marshalValue(val.Index(i), finfo, startTemplate, $BLOCKING); /* */ $s = 5; case 5: if (_r && _r.$blocking) { _r = _r(); }
				err = _r;
				/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 6:
					return err;
				/* } */ case 7:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			return $ifaceNil;
		/* } */ case 2:
		_r$1 = getTypeInfo(typ, $BLOCKING); /* */ $s = 8; case 8: if (_r$1 && _r$1.$blocking) { _r$1 = _r$1(); }
		_tuple = _r$1; tinfo = _tuple[0]; err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		start = $clone(new StartElement.ptr(), StartElement);
		if (!(startTemplate === ptrType$9.nil)) {
			$copy(start.Name, startTemplate.Name, Name);
			start.Attr = $appendSlice(start.Attr, startTemplate.Attr);
		} else if (!(tinfo.xmlname === ptrType$10.nil)) {
			xmlname = tinfo.xmlname;
			if (!(xmlname.name === "")) {
				_tmp$2 = xmlname.xmlns; _tmp$3 = xmlname.name; start.Name.Space = _tmp$2; start.Name.Local = _tmp$3;
			} else {
				_tuple$1 = $assertType(xmlname.value(val).Interface(), Name, true); v = $clone(_tuple$1[0], Name); ok = _tuple$1[1];
				if (ok && !(v.Local === "")) {
					$copy(start.Name, v, Name);
				}
			}
		}
		if (start.Name.Local === "" && !(finfo === ptrType$8.nil)) {
			_tmp$4 = finfo.xmlns; _tmp$5 = finfo.name; start.Name.Space = _tmp$4; start.Name.Local = _tmp$5;
		}
		if (start.Name.Local === "") {
			name = typ.Name();
			if (name === "") {
				return new UnsupportedTypeError.ptr(typ);
			}
			start.Name.Local = name;
		}
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 9:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 10; continue; }
			i$1 = _i;
			finfo$1 = (x$1 = tinfo.fields, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1]));
			/* */ if ((finfo$1.flags & 2) === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if ((finfo$1.flags & 2) === 0) { */ case 11:
				_i++;
				/* continue; */ $s = 9; continue;
			/* } */ case 12:
			fv = finfo$1.value(val);
			name$1 = new Name.ptr(finfo$1.xmlns, finfo$1.name);
			/* */ if (!(((finfo$1.flags & 64) === 0)) && isEmptyValue(fv)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!(((finfo$1.flags & 64) === 0)) && isEmptyValue(fv)) { */ case 13:
				_i++;
				/* continue; */ $s = 9; continue;
			/* } */ case 14:
			/* */ if ((fv.Kind() === 20) && fv.IsNil()) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if ((fv.Kind() === 20) && fv.IsNil()) { */ case 15:
				_i++;
				/* continue; */ $s = 9; continue;
			/* } */ case 16:
			/* */ if (fv.CanInterface() && fv.Type().Implements(marshalerAttrType)) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (fv.CanInterface() && fv.Type().Implements(marshalerAttrType)) { */ case 17:
				_tuple$2 = $assertType(fv.Interface(), MarshalerAttr).MarshalXMLAttr(name$1); attr = $clone(_tuple$2[0], Attr); err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return err$2;
				}
				if (!(attr.Name.Local === "")) {
					start.Attr = $append(start.Attr, attr);
				}
				_i++;
				/* continue; */ $s = 9; continue;
			/* } */ case 18:
			/* */ if (fv.CanAddr()) { $s = 19; continue; }
			/* */ $s = 20; continue;
			/* if (fv.CanAddr()) { */ case 19:
				pv$2 = fv.Addr();
				if (pv$2.CanInterface() && pv$2.Type().Implements(marshalerAttrType)) {
					_tuple$3 = $assertType(pv$2.Interface(), MarshalerAttr).MarshalXMLAttr(name$1); attr$1 = $clone(_tuple$3[0], Attr); err$3 = _tuple$3[1];
					if (!($interfaceIsEqual(err$3, $ifaceNil))) {
						return err$3;
					}
					if (!(attr$1.Name.Local === "")) {
						start.Attr = $append(start.Attr, attr$1);
					}
					_i++;
					/* continue; */ $s = 9; continue;
				}
			/* } */ case 20:
			/* */ if (fv.CanInterface() && fv.Type().Implements(textMarshalerType)) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (fv.CanInterface() && fv.Type().Implements(textMarshalerType)) { */ case 21:
				_tuple$4 = $assertType(fv.Interface(), encoding.TextMarshaler).MarshalText(); text = _tuple$4[0]; err$4 = _tuple$4[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					return err$4;
				}
				start.Attr = $append(start.Attr, new Attr.ptr($clone(name$1, Name), $bytesToString(text)));
				_i++;
				/* continue; */ $s = 9; continue;
			/* } */ case 22:
			if (fv.CanAddr()) {
				pv$3 = fv.Addr();
				if (pv$3.CanInterface() && pv$3.Type().Implements(textMarshalerType)) {
					_tuple$5 = $assertType(pv$3.Interface(), encoding.TextMarshaler).MarshalText(); text$1 = _tuple$5[0]; err$5 = _tuple$5[1];
					if (!($interfaceIsEqual(err$5, $ifaceNil))) {
						return err$5;
					}
					start.Attr = $append(start.Attr, new Attr.ptr($clone(name$1, Name), $bytesToString(text$1)));
					_i++;
					/* continue; */ $s = 9; continue;
				}
			}
			_ref$1 = fv.Kind();
			if (_ref$1 === 22 || _ref$1 === 20) {
				if (fv.IsNil()) {
					_i++;
					/* continue; */ $s = 9; continue;
				}
				fv = fv.Elem();
			}
			_tuple$6 = p.marshalSimple(fv.Type(), fv); s = _tuple$6[0]; b = _tuple$6[1]; err$6 = _tuple$6[2];
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				return err$6;
			}
			if (!(b === sliceType$28.nil)) {
				s = $bytesToString(b);
			}
			start.Attr = $append(start.Attr, new Attr.ptr($clone(name$1, Name), s));
			_i++;
		/* } */ $s = 9; continue; case 10:
		err$7 = p.writeStart(start);
		if (!($interfaceIsEqual(err$7, $ifaceNil))) {
			return err$7;
		}
		/* */ if (val.Kind() === 25) { $s = 23; continue; }
		/* */ $s = 24; continue;
		/* if (val.Kind() === 25) { */ case 23:
			_r$2 = p.marshalStruct(tinfo, val, $BLOCKING); /* */ $s = 26; case 26: if (_r$2 && _r$2.$blocking) { _r$2 = _r$2(); }
			err$1 = _r$2;
			$s = 25; continue;
		/* } else { */ case 24:
			_tuple$7 = p.marshalSimple(typ, val); s$1 = _tuple$7[0]; b$1 = _tuple$7[1]; err1 = _tuple$7[2];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				err$1 = err1;
			} else if (!(b$1 === sliceType$28.nil)) {
				EscapeText(p, b$1);
			} else {
				p.EscapeString(s$1);
			}
		/* } */ case 25:
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		err$8 = p.writeEnd(start.Name);
		if (!($interfaceIsEqual(err$8, $ifaceNil))) {
			return err$8;
		}
		return p.cachedWriteError();
		/* */ case -1: } return; } }; $blocking_marshalValue.$blocking = true; return $blocking_marshalValue;
	};
	printer.prototype.marshalValue = function(val, finfo, startTemplate, $b) { return this.$val.marshalValue(val, finfo, startTemplate, $b); };
	defaultStart = function(typ, finfo, startTemplate) {
		var finfo, start, startTemplate, typ;
		start = $clone(new StartElement.ptr(), StartElement);
		if (!(startTemplate === ptrType$11.nil)) {
			$copy(start.Name, startTemplate.Name, Name);
			start.Attr = $appendSlice(start.Attr, startTemplate.Attr);
		} else if (!(finfo === ptrType$12.nil) && !(finfo.name === "")) {
			start.Name.Local = finfo.name;
			start.Name.Space = finfo.xmlns;
		} else if (!(typ.Name() === "")) {
			start.Name.Local = typ.Name();
		} else {
			start.Name.Local = typ.Elem().Name();
		}
		return start;
	};
	printer.ptr.prototype.marshalInterface = function(val, start) {
		var err, n, p, start, val, x$1, x$2;
		p = this;
		start = $clone(start, StartElement);
		p.tags = $append(p.tags, new Name.ptr("", ""));
		n = p.tags.$length;
		err = val.MarshalXML(p.encoder, start);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (p.tags.$length > n) {
			return fmt.Errorf("xml: %s.MarshalXML wrote invalid XML: <%s> not closed", new sliceType$24([new $String(receiverType(val)), new $String((x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local)]));
		}
		p.tags = $subslice(p.tags, 0, (n - 1 >> 0));
		return $ifaceNil;
	};
	printer.prototype.marshalInterface = function(val, start) { return this.$val.marshalInterface(val, start); };
	printer.ptr.prototype.marshalTextInterface = function(val, start) {
		var _tuple, err, err$1, p, start, text, val;
		p = this;
		start = $clone(start, StartElement);
		err = p.writeStart(start);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple = val.MarshalText(); text = _tuple[0]; err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		EscapeText(p, text);
		return p.writeEnd(start.Name);
	};
	printer.prototype.marshalTextInterface = function(val, start) { return this.$val.marshalTextInterface(val, start); };
	printer.ptr.prototype.writeStart = function(start) {
		var _i, _ref, attr, name, p, start;
		p = this;
		if (start.Name.Local === "") {
			return fmt.Errorf("xml: start tag with no name", new sliceType$24([]));
		}
		p.tags = $append(p.tags, start.Name);
		p.markPrefix();
		p.writeIndent(1);
		p.Writer.WriteByte(60);
		p.Writer.WriteString(start.Name.Local);
		if (!(start.Name.Space === "")) {
			p.Writer.WriteString(" xmlns=\"");
			p.EscapeString(start.Name.Space);
			p.Writer.WriteByte(34);
		}
		_ref = start.Attr;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
			name = $clone(attr.Name, Name);
			if (name.Local === "") {
				_i++;
				continue;
			}
			p.Writer.WriteByte(32);
			if (!(name.Space === "")) {
				p.Writer.WriteString(p.createAttrPrefix(name.Space));
				p.Writer.WriteByte(58);
			}
			p.Writer.WriteString(name.Local);
			p.Writer.WriteString("=\"");
			p.EscapeString(attr.Value);
			p.Writer.WriteByte(34);
			_i++;
		}
		p.Writer.WriteByte(62);
		return $ifaceNil;
	};
	printer.prototype.writeStart = function(start) { return this.$val.writeStart(start); };
	printer.ptr.prototype.writeEnd = function(name) {
		var name, p, top, x$1, x$2, x$3, x$4;
		p = this;
		name = $clone(name, Name);
		if (name.Local === "") {
			return fmt.Errorf("xml: end tag with no name", new sliceType$24([]));
		}
		if ((p.tags.$length === 0) || (x$1 = p.tags, x$2 = p.tags.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])).Local === "") {
			return fmt.Errorf("xml: end tag </%s> without start tag", new sliceType$24([new $String(name.Local)]));
		}
		top = $clone((x$3 = p.tags, x$4 = p.tags.$length - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])), Name);
		if (!($equal(top, name, Name))) {
			if (!(top.Local === name.Local)) {
				return fmt.Errorf("xml: end tag </%s> does not match start tag <%s>", new sliceType$24([new $String(name.Local), new $String(top.Local)]));
			}
			return fmt.Errorf("xml: end tag </%s> in namespace %s does not match start tag <%s> in namespace %s", new sliceType$24([new $String(name.Local), new $String(name.Space), new $String(top.Local), new $String(top.Space)]));
		}
		p.tags = $subslice(p.tags, 0, (p.tags.$length - 1 >> 0));
		p.writeIndent(-1);
		p.Writer.WriteByte(60);
		p.Writer.WriteByte(47);
		p.Writer.WriteString(name.Local);
		p.Writer.WriteByte(62);
		p.popPrefix();
		return $ifaceNil;
	};
	printer.prototype.writeEnd = function(name) { return this.$val.writeEnd(name); };
	printer.ptr.prototype.marshalSimple = function(typ, val) {
		var _ref, bytes$1, p, typ, val;
		p = this;
		val = val;
		_ref = val.Kind();
		switch (0) { default: if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return [strconv.FormatInt(val.Int(), 10), sliceType$28.nil, $ifaceNil];
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return [strconv.FormatUint(val.Uint(), 10), sliceType$28.nil, $ifaceNil];
		} else if (_ref === 13 || _ref === 14) {
			return [strconv.FormatFloat(val.Float(), 103, -1, val.Type().Bits()), sliceType$28.nil, $ifaceNil];
		} else if (_ref === 24) {
			return [val.String(), sliceType$28.nil, $ifaceNil];
		} else if (_ref === 1) {
			return [strconv.FormatBool(val.Bool()), sliceType$28.nil, $ifaceNil];
		} else if (_ref === 17) {
			if (!((typ.Elem().Kind() === 8))) {
				break;
			}
			bytes$1 = sliceType$29.nil;
			if (val.CanAddr()) {
				bytes$1 = val.Slice(0, val.Len()).Bytes();
			} else {
				bytes$1 = $makeSlice(sliceType$30, val.Len());
				reflect.Copy(reflect.ValueOf(bytes$1), val);
			}
			return ["", bytes$1, $ifaceNil];
		} else if (_ref === 23) {
			if (!((typ.Elem().Kind() === 8))) {
				break;
			}
			return ["", val.Bytes(), $ifaceNil];
		} }
		return ["", sliceType$28.nil, new UnsupportedTypeError.ptr(typ)];
	};
	printer.prototype.marshalSimple = function(typ, val) { return this.$val.marshalSimple(typ, val); };
	printer.ptr.prototype.marshalStruct = function(tinfo, val, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _i, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, _tuple$1, _tuple$2, b, dashDash, dashLast, data, data$1, elem, err, err$1, err$2, err$3, err$4, err$5, err$6, finfo, i, iface, k, ok, p, pv, raw, s, s$1, scratch, vf, x$1, x$2;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_marshalStruct = function() { s: while (true) { switch ($s) { case 0:
		p = $this;
		val = val;
		s = new parentStack.ptr(p, sliceType$31.nil);
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			finfo = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			/* */ if (!(((finfo.flags & 2) === 0))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(((finfo.flags & 2) === 0))) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			vf = finfo.value(val);
			_ref$1 = vf.Kind();
			if (_ref$1 === 22 || _ref$1 === 20) {
				if (!vf.IsNil()) {
					vf = vf.Elem();
				}
			}
			_ref$2 = finfo.flags & 63;
			/* */ if (_ref$2 === 4) { $s = 5; continue; }
			/* */ if (_ref$2 === 16) { $s = 6; continue; }
			/* */ if (_ref$2 === 8) { $s = 7; continue; }
			/* */ if (_ref$2 === 1 || _ref$2 === 33) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_ref$2 === 4) { */ case 5:
				/* */ if (vf.CanInterface() && vf.Type().Implements(textMarshalerType)) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (vf.CanInterface() && vf.Type().Implements(textMarshalerType)) { */ case 10:
					_tuple = $assertType(vf.Interface(), encoding.TextMarshaler).MarshalText(); data = _tuple[0]; err = _tuple[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return err;
					}
					Escape(p, data);
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 11:
				/* */ if (vf.CanAddr()) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (vf.CanAddr()) { */ case 12:
					pv = vf.Addr();
					if (pv.CanInterface() && pv.Type().Implements(textMarshalerType)) {
						_tuple$1 = $assertType(pv.Interface(), encoding.TextMarshaler).MarshalText(); data$1 = _tuple$1[0]; err$1 = _tuple$1[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							return err$1;
						}
						Escape(p, data$1);
						_i++;
						/* continue; */ $s = 1; continue;
					}
				/* } */ case 13:
				scratch = $clone(arrayType.zero(), arrayType);
				_ref$3 = vf.Kind();
				if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
					Escape(p, strconv.AppendInt($subslice(new sliceType$32(scratch), 0, 0), vf.Int(), 10));
				} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
					Escape(p, strconv.AppendUint($subslice(new sliceType$33(scratch), 0, 0), vf.Uint(), 10));
				} else if (_ref$3 === 13 || _ref$3 === 14) {
					Escape(p, strconv.AppendFloat($subslice(new sliceType$34(scratch), 0, 0), vf.Float(), 103, -1, vf.Type().Bits()));
				} else if (_ref$3 === 1) {
					Escape(p, strconv.AppendBool($subslice(new sliceType$35(scratch), 0, 0), vf.Bool()));
				} else if (_ref$3 === 24) {
					err$2 = EscapeText(p, new sliceType$36($stringToBytes(vf.String())));
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						return err$2;
					}
				} else if (_ref$3 === 23) {
					_tuple$2 = $assertType(vf.Interface(), sliceType$37, true); elem = _tuple$2[0]; ok = _tuple$2[1];
					if (ok) {
						err$3 = EscapeText(p, elem);
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							return err$3;
						}
					}
				}
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 9; continue;
			/* } else if (_ref$2 === 16) { */ case 6:
				k = vf.Kind();
				if (!((k === 24) || (k === 23) && (vf.Type().Elem().Kind() === 8))) {
					return fmt.Errorf("xml: bad type for comment field of %s", new sliceType$24([val.Type()]));
				}
				/* */ if (vf.Len() === 0) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (vf.Len() === 0) { */ case 14:
					_i++;
					/* continue; */ $s = 1; continue;
				/* } */ case 15:
				p.writeIndent(0);
				p.Writer.WriteString("<!--");
				dashDash = false;
				dashLast = false;
				_ref$4 = k;
				if (_ref$4 === 24) {
					s$1 = vf.String();
					dashDash = strings.Index(s$1, "--") >= 0;
					dashLast = s$1.charCodeAt((s$1.length - 1 >> 0)) === 45;
					if (!dashDash) {
						p.Writer.WriteString(s$1);
					}
				} else if (_ref$4 === 23) {
					b = vf.Bytes();
					dashDash = bytes.Index(b, ddBytes) >= 0;
					dashLast = (x$2 = b.$length - 1 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$2])) === 45;
					if (!dashDash) {
						p.Writer.Write(b);
					}
				} else {
					$panic(new $String("can't happen"));
				}
				if (dashDash) {
					return fmt.Errorf("xml: comments must not contain \"--\"", new sliceType$24([]));
				}
				if (dashLast) {
					p.Writer.WriteByte(32);
				}
				p.Writer.WriteString("-->");
				_i++;
				/* continue; */ $s = 1; continue;
				$s = 9; continue;
			/* } else if (_ref$2 === 8) { */ case 7:
				iface = vf.Interface();
				_ref$5 = iface;
				if ($assertType(_ref$5, sliceType$38, true)[1]) {
					raw = _ref$5.$val;
					p.Writer.Write(raw);
					_i++;
					/* continue; */ $s = 1; continue;
				} else if ($assertType(_ref$5, $String, true)[1]) {
					raw = _ref$5.$val;
					p.Writer.WriteString(raw);
					_i++;
					/* continue; */ $s = 1; continue;
				}
				$s = 9; continue;
			/* } else if (_ref$2 === 1 || _ref$2 === 33) { */ case 8:
				err$4 = s.trim(finfo.parents);
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					return err$4;
				}
				if (finfo.parents.$length > s.stack.$length) {
					if (!((vf.Kind() === 22)) && !((vf.Kind() === 20)) || !vf.IsNil()) {
						err$5 = s.push($subslice(finfo.parents, s.stack.$length));
						if (!($interfaceIsEqual(err$5, $ifaceNil))) {
							return err$5;
						}
					}
				}
			/* } */ case 9:
			_r = p.marshalValue(vf, finfo, ptrType$9.nil, $BLOCKING); /* */ $s = 16; case 16: if (_r && _r.$blocking) { _r = _r(); }
			err$6 = _r;
			/* */ if (!($interfaceIsEqual(err$6, $ifaceNil))) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (!($interfaceIsEqual(err$6, $ifaceNil))) { */ case 17:
				return err$6;
			/* } */ case 18:
			_i++;
		/* } */ $s = 1; continue; case 2:
		s.trim(sliceType$39.nil);
		return p.cachedWriteError();
		/* */ case -1: } return; } }; $blocking_marshalStruct.$blocking = true; return $blocking_marshalStruct;
	};
	printer.prototype.marshalStruct = function(tinfo, val, $b) { return this.$val.marshalStruct(tinfo, val, $b); };
	printer.ptr.prototype.cachedWriteError = function() {
		var _tuple, err, p;
		p = this;
		_tuple = p.Writer.Write(sliceType$25.nil); err = _tuple[1];
		return err;
	};
	printer.prototype.cachedWriteError = function() { return this.$val.cachedWriteError(); };
	printer.ptr.prototype.writeIndent = function(depthDelta) {
		var depthDelta, i, p;
		p = this;
		if ((p.prefix.length === 0) && (p.indent.length === 0)) {
			return;
		}
		if (depthDelta < 0) {
			p.depth = p.depth - (1) >> 0;
			if (p.indentedIn) {
				p.indentedIn = false;
				return;
			}
			p.indentedIn = false;
		}
		if (p.putNewline) {
			p.Writer.WriteByte(10);
		} else {
			p.putNewline = true;
		}
		if (p.prefix.length > 0) {
			p.Writer.WriteString(p.prefix);
		}
		if (p.indent.length > 0) {
			i = 0;
			while (true) {
				if (!(i < p.depth)) { break; }
				p.Writer.WriteString(p.indent);
				i = i + (1) >> 0;
			}
		}
		if (depthDelta > 0) {
			p.depth = p.depth + (1) >> 0;
			p.indentedIn = true;
		}
	};
	printer.prototype.writeIndent = function(depthDelta) { return this.$val.writeIndent(depthDelta); };
	parentStack.ptr.prototype.trim = function(parents) {
		var err, i, parents, s, split, x$1, x$2;
		s = this;
		split = 0;
		while (true) {
			if (!(split < parents.$length && split < s.stack.$length)) { break; }
			if (!(((split < 0 || split >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + split]) === (x$1 = s.stack, ((split < 0 || split >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + split])))) {
				break;
			}
			split = split + (1) >> 0;
		}
		i = s.stack.$length - 1 >> 0;
		while (true) {
			if (!(i >= split)) { break; }
			err = s.p.writeEnd(new Name.ptr("", (x$2 = s.stack, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i]))));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			i = i - (1) >> 0;
		}
		s.stack = $subslice(parents, 0, split);
		return $ifaceNil;
	};
	parentStack.prototype.trim = function(parents) { return this.$val.trim(parents); };
	parentStack.ptr.prototype.push = function(parents) {
		var err, i, parents, s;
		s = this;
		i = 0;
		while (true) {
			if (!(i < parents.$length)) { break; }
			err = s.p.writeStart(new StartElement.ptr(new Name.ptr("", ((i < 0 || i >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + i])), sliceType$40.nil));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			i = i + (1) >> 0;
		}
		s.stack = $appendSlice(s.stack, parents);
		return $ifaceNil;
	};
	parentStack.prototype.push = function(parents) { return this.$val.push(parents); };
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "xml: unsupported type: " + e.Type.String();
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	isEmptyValue = function(v) {
		var _ref, v, x$1, x$2;
		v = v;
		_ref = v.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			return v.Len() === 0;
		} else if (_ref === 1) {
			return !v.Bool();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return (x$1 = v.Int(), (x$1.$high === 0 && x$1.$low === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return (x$2 = v.Uint(), (x$2.$high === 0 && x$2.$low === 0));
		} else if (_ref === 13 || _ref === 14) {
			return v.Float() === 0;
		} else if (_ref === 20 || _ref === 22) {
			return v.IsNil();
		}
		return false;
	};
	Decoder.ptr.prototype.Decode = function(v, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _r, d;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_Decode = function() { s: while (true) { switch ($s) { case 0:
		d = $this;
		_r = d.DecodeElement(v, ptrType$14.nil, $BLOCKING); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		return _r;
		/* */ case -1: } return; } }; $blocking_Decode.$blocking = true; return $blocking_Decode;
	};
	Decoder.prototype.Decode = function(v, $b) { return this.$val.Decode(v, $b); };
	Decoder.ptr.prototype.DecodeElement = function(v, start, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _r, d, val;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_DecodeElement = function() { s: while (true) { switch ($s) { case 0:
		d = $this;
		val = reflect.ValueOf(v);
		if (!((val.Kind() === 22))) {
			return errors.New("non-pointer passed to Unmarshal");
		}
		_r = d.unmarshal(val.Elem(), start, $BLOCKING); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		return _r;
		/* */ case -1: } return; } }; $blocking_DecodeElement.$blocking = true; return $blocking_DecodeElement;
	};
	Decoder.prototype.DecodeElement = function(v, start, $b) { return this.$val.DecodeElement(v, start, $b); };
	UnmarshalError.prototype.Error = function() {
		var e;
		e = this.$val;
		return e;
	};
	$ptrType(UnmarshalError).prototype.Error = function() { return new UnmarshalError(this.$get()).Error(); };
	receiverType = function(val) {
		var t, val;
		t = reflect.TypeOf(val);
		if (!(t.Name() === "")) {
			return t.String();
		}
		return "(" + t.String() + ")";
	};
	Decoder.ptr.prototype.unmarshalInterface = function(val, start) {
		var err, p, start, val;
		p = this;
		p.pushEOF();
		p.unmarshalDepth = p.unmarshalDepth + (1) >> 0;
		err = val.UnmarshalXML(p, start);
		p.unmarshalDepth = p.unmarshalDepth - (1) >> 0;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			p.popEOF();
			return err;
		}
		if (!p.popEOF()) {
			return fmt.Errorf("xml: %s.UnmarshalXML did not consume entire <%s> element", new sliceType$24([new $String(receiverType(val)), new $String(start.Name.Local)]));
		}
		return $ifaceNil;
	};
	Decoder.prototype.unmarshalInterface = function(val, start) { return this.$val.unmarshalInterface(val, start); };
	Decoder.ptr.prototype.unmarshalTextInterface = function(val, start) {
		var _ref, _tuple, buf, depth, err, p, start, t, t$1, val;
		p = this;
		buf = sliceType$41.nil;
		depth = 1;
		while (true) {
			if (!(depth > 0)) { break; }
			_tuple = p.Token(); t = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_ref = t;
			if ($assertType(_ref, CharData, true)[1]) {
				t$1 = _ref.$val;
				if (depth === 1) {
					buf = $appendSlice(buf, t$1);
				}
			} else if ($assertType(_ref, StartElement, true)[1]) {
				t$1 = _ref.$val;
				depth = depth + (1) >> 0;
			} else if ($assertType(_ref, EndElement, true)[1]) {
				t$1 = _ref.$val;
				depth = depth - (1) >> 0;
			}
		}
		return val.UnmarshalText(buf);
	};
	Decoder.prototype.unmarshalTextInterface = function(val, start) { return this.$val.unmarshalTextInterface(val, start); };
	Decoder.ptr.prototype.unmarshalAttr = function(val, attr) {
		var attr, p, pv, pv$1, val;
		p = this;
		attr = $clone(attr, Attr);
		val = val;
		if (val.Kind() === 22) {
			if (val.IsNil()) {
				val.Set(reflect.New(val.Type().Elem()));
			}
			val = val.Elem();
		}
		if (val.CanInterface() && val.Type().Implements(unmarshalerAttrType)) {
			return $assertType(val.Interface(), UnmarshalerAttr).UnmarshalXMLAttr(attr);
		}
		if (val.CanAddr()) {
			pv = val.Addr();
			if (pv.CanInterface() && pv.Type().Implements(unmarshalerAttrType)) {
				return $assertType(pv.Interface(), UnmarshalerAttr).UnmarshalXMLAttr(attr);
			}
		}
		if (val.CanInterface() && val.Type().Implements(textUnmarshalerType)) {
			return $assertType(val.Interface(), encoding.TextUnmarshaler).UnmarshalText(new sliceType$42($stringToBytes(attr.Value)));
		}
		if (val.CanAddr()) {
			pv$1 = val.Addr();
			if (pv$1.CanInterface() && pv$1.Type().Implements(textUnmarshalerType)) {
				return $assertType(pv$1.Interface(), encoding.TextUnmarshaler).UnmarshalText(new sliceType$43($stringToBytes(attr.Value)));
			}
		}
		copyValue(val, new sliceType$44($stringToBytes(attr.Value)));
		return $ifaceNil;
	};
	Decoder.prototype.unmarshalAttr = function(val, attr) { return this.$val.unmarshalAttr(val, attr); };
	Decoder.ptr.prototype.unmarshal = function(val, start, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _i, _i$1, _r, _r$1, _r$2, _r$3, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, comment, consumed, data, e, e$1, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, finfo, finfo$1, fv, i, n, ncap, new$1, ok, ok$1, p, pv, pv$1, pv$2, saveAny, saveComment, saveData, saveXML, saveXMLData, saveXMLIndex, savedOffset, strv, sv, t, t$1, t$2, t$3, tinfo, tok, tok$1, typ, typ$1, v, x$1, x$2, x$3;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_unmarshal = function() { s: while (true) { switch ($s) { case 0:
		p = $this;
		val = val;
		if (start === ptrType$15.nil) {
			while (true) {
				_tuple = p.Token(); tok = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				_tuple$1 = $assertType(tok, StartElement, true); t = $clone(_tuple$1[0], StartElement); ok = _tuple$1[1];
				if (ok) {
					start = t;
					break;
				}
			}
		}
		if ((val.Kind() === 20) && !val.IsNil()) {
			e = val.Elem();
			if ((e.Kind() === 22) && !e.IsNil()) {
				val = e;
			}
		}
		if (val.Kind() === 22) {
			if (val.IsNil()) {
				val.Set(reflect.New(val.Type().Elem()));
			}
			val = val.Elem();
		}
		if (val.CanInterface() && val.Type().Implements(unmarshalerType)) {
			return p.unmarshalInterface($assertType(val.Interface(), Unmarshaler), start);
		}
		if (val.CanAddr()) {
			pv = val.Addr();
			if (pv.CanInterface() && pv.Type().Implements(unmarshalerType)) {
				return p.unmarshalInterface($assertType(pv.Interface(), Unmarshaler), start);
			}
		}
		if (val.CanInterface() && val.Type().Implements(textUnmarshalerType)) {
			return p.unmarshalTextInterface($assertType(val.Interface(), encoding.TextUnmarshaler), start);
		}
		if (val.CanAddr()) {
			pv$1 = val.Addr();
			if (pv$1.CanInterface() && pv$1.Type().Implements(textUnmarshalerType)) {
				return p.unmarshalTextInterface($assertType(pv$1.Interface(), encoding.TextUnmarshaler), start);
			}
		}
		data = sliceType$45.nil;
		saveData = new reflect.Value.ptr();
		comment = sliceType$46.nil;
		saveComment = new reflect.Value.ptr();
		saveXML = new reflect.Value.ptr();
		saveXMLIndex = 0;
		saveXMLData = sliceType$47.nil;
		saveAny = new reflect.Value.ptr();
		sv = new reflect.Value.ptr();
		tinfo = ptrType$16.nil;
		err$1 = $ifaceNil;
		v = val;
		_ref = v.Kind();
		/* */ if (_ref === 20) { $s = 1; continue; }
		/* */ if (_ref === 23) { $s = 2; continue; }
		/* */ if (_ref === 1 || _ref === 13 || _ref === 14 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 24) { $s = 3; continue; }
		/* */ if (_ref === 25) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* switch (0) { default: if (_ref === 20) { */ case 1:
			return p.Skip();
			$s = 6; continue;
		/* } else if (_ref === 23) { */ case 2:
			typ = v.Type();
			if (typ.Elem().Kind() === 8) {
				saveData = v;
				/* break; */ $s = 6; continue;
			}
			n = v.Len();
			if (n >= v.Cap()) {
				ncap = 2 * n >> 0;
				if (ncap < 4) {
					ncap = 4;
				}
				new$1 = reflect.MakeSlice(typ, n, ncap);
				reflect.Copy(new$1, v);
				v.Set(new$1);
			}
			v.SetLen(n + 1 >> 0);
			_r = p.unmarshal(v.Index(n), start, $BLOCKING); /* */ $s = 7; case 7: if (_r && _r.$blocking) { _r = _r(); }
			err$2 = _r;
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 8:
				v.SetLen(n);
				return err$2;
			/* } */ case 9:
			return $ifaceNil;
			$s = 6; continue;
		/* } else if (_ref === 1 || _ref === 13 || _ref === 14 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 24) { */ case 3:
			saveData = v;
			$s = 6; continue;
		/* } else if (_ref === 25) { */ case 4:
			typ$1 = v.Type();
			if ($interfaceIsEqual(typ$1, nameType)) {
				v.Set(reflect.ValueOf((x$1 = start.Name, new x$1.constructor.elem(x$1))));
				/* break; */ $s = 6; continue;
			}
			sv = v;
			_r$1 = getTypeInfo(typ$1, $BLOCKING); /* */ $s = 10; case 10: if (_r$1 && _r$1.$blocking) { _r$1 = _r$1(); }
			_tuple$2 = _r$1; tinfo = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			if (!(tinfo.xmlname === ptrType$10.nil)) {
				finfo = tinfo.xmlname;
				if (!(finfo.name === "") && !(finfo.name === start.Name.Local)) {
					return new UnmarshalError("expected element type <" + finfo.name + "> but have <" + start.Name.Local + ">");
				}
				if (!(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) {
					e$1 = "expected element <" + finfo.name + "> in name space " + finfo.xmlns + " but have ";
					if (start.Name.Space === "") {
						e$1 = e$1 + ("no name space");
					} else {
						e$1 = e$1 + (start.Name.Space);
					}
					return new UnmarshalError(e$1);
				}
				fv = finfo.value(sv);
				_tuple$3 = $assertType(fv.Interface(), Name, true); ok$1 = _tuple$3[1];
				if (ok$1) {
					fv.Set(reflect.ValueOf((x$2 = start.Name, new x$2.constructor.elem(x$2))));
				}
			}
			_ref$1 = tinfo.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				i = _i;
				finfo$1 = (x$3 = tinfo.fields, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i]));
				_ref$2 = finfo$1.flags & 63;
				if (_ref$2 === 2) {
					strv = finfo$1.value(sv);
					_ref$3 = start.Attr;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$3.$length)) { break; }
						a = $clone(((_i$1 < 0 || _i$1 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$1]), Attr);
						if (a.Name.Local === finfo$1.name && (finfo$1.xmlns === "" || finfo$1.xmlns === a.Name.Space)) {
							err$3 = p.unmarshalAttr(strv, a);
							if (!($interfaceIsEqual(err$3, $ifaceNil))) {
								return err$3;
							}
							break;
						}
						_i$1++;
					}
				} else if (_ref$2 === 4) {
					if (!saveData.IsValid()) {
						saveData = finfo$1.value(sv);
					}
				} else if (_ref$2 === 16) {
					if (!saveComment.IsValid()) {
						saveComment = finfo$1.value(sv);
					}
				} else if (_ref$2 === 32 || _ref$2 === 33) {
					if (!saveAny.IsValid()) {
						saveAny = finfo$1.value(sv);
					}
				} else if (_ref$2 === 8) {
					if (!saveXML.IsValid()) {
						saveXML = finfo$1.value(sv);
						if (p.saved === ptrType$17.nil) {
							saveXMLIndex = 0;
							p.saved = new bytes.Buffer.ptr();
						} else {
							saveXMLIndex = p.savedOffset();
						}
					}
				}
				_i++;
			}
			$s = 6; continue;
		/* } else { */ case 5:
			return errors.New("unknown type " + v.Type().String());
		/* } } */ case 6:
		/* while (true) { */ case 11:
			savedOffset = 0;
			if (saveXML.IsValid()) {
				savedOffset = p.savedOffset();
			}
			_tuple$4 = p.Token(); tok$1 = _tuple$4[0]; err$4 = _tuple$4[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				return err$4;
			}
			_ref$4 = tok$1;
			/* */ if ($assertType(_ref$4, StartElement, true)[1]) { $s = 13; continue; }
			/* */ if ($assertType(_ref$4, EndElement, true)[1]) { $s = 14; continue; }
			/* */ if ($assertType(_ref$4, CharData, true)[1]) { $s = 15; continue; }
			/* */ if ($assertType(_ref$4, Comment, true)[1]) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if ($assertType(_ref$4, StartElement, true)[1]) { */ case 13:
				t$1 = _ref$4.$val;
				consumed = false;
				/* */ if (sv.IsValid()) { $s = 18; continue; }
				/* */ $s = 19; continue;
				/* if (sv.IsValid()) { */ case 18:
					_r$2 = p.unmarshalPath(tinfo, sv, sliceType$48.nil, t$1, $BLOCKING); /* */ $s = 20; case 20: if (_r$2 && _r$2.$blocking) { _r$2 = _r$2(); }
					_tuple$5 = _r$2; consumed = _tuple$5[0]; err$4 = _tuple$5[1];
					if (!($interfaceIsEqual(err$4, $ifaceNil))) {
						return err$4;
					}
					/* */ if (!consumed && saveAny.IsValid()) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!consumed && saveAny.IsValid()) { */ case 21:
						consumed = true;
						_r$3 = p.unmarshal(saveAny, t$1, $BLOCKING); /* */ $s = 23; case 23: if (_r$3 && _r$3.$blocking) { _r$3 = _r$3(); }
						err$5 = _r$3;
						/* */ if (!($interfaceIsEqual(err$5, $ifaceNil))) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if (!($interfaceIsEqual(err$5, $ifaceNil))) { */ case 24:
							return err$5;
						/* } */ case 25:
					/* } */ case 22:
				/* } */ case 19:
				if (!consumed) {
					err$6 = p.Skip();
					if (!($interfaceIsEqual(err$6, $ifaceNil))) {
						return err$6;
					}
				}
				$s = 17; continue;
			/* } else if ($assertType(_ref$4, EndElement, true)[1]) { */ case 14:
				t$1 = _ref$4.$val;
				if (saveXML.IsValid()) {
					saveXMLData = $subslice(p.saved.Bytes(), saveXMLIndex, savedOffset);
					if (saveXMLIndex === 0) {
						p.saved = ptrType$17.nil;
					}
				}
				/* break Loop; */ $s = 12; continue s;
				$s = 17; continue;
			/* } else if ($assertType(_ref$4, CharData, true)[1]) { */ case 15:
				t$1 = _ref$4.$val;
				if (saveData.IsValid()) {
					data = $appendSlice(data, t$1);
				}
				$s = 17; continue;
			/* } else if ($assertType(_ref$4, Comment, true)[1]) { */ case 16:
				t$1 = _ref$4.$val;
				if (saveComment.IsValid()) {
					comment = $appendSlice(comment, t$1);
				}
			/* } */ case 17:
		/* } */ $s = 11; continue; case 12:
		if (saveData.IsValid() && saveData.CanInterface() && saveData.Type().Implements(textUnmarshalerType)) {
			err$7 = $assertType(saveData.Interface(), encoding.TextUnmarshaler).UnmarshalText(data);
			if (!($interfaceIsEqual(err$7, $ifaceNil))) {
				return err$7;
			}
			saveData = new reflect.Value.ptr(ptrType$18.nil, 0, 0);
		}
		if (saveData.IsValid() && saveData.CanAddr()) {
			pv$2 = saveData.Addr();
			if (pv$2.CanInterface() && pv$2.Type().Implements(textUnmarshalerType)) {
				err$8 = $assertType(pv$2.Interface(), encoding.TextUnmarshaler).UnmarshalText(data);
				if (!($interfaceIsEqual(err$8, $ifaceNil))) {
					return err$8;
				}
				saveData = new reflect.Value.ptr(ptrType$18.nil, 0, 0);
			}
		}
		err$9 = copyValue(saveData, data);
		if (!($interfaceIsEqual(err$9, $ifaceNil))) {
			return err$9;
		}
		t$2 = saveComment;
		_ref$5 = t$2.Kind();
		if (_ref$5 === 24) {
			t$2.SetString($bytesToString(comment));
		} else if (_ref$5 === 23) {
			t$2.Set(reflect.ValueOf(comment));
		}
		t$3 = saveXML;
		_ref$6 = t$3.Kind();
		if (_ref$6 === 24) {
			t$3.SetString($bytesToString(saveXMLData));
		} else if (_ref$6 === 23) {
			t$3.Set(reflect.ValueOf(saveXMLData));
		}
		return $ifaceNil;
		/* */ case -1: } return; } }; $blocking_unmarshal.$blocking = true; return $blocking_unmarshal;
	};
	Decoder.prototype.unmarshal = function(val, start, $b) { return this.$val.unmarshal(val, start, $b); };
	copyValue = function(dst, src) {
		var _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, dst, dst0, err = $ifaceNil, err$1, err$2, err$3, err$4, ftmp, itmp, src, utmp, value;
		dst = dst;
		dst0 = dst;
		if (dst.Kind() === 22) {
			if (dst.IsNil()) {
				dst.Set(reflect.New(dst.Type().Elem()));
			}
			dst = dst.Elem();
		}
		_ref = dst.Kind();
		if (_ref === 0) {
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_tuple = strconv.ParseInt($bytesToString(src), 10, dst.Type().Bits()); itmp = _tuple[0]; err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			}
			dst.SetInt(itmp);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_tuple$1 = strconv.ParseUint($bytesToString(src), 10, dst.Type().Bits()); utmp = _tuple$1[0]; err$2 = _tuple$1[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				err = err$2;
				return err;
			}
			dst.SetUint(utmp);
		} else if (_ref === 13 || _ref === 14) {
			_tuple$2 = strconv.ParseFloat($bytesToString(src), dst.Type().Bits()); ftmp = _tuple$2[0]; err$3 = _tuple$2[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				err = err$3;
				return err;
			}
			dst.SetFloat(ftmp);
		} else if (_ref === 1) {
			_tuple$3 = strconv.ParseBool(strings.TrimSpace($bytesToString(src))); value = _tuple$3[0]; err$4 = _tuple$3[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				err = err$4;
				return err;
			}
			dst.SetBool(value);
		} else if (_ref === 24) {
			dst.SetString($bytesToString(src));
		} else if (_ref === 23) {
			if (src.$length === 0) {
				src = new sliceType$49([]);
			}
			dst.SetBytes(src);
		} else {
			err = errors.New("cannot unmarshal into " + dst0.Type().String());
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	Decoder.ptr.prototype.unmarshalPath = function(tinfo, sv, parents, start, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _i, _i$1, _r, _r$1, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, consumed = false, consumed2, err = $ifaceNil, err$1, err$2, finfo, i, j, p, recurse, t, tok, x$1, x$2, x$3, x$4;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_unmarshalPath = function() { s: while (true) { switch ($s) { case 0:
		p = $this;
		sv = sv;
		recurse = false;
		_ref = tinfo.fields;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			finfo = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			/* */ if (((finfo.flags & 1) === 0) || finfo.parents.$length < parents.$length || !(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((finfo.flags & 1) === 0) || finfo.parents.$length < parents.$length || !(finfo.xmlns === "") && !(finfo.xmlns === start.Name.Space)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_ref$1 = parents;
			_i$1 = 0;
			/* while (true) { */ case 5:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 6; continue; }
				j = _i$1;
				if (!(((j < 0 || j >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + j]) === (x$2 = finfo.parents, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])))) {
					_i++;
					/* continue Loop; */ $s = 1; continue s;
				}
				_i$1++;
			/* } */ $s = 5; continue; case 6:
			/* */ if ((finfo.parents.$length === parents.$length) && finfo.name === start.Name.Local) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((finfo.parents.$length === parents.$length) && finfo.name === start.Name.Local) { */ case 7:
				_r = p.unmarshal(finfo.value(sv), start, $BLOCKING); /* */ $s = 9; case 9: if (_r && _r.$blocking) { _r = _r(); }
				_tmp = true; _tmp$1 = _r; consumed = _tmp; err = _tmp$1;
				return [consumed, err];
			/* } */ case 8:
			if (finfo.parents.$length > parents.$length && (x$3 = finfo.parents, x$4 = parents.$length, ((x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4])) === start.Name.Local) {
				recurse = true;
				parents = $subslice(finfo.parents, 0, (parents.$length + 1 >> 0));
				/* break; */ $s = 2; continue;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (!recurse) {
			_tmp$2 = false; _tmp$3 = $ifaceNil; consumed = _tmp$2; err = _tmp$3;
			return [consumed, err];
		}
		/* while (true) { */ case 10:
			tok = $ifaceNil;
			_tuple = p.Token(); tok = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = true; _tmp$5 = err; consumed = _tmp$4; err = _tmp$5;
				return [consumed, err];
			}
			_ref$2 = tok;
			/* */ if ($assertType(_ref$2, StartElement, true)[1]) { $s = 12; continue; }
			/* */ if ($assertType(_ref$2, EndElement, true)[1]) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ($assertType(_ref$2, StartElement, true)[1]) { */ case 12:
				t = _ref$2.$val;
				_r$1 = p.unmarshalPath(tinfo, sv, parents, t, $BLOCKING); /* */ $s = 15; case 15: if (_r$1 && _r$1.$blocking) { _r$1 = _r$1(); }
				_tuple$1 = _r$1; consumed2 = _tuple$1[0]; err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$6 = true; _tmp$7 = err$1; consumed = _tmp$6; err = _tmp$7;
					return [consumed, err];
				}
				if (!consumed2) {
					err$2 = p.Skip();
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						_tmp$8 = true; _tmp$9 = err$2; consumed = _tmp$8; err = _tmp$9;
						return [consumed, err];
					}
				}
				$s = 14; continue;
			/* } else if ($assertType(_ref$2, EndElement, true)[1]) { */ case 13:
				t = _ref$2.$val;
				_tmp$10 = true; _tmp$11 = $ifaceNil; consumed = _tmp$10; err = _tmp$11;
				return [consumed, err];
			/* } */ case 14:
		/* } */ $s = 10; continue; case 11:
		/* */ case -1: } return; } }; $blocking_unmarshalPath.$blocking = true; return $blocking_unmarshalPath;
	};
	Decoder.prototype.unmarshalPath = function(tinfo, sv, parents, start, $b) { return this.$val.unmarshalPath(tinfo, sv, parents, start, $b); };
	Decoder.ptr.prototype.Skip = function() {
		var _ref, _tuple, d, err, err$1, tok;
		d = this;
		while (true) {
			_tuple = d.Token(); tok = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_ref = tok;
			if ($assertType(_ref, StartElement, true)[1]) {
				err$1 = d.Skip();
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return err$1;
				}
			} else if ($assertType(_ref, EndElement, true)[1]) {
				return $ifaceNil;
			}
		}
	};
	Decoder.prototype.Skip = function() { return this.$val.Skip(); };
	getTypeInfo = function(typ, $b) {
		var $args = arguments, $r, $s = 0, $this = this, _entry, _i, _key$2, _r, _ref, _tuple, _tuple$1, _tuple$2, err, err$1, err$2, err$3, f, finfo, finfo$1, i, inner, n, ok, t, tinfo;
		/* */ if($b !== $BLOCKING) { $nonblockingCall(); }; var $blocking_getTypeInfo = function() { s: while (true) { switch ($s) { case 0:
		$r = tinfoLock.RLock($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		_tuple = (_entry = tinfoMap[typ.$key()], _entry !== undefined ? [_entry.v, true] : [ptrType$19.nil, false]); tinfo = _tuple[0]; ok = _tuple[1];
		$r = tinfoLock.RUnlock($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		if (ok) {
			return [tinfo, $ifaceNil];
		}
		tinfo = new typeInfo.ptr(ptrType$10.nil, sliceType$50.nil);
		/* */ if ((typ.Kind() === 25) && !($interfaceIsEqual(typ, nameType))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ((typ.Kind() === 25) && !($interfaceIsEqual(typ, nameType))) { */ case 3:
			n = typ.NumField();
			i = 0;
			/* while (true) { */ case 5:
				/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 6; continue; }
				f = $clone(typ.Field(i), reflect.StructField);
				/* */ if (!(f.PkgPath === "") || new reflect.StructTag(f.Tag).Get("xml") === "-") { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!(f.PkgPath === "") || new reflect.StructTag(f.Tag).Get("xml") === "-") { */ case 7:
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				/* } */ case 8:
				/* */ if (f.Anonymous) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (f.Anonymous) { */ case 9:
					t = f.Type;
					if (t.Kind() === 22) {
						t = t.Elem();
					}
					/* */ if (t.Kind() === 25) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (t.Kind() === 25) { */ case 11:
						_r = getTypeInfo(t, $BLOCKING); /* */ $s = 13; case 13: if (_r && _r.$blocking) { _r = _r(); }
						_tuple$1 = _r; inner = _tuple$1[0]; err = _tuple$1[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							return [ptrType$20.nil, err];
						}
						if (tinfo.xmlname === ptrType$10.nil) {
							tinfo.xmlname = inner.xmlname;
						}
						_ref = inner.fields;
						_i = 0;
						while (true) {
							if (!(_i < _ref.$length)) { break; }
							finfo = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldInfo);
							finfo.idx = $appendSlice(new sliceType$51([i]), finfo.idx);
							err$1 = addFieldInfo(typ, tinfo, finfo);
							if (!($interfaceIsEqual(err$1, $ifaceNil))) {
								return [ptrType$20.nil, err$1];
							}
							_i++;
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 5; continue;
					/* } */ case 12:
				/* } */ case 10:
				_tuple$2 = structFieldInfo(typ, f); finfo$1 = _tuple$2[0]; err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return [ptrType$20.nil, err$2];
				}
				if (f.Name === "XMLName") {
					tinfo.xmlname = finfo$1;
					i = i + (1) >> 0;
					/* continue; */ $s = 5; continue;
				}
				err$3 = addFieldInfo(typ, tinfo, finfo$1);
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					return [ptrType$20.nil, err$3];
				}
				i = i + (1) >> 0;
			/* } */ $s = 5; continue; case 6:
		/* } */ case 4:
		$r = tinfoLock.Lock($BLOCKING); /* */ $s = 14; case 14: if ($r && $r.$blocking) { $r = $r(); }
		_key$2 = typ; (tinfoMap || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: tinfo };
		$r = tinfoLock.Unlock($BLOCKING); /* */ $s = 15; case 15: if ($r && $r.$blocking) { $r = $r(); }
		return [tinfo, $ifaceNil];
		/* */ case -1: } return; } }; $blocking_getTypeInfo.$blocking = true; return $blocking_getTypeInfo;
	};
	structFieldInfo = function(typ, f) {
		var _i, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, f, finfo, flag, ftyp, i, mode, parents, tag, tokens, typ, valid, x$1, x$2, xmlname, xmlname$1;
		finfo = new fieldInfo.ptr(f.Index, "", "", 0, sliceType$53.nil);
		tag = new reflect.StructTag(f.Tag).Get("xml");
		i = strings.Index(tag, " ");
		if (i >= 0) {
			_tmp = tag.substring(0, i); _tmp$1 = tag.substring((i + 1 >> 0)); finfo.xmlns = _tmp; tag = _tmp$1;
		}
		tokens = strings.Split(tag, ",");
		if (tokens.$length === 1) {
			finfo.flags = 1;
		} else {
			tag = (0 >= tokens.$length ? $throwRuntimeError("index out of range") : tokens.$array[tokens.$offset + 0]);
			_ref = $subslice(tokens, 1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_ref$1 = flag;
				if (_ref$1 === "attr") {
					finfo.flags = finfo.flags | (2);
				} else if (_ref$1 === "chardata") {
					finfo.flags = finfo.flags | (4);
				} else if (_ref$1 === "innerxml") {
					finfo.flags = finfo.flags | (8);
				} else if (_ref$1 === "comment") {
					finfo.flags = finfo.flags | (16);
				} else if (_ref$1 === "any") {
					finfo.flags = finfo.flags | (32);
				} else if (_ref$1 === "omitempty") {
					finfo.flags = finfo.flags | (64);
				}
				_i++;
			}
			valid = true;
			mode = finfo.flags & 63;
			_ref$2 = mode;
			if (_ref$2 === 0) {
				finfo.flags = finfo.flags | (1);
			} else if (_ref$2 === 2 || _ref$2 === 4 || _ref$2 === 8 || _ref$2 === 16 || _ref$2 === 32) {
				if (f.Name === "XMLName" || !(tag === "") && !((mode === 2))) {
					valid = false;
				}
			} else {
				valid = false;
			}
			if ((finfo.flags & 63) === 32) {
				finfo.flags = finfo.flags | (1);
			}
			if (!(((finfo.flags & 64) === 0)) && ((finfo.flags & 3) === 0)) {
				valid = false;
			}
			if (!valid) {
				return [ptrType$21.nil, fmt.Errorf("xml: invalid tag in field %s of type %s: %q", new sliceType$24([new $String(f.Name), typ, new $String(new reflect.StructTag(f.Tag).Get("xml"))]))];
			}
		}
		if (!(finfo.xmlns === "") && tag === "") {
			return [ptrType$21.nil, fmt.Errorf("xml: namespace without name in field %s of type %s: %q", new sliceType$24([new $String(f.Name), typ, new $String(new reflect.StructTag(f.Tag).Get("xml"))]))];
		}
		if (f.Name === "XMLName") {
			finfo.name = tag;
			return [finfo, $ifaceNil];
		}
		if (tag === "") {
			xmlname = lookupXMLName(f.Type);
			if (!(xmlname === ptrType$22.nil)) {
				_tmp$2 = xmlname.xmlns; _tmp$3 = xmlname.name; finfo.xmlns = _tmp$2; finfo.name = _tmp$3;
			} else {
				finfo.name = f.Name;
			}
			return [finfo, $ifaceNil];
		}
		parents = strings.Split(tag, ">");
		if ((0 >= parents.$length ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + 0]) === "") {
			(0 >= parents.$length ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + 0] = f.Name);
		}
		if ((x$1 = parents.$length - 1 >> 0, ((x$1 < 0 || x$1 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$1])) === "") {
			return [ptrType$21.nil, fmt.Errorf("xml: trailing '>' in field %s of type %s", new sliceType$24([new $String(f.Name), typ]))];
		}
		finfo.name = (x$2 = parents.$length - 1 >> 0, ((x$2 < 0 || x$2 >= parents.$length) ? $throwRuntimeError("index out of range") : parents.$array[parents.$offset + x$2]));
		if (parents.$length > 1) {
			if (((finfo.flags & 1)) === 0) {
				return [ptrType$21.nil, fmt.Errorf("xml: %s chain not valid with %s flag", new sliceType$24([new $String(tag), new $String(strings.Join($subslice(tokens, 1), ","))]))];
			}
			finfo.parents = $subslice(parents, 0, (parents.$length - 1 >> 0));
		}
		if (!(((finfo.flags & 1) === 0))) {
			ftyp = f.Type;
			xmlname$1 = lookupXMLName(ftyp);
			if (!(xmlname$1 === ptrType$22.nil) && !(xmlname$1.name === finfo.name)) {
				return [ptrType$21.nil, fmt.Errorf("xml: name %q in tag of %s.%s conflicts with name %q in %s.XMLName", new sliceType$24([new $String(finfo.name), typ, new $String(f.Name), new $String(xmlname$1.name), ftyp]))];
			}
		}
		return [finfo, $ifaceNil];
	};
	lookupXMLName = function(typ) {
		var _tmp, _tmp$1, _tuple, err, f, finfo, i, n, typ, xmlname = ptrType$22.nil;
		while (true) {
			if (!(typ.Kind() === 22)) { break; }
			typ = typ.Elem();
		}
		if (!((typ.Kind() === 25))) {
			xmlname = ptrType$22.nil;
			return xmlname;
		}
		_tmp = 0; _tmp$1 = typ.NumField(); i = _tmp; n = _tmp$1;
		while (true) {
			if (!(i < n)) { break; }
			f = $clone(typ.Field(i), reflect.StructField);
			if (!(f.Name === "XMLName")) {
				i = i + (1) >> 0;
				continue;
			}
			_tuple = structFieldInfo(typ, f); finfo = _tuple[0]; err = _tuple[1];
			if (!(finfo.name === "") && $interfaceIsEqual(err, $ifaceNil)) {
				xmlname = finfo;
				return xmlname;
			}
			break;
		}
		xmlname = ptrType$22.nil;
		return xmlname;
	};
	min = function(a, b) {
		var a, b;
		if (a <= b) {
			return a;
		}
		return b;
	};
	addFieldInfo = function(typ, tinfo, newf) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, c, conflicts, f1, f2, i, i$1, i$2, i$3, minl, newf, oldf, oldf$1, p, tinfo, typ, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		conflicts = sliceType$54.nil;
		_ref = tinfo.fields;
		_i = 0;
		Loop:
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			oldf = (x$1 = tinfo.fields, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!(((oldf.flags & 63) === (newf.flags & 63)))) {
				_i++;
				continue;
			}
			if (!(oldf.xmlns === "") && !(newf.xmlns === "") && !(oldf.xmlns === newf.xmlns)) {
				_i++;
				continue;
			}
			minl = min(newf.parents.$length, oldf.parents.$length);
			p = 0;
			while (true) {
				if (!(p < minl)) { break; }
				if (!((x$2 = oldf.parents, ((p < 0 || p >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + p])) === (x$3 = newf.parents, ((p < 0 || p >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + p])))) {
					_i++;
					continue Loop;
				}
				p = p + (1) >> 0;
			}
			if (oldf.parents.$length > newf.parents.$length) {
				if ((x$4 = oldf.parents, x$5 = newf.parents.$length, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === newf.name) {
					conflicts = $append(conflicts, i);
				}
			} else if (oldf.parents.$length < newf.parents.$length) {
				if ((x$6 = newf.parents, x$7 = oldf.parents.$length, ((x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7])) === oldf.name) {
					conflicts = $append(conflicts, i);
				}
			} else {
				if (newf.name === oldf.name) {
					conflicts = $append(conflicts, i);
				}
			}
			_i++;
		}
		if (conflicts === sliceType$54.nil) {
			tinfo.fields = $append(tinfo.fields, newf);
			return $ifaceNil;
		}
		_ref$1 = conflicts;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if ((x$8 = tinfo.fields, ((i$1 < 0 || i$1 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + i$1])).idx.$length < newf.idx.$length) {
				return $ifaceNil;
			}
			_i$1++;
		}
		_ref$2 = conflicts;
		_i$2 = 0;
		while (true) {
			if (!(_i$2 < _ref$2.$length)) { break; }
			i$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			oldf$1 = (x$9 = tinfo.fields, ((i$2 < 0 || i$2 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i$2]));
			if (oldf$1.idx.$length === newf.idx.$length) {
				f1 = $clone(typ.FieldByIndex(oldf$1.idx), reflect.StructField);
				f2 = $clone(typ.FieldByIndex(newf.idx), reflect.StructField);
				return new TagPathError.ptr(typ, f1.Name, new reflect.StructTag(f1.Tag).Get("xml"), f2.Name, new reflect.StructTag(f2.Tag).Get("xml"));
			}
			_i$2++;
		}
		c = conflicts.$length - 1 >> 0;
		while (true) {
			if (!(c >= 0)) { break; }
			i$3 = ((c < 0 || c >= conflicts.$length) ? $throwRuntimeError("index out of range") : conflicts.$array[conflicts.$offset + c]);
			$copySlice($subslice(tinfo.fields, i$3), $subslice(tinfo.fields, (i$3 + 1 >> 0)));
			tinfo.fields = $subslice(tinfo.fields, 0, (tinfo.fields.$length - 1 >> 0));
			c = c - (1) >> 0;
		}
		tinfo.fields = $append(tinfo.fields, newf);
		return $ifaceNil;
	};
	TagPathError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return fmt.Sprintf("%s field %q with tag %q conflicts with field %q with tag %q", new sliceType$55([e.Struct, new $String(e.Field1), new $String(e.Tag1), new $String(e.Field2), new $String(e.Tag2)]));
	};
	TagPathError.prototype.Error = function() { return this.$val.Error(); };
	fieldInfo.ptr.prototype.value = function(v) {
		var _i, _ref, finfo, i, t, v, x$1;
		finfo = this;
		v = v;
		_ref = finfo.idx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			x$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				t = v.Type();
				if ((t.Kind() === 22) && (t.Elem().Kind() === 25)) {
					if (v.IsNil()) {
						v.Set(reflect.New(v.Type().Elem()));
					}
					v = v.Elem();
				}
			}
			v = v.Field(x$1);
			_i++;
		}
		return v;
	};
	fieldInfo.prototype.value = function(v) { return this.$val.value(v); };
	SyntaxError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "XML syntax error on line " + strconv.Itoa(e.Line) + ": " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	StartElement.ptr.prototype.Copy = function() {
		var attrs, e;
		e = $clone(this, StartElement);
		attrs = $makeSlice(sliceType$56, e.Attr.$length);
		$copySlice(attrs, e.Attr);
		e.Attr = attrs;
		return e;
	};
	StartElement.prototype.Copy = function() { return this.$val.Copy(); };
	StartElement.ptr.prototype.End = function() {
		var e;
		e = $clone(this, StartElement);
		return new EndElement.ptr($clone(e.Name, Name));
	};
	StartElement.prototype.End = function() { return this.$val.End(); };
	makeCopy = function(b) {
		var b, b1;
		b1 = $makeSlice(sliceType$57, b.$length);
		$copySlice(b1, b);
		return b1;
	};
	CharData.prototype.Copy = function() {
		var c, x$1;
		c = this;
		return (x$1 = makeCopy($subslice(new sliceType$58(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new CharData(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(CharData).prototype.Copy = function() { return this.$get().Copy(); };
	Comment.prototype.Copy = function() {
		var c, x$1;
		c = this;
		return (x$1 = makeCopy($subslice(new sliceType$58(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new Comment(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(Comment).prototype.Copy = function() { return this.$get().Copy(); };
	ProcInst.ptr.prototype.Copy = function() {
		var p;
		p = $clone(this, ProcInst);
		p.Inst = makeCopy(p.Inst);
		return p;
	};
	ProcInst.prototype.Copy = function() { return this.$val.Copy(); };
	Directive.prototype.Copy = function() {
		var d, x$1;
		d = this;
		return (x$1 = makeCopy($subslice(new sliceType$58(d.$array), d.$offset, d.$offset + d.$length)), $subslice(new Directive(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	$ptrType(Directive).prototype.Copy = function() { return this.$get().Copy(); };
	NewDecoder = $pkg.NewDecoder = function(r) {
		var d, r;
		d = new Decoder.ptr(true, sliceType$59.nil, false, $throwNilPointerError, "", $ifaceNil, new bytes.Buffer.ptr(), ptrType$17.nil, ptrType$23.nil, ptrType$24.nil, false, new Name.ptr(), $ifaceNil, -1, new $Map(), $ifaceNil, 1, new $Int64(0, 0), 0);
		d.switchToReader(r);
		return d;
	};
	Decoder.ptr.prototype.Token = function() {
		var _entry, _entry$1, _i, _i$1, _key$2, _key$3, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, a, d, err = $ifaceNil, i, ok, ok$1, ok$2, t = $ifaceNil, t1, t1$1, v, v$1, x$1;
		d = this;
		if (!(d.stk === ptrType$23.nil) && (d.stk.kind === 2)) {
			err = io.EOF;
			return [t, err];
		}
		if (!($interfaceIsEqual(d.nextToken, $ifaceNil))) {
			t = d.nextToken;
			d.nextToken = $ifaceNil;
		} else {
			_tuple = d.rawToken(); t = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [t, err];
			}
		}
		if (!d.Strict) {
			_tuple$1 = d.autoClose(t); t1 = _tuple$1[0]; ok = _tuple$1[1];
			if (ok) {
				d.nextToken = t;
				t = t1;
			}
		}
		_ref = t;
		if ($assertType(_ref, StartElement, true)[1]) {
			t1$1 = _ref.$val;
			_ref$1 = t1$1.Attr;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				a = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), Attr);
				if (a.Name.Space === "xmlns") {
					_tuple$2 = (_entry = d.ns[a.Name.Local], _entry !== undefined ? [_entry.v, true] : ["", false]); v = _tuple$2[0]; ok$1 = _tuple$2[1];
					d.pushNs(a.Name.Local, v, ok$1);
					_key$2 = a.Name.Local; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: a.Value };
				}
				if (a.Name.Space === "" && a.Name.Local === "xmlns") {
					_tuple$3 = (_entry$1 = d.ns[""], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]); v$1 = _tuple$3[0]; ok$2 = _tuple$3[1];
					d.pushNs("", v$1, ok$2);
					_key$3 = ""; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: a.Value };
				}
				_i++;
			}
			d.translate(t1$1.Name, true);
			_ref$2 = t1$1.Attr;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$2.$length)) { break; }
				i = _i$1;
				d.translate((x$1 = t1$1.Attr, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Name, false);
				_i$1++;
			}
			d.pushElement(t1$1.Name);
			t = new t1$1.constructor.elem(t1$1);
		} else if ($assertType(_ref, EndElement, true)[1]) {
			t1$1 = _ref.$val;
			d.translate(t1$1.Name, true);
			if (!d.popElement(t1$1)) {
				_tmp = $ifaceNil; _tmp$1 = d.err; t = _tmp; err = _tmp$1;
				return [t, err];
			}
			t = new t1$1.constructor.elem(t1$1);
		}
		return [t, err];
	};
	Decoder.prototype.Token = function() { return this.$val.Token(); };
	Decoder.ptr.prototype.translate = function(n, isElementName) {
		var _entry, _tuple, d, isElementName, n, ok, v;
		d = this;
		if (n.Space === "xmlns") {
			return;
		} else if (n.Space === "" && !isElementName) {
			return;
		} else if (n.Space === "xml") {
			n.Space = "http://www.w3.org/XML/1998/namespace";
		} else if (n.Space === "" && n.Local === "xmlns") {
			return;
		}
		_tuple = (_entry = d.ns[n.Space], _entry !== undefined ? [_entry.v, true] : ["", false]); v = _tuple[0]; ok = _tuple[1];
		if (ok) {
			n.Space = v;
		} else if (n.Space === "") {
			n.Space = d.DefaultSpace;
		}
	};
	Decoder.prototype.translate = function(n, isElementName) { return this.$val.translate(n, isElementName); };
	Decoder.ptr.prototype.switchToReader = function(r) {
		var _tuple, d, ok, r, rb;
		d = this;
		_tuple = $assertType(r, io.ByteReader, true); rb = _tuple[0]; ok = _tuple[1];
		if (ok) {
			d.r = rb;
		} else {
			d.r = bufio.NewReader(r);
		}
	};
	Decoder.prototype.switchToReader = function(r) { return this.$val.switchToReader(r); };
	Decoder.ptr.prototype.push = function(kind) {
		var d, kind, s;
		d = this;
		s = d.free;
		if (!(s === ptrType$24.nil)) {
			d.free = s.next;
		} else {
			s = new stack.ptr();
		}
		s.next = d.stk;
		s.kind = kind;
		d.stk = s;
		return s;
	};
	Decoder.prototype.push = function(kind) { return this.$val.push(kind); };
	Decoder.ptr.prototype.pop = function() {
		var d, s;
		d = this;
		s = d.stk;
		if (!(s === ptrType$23.nil)) {
			d.stk = s.next;
			s.next = d.free;
			d.free = s;
		}
		return s;
	};
	Decoder.prototype.pop = function() { return this.$val.pop(); };
	Decoder.ptr.prototype.pushEOF = function() {
		var d, s, start;
		d = this;
		start = d.stk;
		while (true) {
			if (!(!((start.kind === 0)))) { break; }
			start = start.next;
		}
		while (true) {
			if (!(!(start.next === ptrType$25.nil) && (start.next.kind === 1))) { break; }
			start = start.next;
		}
		s = d.free;
		if (!(s === ptrType$24.nil)) {
			d.free = s.next;
		} else {
			s = new stack.ptr();
		}
		s.kind = 2;
		s.next = start.next;
		start.next = s;
	};
	Decoder.prototype.pushEOF = function() { return this.$val.pushEOF(); };
	Decoder.ptr.prototype.popEOF = function() {
		var d;
		d = this;
		if (d.stk === ptrType$23.nil || !((d.stk.kind === 2))) {
			return false;
		}
		d.pop();
		return true;
	};
	Decoder.prototype.popEOF = function() { return this.$val.popEOF(); };
	Decoder.ptr.prototype.pushElement = function(name) {
		var d, name, s;
		d = this;
		name = $clone(name, Name);
		s = d.push(0);
		$copy(s.name, name, Name);
	};
	Decoder.prototype.pushElement = function(name) { return this.$val.pushElement(name); };
	Decoder.ptr.prototype.pushNs = function(local, url, ok) {
		var d, local, ok, s, url;
		d = this;
		s = d.push(1);
		s.name.Local = local;
		s.name.Space = url;
		s.ok = ok;
	};
	Decoder.prototype.pushNs = function(local, url, ok) { return this.$val.pushNs(local, url, ok); };
	Decoder.ptr.prototype.syntaxError = function(msg) {
		var d, msg;
		d = this;
		return new SyntaxError.ptr(msg, d.line);
	};
	Decoder.prototype.syntaxError = function(msg) { return this.$val.syntaxError(msg); };
	Decoder.ptr.prototype.popElement = function(t) {
		var _key$2, d, name, s, s$1, t;
		d = this;
		s = d.pop();
		name = $clone(t.Name, Name);
		if (s === ptrType$26.nil || !((s.kind === 0))) {
			d.err = d.syntaxError("unexpected end element </" + name.Local + ">");
			return false;
		} else if (!(s.name.Local === name.Local)) {
			if (!d.Strict) {
				d.needClose = true;
				$copy(d.toClose, t.Name, Name);
				$copy(t.Name, s.name, Name);
				return true;
			}
			d.err = d.syntaxError("element <" + s.name.Local + "> closed by </" + name.Local + ">");
			return false;
		} else if (!(s.name.Space === name.Space)) {
			d.err = d.syntaxError("element <" + s.name.Local + "> in space " + s.name.Space + "closed by </" + name.Local + "> in space " + name.Space);
			return false;
		}
		while (true) {
			if (!(!(d.stk === ptrType$23.nil) && !((d.stk.kind === 0)) && !((d.stk.kind === 2)))) { break; }
			s$1 = d.pop();
			if (s$1.ok) {
				_key$2 = s$1.name.Local; (d.ns || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: s$1.name.Space };
			} else {
				delete d.ns[s$1.name.Local];
			}
		}
		return true;
	};
	Decoder.prototype.popElement = function(t) { return this.$val.popElement(t); };
	Decoder.ptr.prototype.autoClose = function(t) {
		var _i, _ref, _tuple, d, et, name, ok, s, t, x$1;
		d = this;
		if (d.stk === ptrType$23.nil || !((d.stk.kind === 0))) {
			return [$ifaceNil, false];
		}
		name = strings.ToLower(d.stk.name.Local);
		_ref = d.AutoClose;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (strings.ToLower(s) === name) {
				_tuple = $assertType(t, EndElement, true); et = $clone(_tuple[0], EndElement); ok = _tuple[1];
				if (!ok || !(et.Name.Local === name)) {
					return [(x$1 = new EndElement.ptr($clone(d.stk.name, Name)), new x$1.constructor.elem(x$1)), true];
				}
				break;
			}
			_i++;
		}
		return [$ifaceNil, false];
	};
	Decoder.prototype.autoClose = function(t) { return this.$val.autoClose(t); };
	Decoder.ptr.prototype.RawToken = function() {
		var d;
		d = this;
		if (d.unmarshalDepth > 0) {
			return [$ifaceNil, errRawToken];
		}
		return d.rawToken();
	};
	Decoder.prototype.RawToken = function() { return this.$val.RawToken(); };
	Decoder.ptr.prototype.rawToken = function() {
		var $args = arguments, $s = 0, $this = this, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, a, attr, b, b0, b0$1, b0$2, b1, b1$1, d, data, data$1, data$2, data$3, data$4, depth, empty, enc, err, i, i$1, inquote, j, n, name, name$1, nattr, newr, ok, s, target, x$1, x$2, x$3, x$4, x$5;
		/* */ s: while (true) { switch ($s) { case 0:
		d = $this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			return [$ifaceNil, d.err];
		}
		if (d.needClose) {
			d.needClose = false;
			return [(x$1 = new EndElement.ptr($clone(d.toClose, Name)), new x$1.constructor.elem(x$1)), $ifaceNil];
		}
		_tuple = d.getc(); b = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return [$ifaceNil, d.err];
		}
		if (!((b === 60))) {
			d.ungetc(b);
			data = d.text(-1, false);
			if (data === sliceType$60.nil) {
				return [$ifaceNil, d.err];
			}
			return [$subslice(new CharData(data.$array), data.$offset, data.$offset + data.$length), $ifaceNil];
		}
		_tuple$1 = d.mustgetc(); b = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			return [$ifaceNil, d.err];
		}
		_ref = b;
		/* */ if (_ref === 47) { $s = 1; continue; }
		/* */ if (_ref === 63) { $s = 2; continue; }
		/* */ if (_ref === 33) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_ref === 47) { */ case 1:
			name = $clone(new Name.ptr(), Name);
			_tuple$2 = d.nsname(); $copy(name, _tuple$2[0], Name); ok = _tuple$2[1];
			if (!ok) {
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected element name after </");
				}
				return [$ifaceNil, d.err];
			}
			d.space();
			_tuple$3 = d.mustgetc(); b = _tuple$3[0]; ok = _tuple$3[1];
			if (!ok) {
				return [$ifaceNil, d.err];
			}
			if (!((b === 62))) {
				d.err = d.syntaxError("invalid characters between </" + name.Local + " and >");
				return [$ifaceNil, d.err];
			}
			return [(x$2 = new EndElement.ptr($clone(name, Name)), new x$2.constructor.elem(x$2)), $ifaceNil];
			$s = 4; continue;
		/* } else if (_ref === 63) { */ case 2:
			target = "";
			_tuple$4 = d.name(); target = _tuple$4[0]; ok = _tuple$4[1];
			if (!ok) {
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected target name after <?");
				}
				return [$ifaceNil, d.err];
			}
			d.space();
			d.buf.Reset();
			b0 = 0;
			while (true) {
				_tuple$5 = d.mustgetc(); b = _tuple$5[0]; ok = _tuple$5[1];
				if (!ok) {
					return [$ifaceNil, d.err];
				}
				d.buf.WriteByte(b);
				if ((b0 === 63) && (b === 62)) {
					break;
				}
				b0 = b;
			}
			data$1 = d.buf.Bytes();
			data$1 = $subslice(data$1, 0, (data$1.$length - 2 >> 0));
			if (target === "xml") {
				enc = procInstEncoding($bytesToString(data$1));
				if (!(enc === "") && !(enc === "utf-8") && !(enc === "UTF-8")) {
					if (d.CharsetReader === $throwNilPointerError) {
						d.err = fmt.Errorf("xml: encoding %q declared but Decoder.CharsetReader is nil", new sliceType$24([new $String(enc)]));
						return [$ifaceNil, d.err];
					}
					_tuple$6 = d.CharsetReader(enc, $assertType(d.r, io.Reader)); newr = _tuple$6[0]; err = _tuple$6[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						d.err = fmt.Errorf("xml: opening charset %q: %v", new sliceType$24([new $String(enc), err]));
						return [$ifaceNil, d.err];
					}
					if ($interfaceIsEqual(newr, $ifaceNil)) {
						$panic(new $String("CharsetReader returned a nil Reader for charset " + enc));
					}
					d.switchToReader(newr);
				}
			}
			return [(x$3 = new ProcInst.ptr(target, data$1), new x$3.constructor.elem(x$3)), $ifaceNil];
			$s = 4; continue;
		/* } else if (_ref === 33) { */ case 3:
			_tuple$7 = d.mustgetc(); b = _tuple$7[0]; ok = _tuple$7[1];
			if (!ok) {
				return [$ifaceNil, d.err];
			}
			_ref$1 = b;
			if (_ref$1 === 45) {
				_tuple$8 = d.mustgetc(); b = _tuple$8[0]; ok = _tuple$8[1];
				if (!ok) {
					return [$ifaceNil, d.err];
				}
				if (!((b === 45))) {
					d.err = d.syntaxError("invalid sequence <!- not part of <!--");
					return [$ifaceNil, d.err];
				}
				d.buf.Reset();
				_tmp = 0; _tmp$1 = 0; b0$1 = _tmp; b1 = _tmp$1;
				while (true) {
					_tuple$9 = d.mustgetc(); b = _tuple$9[0]; ok = _tuple$9[1];
					if (!ok) {
						return [$ifaceNil, d.err];
					}
					d.buf.WriteByte(b);
					if ((b0$1 === 45) && (b1 === 45) && (b === 62)) {
						break;
					}
					_tmp$2 = b1; _tmp$3 = b; b0$1 = _tmp$2; b1 = _tmp$3;
				}
				data$2 = d.buf.Bytes();
				data$2 = $subslice(data$2, 0, (data$2.$length - 3 >> 0));
				return [$subslice(new Comment(data$2.$array), data$2.$offset, data$2.$offset + data$2.$length), $ifaceNil];
			} else if (_ref$1 === 91) {
				i = 0;
				while (true) {
					if (!(i < 6)) { break; }
					_tuple$10 = d.mustgetc(); b = _tuple$10[0]; ok = _tuple$10[1];
					if (!ok) {
						return [$ifaceNil, d.err];
					}
					if (!((b === "CDATA[".charCodeAt(i)))) {
						d.err = d.syntaxError("invalid <![ sequence");
						return [$ifaceNil, d.err];
					}
					i = i + (1) >> 0;
				}
				data$3 = d.text(-1, true);
				if (data$3 === sliceType$60.nil) {
					return [$ifaceNil, d.err];
				}
				return [$subslice(new CharData(data$3.$array), data$3.$offset, data$3.$offset + data$3.$length), $ifaceNil];
			}
			d.buf.Reset();
			d.buf.WriteByte(b);
			inquote = 0;
			depth = 0;
			/* while (true) { */ case 5:
				_tuple$11 = d.mustgetc(); b = _tuple$11[0]; ok = _tuple$11[1];
				if (!ok) {
					return [$ifaceNil, d.err];
				}
				if ((inquote === 0) && (b === 62) && (depth === 0)) {
					/* break; */ $s = 6; continue;
				}
				/* HandleB: */ case 7:
				d.buf.WriteByte(b);
				/* */ if (b === inquote) { $s = 8; continue; }
				/* */ if (!((inquote === 0))) { $s = 9; continue; }
				/* */ if ((b === 39) || (b === 34)) { $s = 10; continue; }
				/* */ if ((b === 62) && (inquote === 0)) { $s = 11; continue; }
				/* */ if ((b === 60) && (inquote === 0)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (b === inquote) { */ case 8:
					inquote = 0;
					$s = 13; continue;
				/* } else if (!((inquote === 0))) { */ case 9:
					$s = 13; continue;
				/* } else if ((b === 39) || (b === 34)) { */ case 10:
					inquote = b;
					$s = 13; continue;
				/* } else if ((b === 62) && (inquote === 0)) { */ case 11:
					depth = depth - (1) >> 0;
					$s = 13; continue;
				/* } else if ((b === 60) && (inquote === 0)) { */ case 12:
					s = "!--";
					i$1 = 0;
					/* while (true) { */ case 14:
						/* if (!(i$1 < s.length)) { break; } */ if(!(i$1 < s.length)) { $s = 15; continue; }
						_tuple$12 = d.mustgetc(); b = _tuple$12[0]; ok = _tuple$12[1];
						if (!ok) {
							return [$ifaceNil, d.err];
						}
						/* */ if (!((b === s.charCodeAt(i$1)))) { $s = 16; continue; }
						/* */ $s = 17; continue;
						/* if (!((b === s.charCodeAt(i$1)))) { */ case 16:
							j = 0;
							while (true) {
								if (!(j < i$1)) { break; }
								d.buf.WriteByte(s.charCodeAt(j));
								j = j + (1) >> 0;
							}
							depth = depth + (1) >> 0;
							/* goto HandleB */ $s = 7; continue;
						/* } */ case 17:
						i$1 = i$1 + (1) >> 0;
					/* } */ $s = 14; continue; case 15:
					d.buf.Truncate(d.buf.Len() - 1 >> 0);
					_tmp$4 = 0; _tmp$5 = 0; b0$2 = _tmp$4; b1$1 = _tmp$5;
					while (true) {
						_tuple$13 = d.mustgetc(); b = _tuple$13[0]; ok = _tuple$13[1];
						if (!ok) {
							return [$ifaceNil, d.err];
						}
						if ((b0$2 === 45) && (b1$1 === 45) && (b === 62)) {
							break;
						}
						_tmp$6 = b1$1; _tmp$7 = b; b0$2 = _tmp$6; b1$1 = _tmp$7;
					}
				/* } */ case 13:
			/* } */ $s = 5; continue; case 6:
			return [(x$4 = d.buf.Bytes(), $subslice(new Directive(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $ifaceNil];
		/* } */ case 4:
		d.ungetc(b);
		name$1 = $clone(new Name.ptr(), Name);
		empty = false;
		attr = sliceType$61.nil;
		_tuple$14 = d.nsname(); $copy(name$1, _tuple$14[0], Name); ok = _tuple$14[1];
		if (!ok) {
			if ($interfaceIsEqual(d.err, $ifaceNil)) {
				d.err = d.syntaxError("expected element name after <");
			}
			return [$ifaceNil, d.err];
		}
		attr = $makeSlice(sliceType$62, 0, 4);
		while (true) {
			d.space();
			_tuple$15 = d.mustgetc(); b = _tuple$15[0]; ok = _tuple$15[1];
			if (!ok) {
				return [$ifaceNil, d.err];
			}
			if (b === 47) {
				empty = true;
				_tuple$16 = d.mustgetc(); b = _tuple$16[0]; ok = _tuple$16[1];
				if (!ok) {
					return [$ifaceNil, d.err];
				}
				if (!((b === 62))) {
					d.err = d.syntaxError("expected /> in element");
					return [$ifaceNil, d.err];
				}
				break;
			}
			if (b === 62) {
				break;
			}
			d.ungetc(b);
			n = attr.$length;
			if (n >= attr.$capacity) {
				nattr = $makeSlice(sliceType$63, n, (2 * attr.$capacity >> 0));
				$copySlice(nattr, attr);
				attr = nattr;
			}
			attr = $subslice(attr, 0, (n + 1 >> 0));
			a = ((n < 0 || n >= attr.$length) ? $throwRuntimeError("index out of range") : attr.$array[attr.$offset + n]);
			_tuple$17 = d.nsname(); $copy(a.Name, _tuple$17[0], Name); ok = _tuple$17[1];
			if (!ok) {
				if ($interfaceIsEqual(d.err, $ifaceNil)) {
					d.err = d.syntaxError("expected attribute name in element");
				}
				return [$ifaceNil, d.err];
			}
			d.space();
			_tuple$18 = d.mustgetc(); b = _tuple$18[0]; ok = _tuple$18[1];
			if (!ok) {
				return [$ifaceNil, d.err];
			}
			if (!((b === 61))) {
				if (d.Strict) {
					d.err = d.syntaxError("attribute name without = in element");
					return [$ifaceNil, d.err];
				} else {
					d.ungetc(b);
					a.Value = a.Name.Local;
				}
			} else {
				d.space();
				data$4 = d.attrval();
				if (data$4 === sliceType$64.nil) {
					return [$ifaceNil, d.err];
				}
				a.Value = $bytesToString(data$4);
			}
		}
		if (empty) {
			d.needClose = true;
			$copy(d.toClose, name$1, Name);
		}
		return [(x$5 = new StartElement.ptr($clone(name$1, Name), attr), new x$5.constructor.elem(x$5)), $ifaceNil];
		/* */ case -1: } return; }
	};
	Decoder.prototype.rawToken = function() { return this.$val.rawToken(); };
	Decoder.ptr.prototype.attrval = function() {
		var _tuple, _tuple$1, b, d, ok;
		d = this;
		_tuple = d.mustgetc(); b = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return sliceType$64.nil;
		}
		if ((b === 34) || (b === 39)) {
			return d.text((b >> 0), false);
		}
		if (d.Strict) {
			d.err = d.syntaxError("unquoted or missing attribute value in element");
			return sliceType$64.nil;
		}
		d.ungetc(b);
		d.buf.Reset();
		while (true) {
			_tuple$1 = d.mustgetc(); b = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				return sliceType$64.nil;
			}
			if (97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || (b === 95) || (b === 58) || (b === 45)) {
				d.buf.WriteByte(b);
			} else {
				d.ungetc(b);
				break;
			}
		}
		return d.buf.Bytes();
	};
	Decoder.prototype.attrval = function() { return this.$val.attrval(); };
	Decoder.ptr.prototype.space = function() {
		var _ref, _tuple, b, d, ok;
		d = this;
		while (true) {
			_tuple = d.getc(); b = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				return;
			}
			_ref = b;
			if (_ref === 32 || _ref === 13 || _ref === 10 || _ref === 9) {
			} else {
				d.ungetc(b);
				return;
			}
		}
	};
	Decoder.prototype.space = function() { return this.$val.space(); };
	Decoder.ptr.prototype.getc = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b = 0, d, ok = false, x$1, x$2;
		d = this;
		if (!($interfaceIsEqual(d.err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = false; b = _tmp; ok = _tmp$1;
			return [b, ok];
		}
		if (d.nextByte >= 0) {
			b = (d.nextByte << 24 >>> 24);
			d.nextByte = -1;
		} else {
			_tuple = d.r.ReadByte(); b = _tuple[0]; d.err = _tuple[1];
			if (!($interfaceIsEqual(d.err, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = false; b = _tmp$2; ok = _tmp$3;
				return [b, ok];
			}
			if (!(d.saved === ptrType$17.nil)) {
				d.saved.WriteByte(b);
			}
		}
		if (b === 10) {
			d.line = d.line + (1) >> 0;
		}
		d.offset = (x$1 = d.offset, x$2 = new $Int64(0, 1), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low));
		_tmp$4 = b; _tmp$5 = true; b = _tmp$4; ok = _tmp$5;
		return [b, ok];
	};
	Decoder.prototype.getc = function() { return this.$val.getc(); };
	Decoder.ptr.prototype.InputOffset = function() {
		var d;
		d = this;
		return d.offset;
	};
	Decoder.prototype.InputOffset = function() { return this.$val.InputOffset(); };
	Decoder.ptr.prototype.savedOffset = function() {
		var d, n;
		d = this;
		n = d.saved.Len();
		if (d.nextByte >= 0) {
			n = n - (1) >> 0;
		}
		return n;
	};
	Decoder.prototype.savedOffset = function() { return this.$val.savedOffset(); };
	Decoder.ptr.prototype.mustgetc = function() {
		var _tuple, b = 0, d, ok = false;
		d = this;
		_tuple = d.getc(); b = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			if ($interfaceIsEqual(d.err, io.EOF)) {
				d.err = d.syntaxError("unexpected EOF");
			}
		}
		return [b, ok];
	};
	Decoder.prototype.mustgetc = function() { return this.$val.mustgetc(); };
	Decoder.ptr.prototype.ungetc = function(b) {
		var b, d, x$1, x$2;
		d = this;
		if (b === 10) {
			d.line = d.line - (1) >> 0;
		}
		d.nextByte = (b >> 0);
		d.offset = (x$1 = d.offset, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
	};
	Decoder.prototype.ungetc = function(b) { return this.$val.ungetc(b); };
	Decoder.ptr.prototype.text = function(quote, cdata) {
		var _entry, _entry$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, b, b0, b1, base, before, buf, cdata, d, data, ent, err, haveText, n, name, ok, ok$1, ok$2, quote, r, r$1, s, s$1, size, start, text, trunc;
		d = this;
		_tmp = 0; _tmp$1 = 0; b0 = _tmp; b1 = _tmp$1;
		trunc = 0;
		d.buf.Reset();
		Input:
		while (true) {
			_tuple = d.getc(); b = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				if (cdata) {
					if ($interfaceIsEqual(d.err, io.EOF)) {
						d.err = d.syntaxError("unexpected EOF in CDATA section");
					}
					return sliceType$60.nil;
				}
				break Input;
			}
			if ((b0 === 93) && (b1 === 93) && (b === 62)) {
				if (cdata) {
					trunc = 2;
					break Input;
				}
				d.err = d.syntaxError("unescaped ]]> not in CDATA section");
				return sliceType$60.nil;
			}
			if ((b === 60) && !cdata) {
				if (quote >= 0) {
					d.err = d.syntaxError("unescaped < inside quoted string");
					return sliceType$60.nil;
				}
				d.ungetc(60);
				break Input;
			}
			if (quote >= 0 && (b === (quote << 24 >>> 24))) {
				break Input;
			}
			if ((b === 38) && !cdata) {
				before = d.buf.Len();
				d.buf.WriteByte(38);
				ok$1 = false;
				text = "";
				haveText = false;
				_tuple$1 = d.mustgetc(); b = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (!ok$1) {
					return sliceType$60.nil;
				}
				if (b === 35) {
					d.buf.WriteByte(b);
					_tuple$2 = d.mustgetc(); b = _tuple$2[0]; ok$1 = _tuple$2[1];
					if (!ok$1) {
						return sliceType$60.nil;
					}
					base = 10;
					if (b === 120) {
						base = 16;
						d.buf.WriteByte(b);
						_tuple$3 = d.mustgetc(); b = _tuple$3[0]; ok$1 = _tuple$3[1];
						if (!ok$1) {
							return sliceType$60.nil;
						}
					}
					start = d.buf.Len();
					while (true) {
						if (!(48 <= b && b <= 57 || (base === 16) && 97 <= b && b <= 102 || (base === 16) && 65 <= b && b <= 70)) { break; }
						d.buf.WriteByte(b);
						_tuple$4 = d.mustgetc(); b = _tuple$4[0]; ok$1 = _tuple$4[1];
						if (!ok$1) {
							return sliceType$60.nil;
						}
					}
					if (!((b === 59))) {
						d.ungetc(b);
					} else {
						s = $bytesToString($subslice(d.buf.Bytes(), start));
						d.buf.WriteByte(59);
						_tuple$5 = strconv.ParseUint(s, base, 64); n = _tuple$5[0]; err = _tuple$5[1];
						if ($interfaceIsEqual(err, $ifaceNil) && (n.$high < 0 || (n.$high === 0 && n.$low <= 1114111))) {
							text = $encodeRune(n.$low);
							haveText = true;
						}
					}
				} else {
					d.ungetc(b);
					if (!d.readName()) {
						if (!($interfaceIsEqual(d.err, $ifaceNil))) {
							return sliceType$60.nil;
						}
						ok$1 = false;
					}
					_tuple$6 = d.mustgetc(); b = _tuple$6[0]; ok$1 = _tuple$6[1];
					if (!ok$1) {
						return sliceType$60.nil;
					}
					if (!((b === 59))) {
						d.ungetc(b);
					} else {
						name = $subslice(d.buf.Bytes(), (before + 1 >> 0));
						d.buf.WriteByte(59);
						if (isName(name)) {
							s$1 = $bytesToString(name);
							_tuple$7 = (_entry = entity[s$1], _entry !== undefined ? [_entry.v, true] : [0, false]); r = _tuple$7[0]; ok$2 = _tuple$7[1];
							if (ok$2) {
								text = $encodeRune(r);
								haveText = true;
							} else if (!(d.Entity === false)) {
								_tuple$8 = (_entry$1 = d.Entity[s$1], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]); text = _tuple$8[0]; haveText = _tuple$8[1];
							}
						}
					}
				}
				if (haveText) {
					d.buf.Truncate(before);
					d.buf.Write(new sliceType$65($stringToBytes(text)));
					_tmp$2 = 0; _tmp$3 = 0; b0 = _tmp$2; b1 = _tmp$3;
					continue Input;
				}
				if (!d.Strict) {
					_tmp$4 = 0; _tmp$5 = 0; b0 = _tmp$4; b1 = _tmp$5;
					continue Input;
				}
				ent = $bytesToString($subslice(d.buf.Bytes(), before));
				if (!((ent.charCodeAt((ent.length - 1 >> 0)) === 59))) {
					ent = ent + (" (no semicolon)");
				}
				d.err = d.syntaxError("invalid character entity " + ent);
				return sliceType$60.nil;
			}
			if (b === 13) {
				d.buf.WriteByte(10);
			} else if ((b1 === 13) && (b === 10)) {
			} else {
				d.buf.WriteByte(b);
			}
			_tmp$6 = b1; _tmp$7 = b; b0 = _tmp$6; b1 = _tmp$7;
		}
		data = d.buf.Bytes();
		data = $subslice(data, 0, (data.$length - trunc >> 0));
		buf = data;
		while (true) {
			if (!(buf.$length > 0)) { break; }
			_tuple$9 = utf8.DecodeRune(buf); r$1 = _tuple$9[0]; size = _tuple$9[1];
			if ((r$1 === 65533) && (size === 1)) {
				d.err = d.syntaxError("invalid UTF-8");
				return sliceType$60.nil;
			}
			buf = $subslice(buf, size);
			if (!isInCharacterRange(r$1)) {
				d.err = d.syntaxError(fmt.Sprintf("illegal character code %U", new sliceType$55([new $Int32(r$1)])));
				return sliceType$60.nil;
			}
		}
		return data;
	};
	Decoder.prototype.text = function(quote, cdata) { return this.$val.text(quote, cdata); };
	isInCharacterRange = function(r) {
		var inrange = false, r;
		inrange = (r === 9) || (r === 10) || (r === 13) || r >= 32 && r <= 57207 || r >= 57344 && r <= 65533 || r >= 65536 && r <= 1114111;
		return inrange;
	};
	Decoder.ptr.prototype.nsname = function() {
		var _tmp, _tmp$1, _tuple, d, i, name = new Name.ptr(), ok = false, s;
		d = this;
		_tuple = d.name(); s = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return [name, ok];
		}
		i = strings.Index(s, ":");
		if (i < 0) {
			name.Local = s;
		} else {
			name.Space = s.substring(0, i);
			name.Local = s.substring((i + 1 >> 0));
		}
		_tmp = $clone(name, Name); _tmp$1 = true; $copy(name, _tmp, Name); ok = _tmp$1;
		return [name, ok];
	};
	Decoder.prototype.nsname = function() { return this.$val.nsname(); };
	Decoder.ptr.prototype.name = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, ok = false, s = "";
		d = this;
		d.buf.Reset();
		if (!d.readName()) {
			_tmp = ""; _tmp$1 = false; s = _tmp; ok = _tmp$1;
			return [s, ok];
		}
		s = d.buf.String();
		if (!isName(new sliceType$66($stringToBytes(s)))) {
			d.err = d.syntaxError("invalid XML name: " + s);
			_tmp$2 = ""; _tmp$3 = false; s = _tmp$2; ok = _tmp$3;
			return [s, ok];
		}
		_tmp$4 = s; _tmp$5 = true; s = _tmp$4; ok = _tmp$5;
		return [s, ok];
	};
	Decoder.prototype.name = function() { return this.$val.name(); };
	Decoder.ptr.prototype.readName = function() {
		var _tuple, _tuple$1, b, d, ok = false;
		d = this;
		b = 0;
		_tuple = d.mustgetc(); b = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return ok;
		}
		if (b < 128 && !isNameByte(b)) {
			d.ungetc(b);
			ok = false;
			return ok;
		}
		d.buf.WriteByte(b);
		while (true) {
			_tuple$1 = d.mustgetc(); b = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				return ok;
			}
			if (b < 128 && !isNameByte(b)) {
				d.ungetc(b);
				break;
			}
			d.buf.WriteByte(b);
		}
		ok = true;
		return ok;
	};
	Decoder.prototype.readName = function() { return this.$val.readName(); };
	isNameByte = function(c) {
		var c;
		return 65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57 || (c === 95) || (c === 58) || (c === 46) || (c === 45);
	};
	isName = function(s) {
		var _tuple, _tuple$1, c, n, s;
		if (s.$length === 0) {
			return false;
		}
		_tuple = utf8.DecodeRune(s); c = _tuple[0]; n = _tuple[1];
		if ((c === 65533) && (n === 1)) {
			return false;
		}
		if (!unicode.Is(first, c)) {
			return false;
		}
		while (true) {
			if (!(n < s.$length)) { break; }
			s = $subslice(s, n);
			_tuple$1 = utf8.DecodeRune(s); c = _tuple$1[0]; n = _tuple$1[1];
			if ((c === 65533) && (n === 1)) {
				return false;
			}
			if (!unicode.Is(first, c) && !unicode.Is(second, c)) {
				return false;
			}
		}
		return true;
	};
	isNameString = function(s) {
		var _tuple, _tuple$1, c, n, s;
		if (s.length === 0) {
			return false;
		}
		_tuple = utf8.DecodeRuneInString(s); c = _tuple[0]; n = _tuple[1];
		if ((c === 65533) && (n === 1)) {
			return false;
		}
		if (!unicode.Is(first, c)) {
			return false;
		}
		while (true) {
			if (!(n < s.length)) { break; }
			s = s.substring(n);
			_tuple$1 = utf8.DecodeRuneInString(s); c = _tuple$1[0]; n = _tuple$1[1];
			if ((c === 65533) && (n === 1)) {
				return false;
			}
			if (!unicode.Is(first, c) && !unicode.Is(second, c)) {
				return false;
			}
		}
		return true;
	};
	EscapeText = $pkg.EscapeText = function(w, s) {
		var _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, err, err$1, err$2, esc, i, last, r, s, w, width;
		esc = sliceType$67.nil;
		last = 0;
		i = 0;
		while (true) {
			if (!(i < s.$length)) { break; }
			_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; width = _tuple[1];
			i = i + (width) >> 0;
			_ref = r;
			switch (0) { default: if (_ref === 34) {
				esc = esc_quot;
			} else if (_ref === 39) {
				esc = esc_apos;
			} else if (_ref === 38) {
				esc = esc_amp;
			} else if (_ref === 60) {
				esc = esc_lt;
			} else if (_ref === 62) {
				esc = esc_gt;
			} else if (_ref === 9) {
				esc = esc_tab;
			} else if (_ref === 10) {
				esc = esc_nl;
			} else if (_ref === 13) {
				esc = esc_cr;
			} else {
				if (!isInCharacterRange(r) || ((r === 65533) && (width === 1))) {
					esc = esc_fffd;
					break;
				}
				continue;
			} }
			_tuple$1 = w.Write($subslice(s, last, (i - width >> 0))); err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_tuple$2 = w.Write(esc); err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			last = i;
		}
		_tuple$3 = w.Write($subslice(s, last)); err$2 = _tuple$3[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return err$2;
		}
		return $ifaceNil;
	};
	printer.ptr.prototype.EscapeString = function(s) {
		var _ref, _tuple, esc, i, last, p, r, s, width;
		p = this;
		esc = sliceType$68.nil;
		last = 0;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_tuple = utf8.DecodeRuneInString(s.substring(i)); r = _tuple[0]; width = _tuple[1];
			i = i + (width) >> 0;
			_ref = r;
			switch (0) { default: if (_ref === 34) {
				esc = esc_quot;
			} else if (_ref === 39) {
				esc = esc_apos;
			} else if (_ref === 38) {
				esc = esc_amp;
			} else if (_ref === 60) {
				esc = esc_lt;
			} else if (_ref === 62) {
				esc = esc_gt;
			} else if (_ref === 9) {
				esc = esc_tab;
			} else if (_ref === 10) {
				esc = esc_nl;
			} else if (_ref === 13) {
				esc = esc_cr;
			} else {
				if (!isInCharacterRange(r) || ((r === 65533) && (width === 1))) {
					esc = esc_fffd;
					break;
				}
				continue;
			} }
			p.Writer.WriteString(s.substring(last, (i - width >> 0)));
			p.Writer.Write(esc);
			last = i;
		}
		p.Writer.WriteString(s.substring(last));
	};
	printer.prototype.EscapeString = function(s) { return this.$val.EscapeString(s); };
	Escape = $pkg.Escape = function(w, s) {
		var s, w;
		EscapeText(w, s);
	};
	procInstEncoding = function(s) {
		var idx, s, v;
		idx = strings.Index(s, "encoding=");
		if (idx === -1) {
			return "";
		}
		v = s.substring((idx + 9 >> 0));
		if (v === "") {
			return "";
		}
		if (!((v.charCodeAt(0) === 39)) && !((v.charCodeAt(0) === 34))) {
			return "";
		}
		idx = strings.IndexRune(v.substring(1), (v.charCodeAt(0) >> 0));
		if (idx === -1) {
			return "";
		}
		return v.substring(1, (idx + 1 >> 0));
	};
	ptrType$28.methods = [{prop: "Indent", name: "Indent", pkg: "", typ: $funcType([$String, $String], [], false)}, {prop: "Encode", name: "Encode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "EncodeElement", name: "EncodeElement", pkg: "", typ: $funcType([$emptyInterface, StartElement], [$error], false)}, {prop: "EncodeToken", name: "EncodeToken", pkg: "", typ: $funcType([Token], [$error], false)}, {prop: "Flush", name: "Flush", pkg: "", typ: $funcType([], [$error], false)}];
	ptrType$31.methods = [{prop: "createAttrPrefix", name: "createAttrPrefix", pkg: "encoding/xml", typ: $funcType([$String], [$String], false)}, {prop: "deleteAttrPrefix", name: "deleteAttrPrefix", pkg: "encoding/xml", typ: $funcType([$String], [], false)}, {prop: "markPrefix", name: "markPrefix", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "popPrefix", name: "popPrefix", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "marshalValue", name: "marshalValue", pkg: "encoding/xml", typ: $funcType([reflect.Value, ptrType$8, ptrType$9], [$error], false)}, {prop: "marshalInterface", name: "marshalInterface", pkg: "encoding/xml", typ: $funcType([Marshaler, StartElement], [$error], false)}, {prop: "marshalTextInterface", name: "marshalTextInterface", pkg: "encoding/xml", typ: $funcType([encoding.TextMarshaler, StartElement], [$error], false)}, {prop: "writeStart", name: "writeStart", pkg: "encoding/xml", typ: $funcType([ptrType$29], [$error], false)}, {prop: "writeEnd", name: "writeEnd", pkg: "encoding/xml", typ: $funcType([Name], [$error], false)}, {prop: "marshalSimple", name: "marshalSimple", pkg: "encoding/xml", typ: $funcType([reflect.Type, reflect.Value], [$String, sliceType$28, $error], false)}, {prop: "marshalStruct", name: "marshalStruct", pkg: "encoding/xml", typ: $funcType([ptrType$30, reflect.Value], [$error], false)}, {prop: "cachedWriteError", name: "cachedWriteError", pkg: "encoding/xml", typ: $funcType([], [$error], false)}, {prop: "writeIndent", name: "writeIndent", pkg: "encoding/xml", typ: $funcType([$Int], [], false)}, {prop: "EscapeString", name: "EscapeString", pkg: "", typ: $funcType([$String], [], false)}];
	ptrType$32.methods = [{prop: "trim", name: "trim", pkg: "encoding/xml", typ: $funcType([sliceType$39], [$error], false)}, {prop: "push", name: "push", pkg: "encoding/xml", typ: $funcType([sliceType$69], [$error], false)}];
	ptrType$33.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnmarshalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$35.methods = [{prop: "value", name: "value", pkg: "encoding/xml", typ: $funcType([reflect.Value], [reflect.Value], false)}];
	ptrType$36.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$37.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	StartElement.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [StartElement], false)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [EndElement], false)}];
	CharData.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [CharData], false)}];
	Comment.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Comment], false)}];
	ProcInst.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ProcInst], false)}];
	Directive.methods = [{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Directive], false)}];
	ptrType$45.methods = [{prop: "Decode", name: "Decode", pkg: "", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "DecodeElement", name: "DecodeElement", pkg: "", typ: $funcType([$emptyInterface, ptrType$14], [$error], false)}, {prop: "unmarshalInterface", name: "unmarshalInterface", pkg: "encoding/xml", typ: $funcType([Unmarshaler, ptrType$38], [$error], false)}, {prop: "unmarshalTextInterface", name: "unmarshalTextInterface", pkg: "encoding/xml", typ: $funcType([encoding.TextUnmarshaler, ptrType$39], [$error], false)}, {prop: "unmarshalAttr", name: "unmarshalAttr", pkg: "encoding/xml", typ: $funcType([reflect.Value, Attr], [$error], false)}, {prop: "unmarshal", name: "unmarshal", pkg: "encoding/xml", typ: $funcType([reflect.Value, ptrType$15], [$error], false)}, {prop: "unmarshalPath", name: "unmarshalPath", pkg: "encoding/xml", typ: $funcType([ptrType$40, reflect.Value, sliceType$48, ptrType$41], [$Bool, $error], false)}, {prop: "Skip", name: "Skip", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "translate", name: "translate", pkg: "encoding/xml", typ: $funcType([ptrType$42, $Bool], [], false)}, {prop: "switchToReader", name: "switchToReader", pkg: "encoding/xml", typ: $funcType([io.Reader], [], false)}, {prop: "push", name: "push", pkg: "encoding/xml", typ: $funcType([$Int], [ptrType$43], false)}, {prop: "pop", name: "pop", pkg: "encoding/xml", typ: $funcType([], [ptrType$26], false)}, {prop: "pushEOF", name: "pushEOF", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "popEOF", name: "popEOF", pkg: "encoding/xml", typ: $funcType([], [$Bool], false)}, {prop: "pushElement", name: "pushElement", pkg: "encoding/xml", typ: $funcType([Name], [], false)}, {prop: "pushNs", name: "pushNs", pkg: "encoding/xml", typ: $funcType([$String, $String, $Bool], [], false)}, {prop: "syntaxError", name: "syntaxError", pkg: "encoding/xml", typ: $funcType([$String], [$error], false)}, {prop: "popElement", name: "popElement", pkg: "encoding/xml", typ: $funcType([ptrType$44], [$Bool], false)}, {prop: "autoClose", name: "autoClose", pkg: "encoding/xml", typ: $funcType([Token], [Token, $Bool], false)}, {prop: "RawToken", name: "RawToken", pkg: "", typ: $funcType([], [Token, $error], false)}, {prop: "rawToken", name: "rawToken", pkg: "encoding/xml", typ: $funcType([], [Token, $error], false)}, {prop: "attrval", name: "attrval", pkg: "encoding/xml", typ: $funcType([], [sliceType$64], false)}, {prop: "space", name: "space", pkg: "encoding/xml", typ: $funcType([], [], false)}, {prop: "getc", name: "getc", pkg: "encoding/xml", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "InputOffset", name: "InputOffset", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "savedOffset", name: "savedOffset", pkg: "encoding/xml", typ: $funcType([], [$Int], false)}, {prop: "mustgetc", name: "mustgetc", pkg: "encoding/xml", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "ungetc", name: "ungetc", pkg: "encoding/xml", typ: $funcType([$Uint8], [], false)}, {prop: "text", name: "text", pkg: "encoding/xml", typ: $funcType([$Int, $Bool], [sliceType$60], false)}, {prop: "nsname", name: "nsname", pkg: "encoding/xml", typ: $funcType([], [Name, $Bool], false)}, {prop: "name", name: "name", pkg: "encoding/xml", typ: $funcType([], [$String, $Bool], false)}, {prop: "readName", name: "readName", pkg: "encoding/xml", typ: $funcType([], [$Bool], false)}];
	Marshaler.init([{prop: "MarshalXML", name: "MarshalXML", pkg: "", typ: $funcType([ptrType$27, StartElement], [$error], false)}]);
	MarshalerAttr.init([{prop: "MarshalXMLAttr", name: "MarshalXMLAttr", pkg: "", typ: $funcType([Name], [Attr, $error], false)}]);
	Encoder.init([{prop: "p", name: "p", pkg: "encoding/xml", typ: printer, tag: ""}]);
	printer.init([{prop: "Writer", name: "", pkg: "", typ: ptrType$6, tag: ""}, {prop: "encoder", name: "encoder", pkg: "encoding/xml", typ: ptrType$7, tag: ""}, {prop: "seq", name: "seq", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "indent", name: "indent", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "prefix", name: "prefix", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "depth", name: "depth", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "indentedIn", name: "indentedIn", pkg: "encoding/xml", typ: $Bool, tag: ""}, {prop: "putNewline", name: "putNewline", pkg: "encoding/xml", typ: $Bool, tag: ""}, {prop: "attrNS", name: "attrNS", pkg: "encoding/xml", typ: mapType, tag: ""}, {prop: "attrPrefix", name: "attrPrefix", pkg: "encoding/xml", typ: mapType$1, tag: ""}, {prop: "prefixes", name: "prefixes", pkg: "encoding/xml", typ: sliceType$20, tag: ""}, {prop: "tags", name: "tags", pkg: "encoding/xml", typ: sliceType$21, tag: ""}]);
	parentStack.init([{prop: "p", name: "p", pkg: "encoding/xml", typ: ptrType$13, tag: ""}, {prop: "stack", name: "stack", pkg: "encoding/xml", typ: sliceType$31, tag: ""}]);
	UnsupportedTypeError.init([{prop: "Type", name: "Type", pkg: "", typ: reflect.Type, tag: ""}]);
	Unmarshaler.init([{prop: "UnmarshalXML", name: "UnmarshalXML", pkg: "", typ: $funcType([ptrType$34, StartElement], [$error], false)}]);
	UnmarshalerAttr.init([{prop: "UnmarshalXMLAttr", name: "UnmarshalXMLAttr", pkg: "", typ: $funcType([Attr], [$error], false)}]);
	typeInfo.init([{prop: "xmlname", name: "xmlname", pkg: "encoding/xml", typ: ptrType$10, tag: ""}, {prop: "fields", name: "fields", pkg: "encoding/xml", typ: sliceType$50, tag: ""}]);
	fieldInfo.init([{prop: "idx", name: "idx", pkg: "encoding/xml", typ: sliceType$52, tag: ""}, {prop: "name", name: "name", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "xmlns", name: "xmlns", pkg: "encoding/xml", typ: $String, tag: ""}, {prop: "flags", name: "flags", pkg: "encoding/xml", typ: fieldFlags, tag: ""}, {prop: "parents", name: "parents", pkg: "encoding/xml", typ: sliceType$53, tag: ""}]);
	TagPathError.init([{prop: "Struct", name: "Struct", pkg: "", typ: reflect.Type, tag: ""}, {prop: "Field1", name: "Field1", pkg: "", typ: $String, tag: ""}, {prop: "Tag1", name: "Tag1", pkg: "", typ: $String, tag: ""}, {prop: "Field2", name: "Field2", pkg: "", typ: $String, tag: ""}, {prop: "Tag2", name: "Tag2", pkg: "", typ: $String, tag: ""}]);
	SyntaxError.init([{prop: "Msg", name: "Msg", pkg: "", typ: $String, tag: ""}, {prop: "Line", name: "Line", pkg: "", typ: $Int, tag: ""}]);
	Name.init([{prop: "Space", name: "Space", pkg: "", typ: $String, tag: ""}, {prop: "Local", name: "Local", pkg: "", typ: $String, tag: ""}]);
	Attr.init([{prop: "Name", name: "Name", pkg: "", typ: Name, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}]);
	Token.init([]);
	StartElement.init([{prop: "Name", name: "Name", pkg: "", typ: Name, tag: ""}, {prop: "Attr", name: "Attr", pkg: "", typ: sliceType$40, tag: ""}]);
	EndElement.init([{prop: "Name", name: "Name", pkg: "", typ: Name, tag: ""}]);
	CharData.init($Uint8);
	Comment.init($Uint8);
	ProcInst.init([{prop: "Target", name: "Target", pkg: "", typ: $String, tag: ""}, {prop: "Inst", name: "Inst", pkg: "", typ: sliceType$70, tag: ""}]);
	Directive.init($Uint8);
	Decoder.init([{prop: "Strict", name: "Strict", pkg: "", typ: $Bool, tag: ""}, {prop: "AutoClose", name: "AutoClose", pkg: "", typ: sliceType$59, tag: ""}, {prop: "Entity", name: "Entity", pkg: "", typ: mapType$2, tag: ""}, {prop: "CharsetReader", name: "CharsetReader", pkg: "", typ: funcType, tag: ""}, {prop: "DefaultSpace", name: "DefaultSpace", pkg: "", typ: $String, tag: ""}, {prop: "r", name: "r", pkg: "encoding/xml", typ: io.ByteReader, tag: ""}, {prop: "buf", name: "buf", pkg: "encoding/xml", typ: bytes.Buffer, tag: ""}, {prop: "saved", name: "saved", pkg: "encoding/xml", typ: ptrType$17, tag: ""}, {prop: "stk", name: "stk", pkg: "encoding/xml", typ: ptrType$23, tag: ""}, {prop: "free", name: "free", pkg: "encoding/xml", typ: ptrType$24, tag: ""}, {prop: "needClose", name: "needClose", pkg: "encoding/xml", typ: $Bool, tag: ""}, {prop: "toClose", name: "toClose", pkg: "encoding/xml", typ: Name, tag: ""}, {prop: "nextToken", name: "nextToken", pkg: "encoding/xml", typ: Token, tag: ""}, {prop: "nextByte", name: "nextByte", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "ns", name: "ns", pkg: "encoding/xml", typ: mapType$3, tag: ""}, {prop: "err", name: "err", pkg: "encoding/xml", typ: $error, tag: ""}, {prop: "line", name: "line", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "offset", name: "offset", pkg: "encoding/xml", typ: $Int64, tag: ""}, {prop: "unmarshalDepth", name: "unmarshalDepth", pkg: "encoding/xml", typ: $Int, tag: ""}]);
	stack.init([{prop: "next", name: "next", pkg: "encoding/xml", typ: ptrType$25, tag: ""}, {prop: "kind", name: "kind", pkg: "encoding/xml", typ: $Int, tag: ""}, {prop: "name", name: "name", pkg: "encoding/xml", typ: Name, tag: ""}, {prop: "ok", name: "ok", pkg: "encoding/xml", typ: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_xml = function() { while (true) { switch ($s) { case 0:
		$r = bufio.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = bytes.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = encoding.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 9; case 9: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 11; case 11: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 12; case 12: if ($r && $r.$blocking) { $r = $r(); }
		tinfoLock = new sync.RWMutex.ptr();
		endComment = new sliceType($stringToBytes("-->"));
		endProcInst = new sliceType$1($stringToBytes("?>"));
		endDirective = new sliceType$2($stringToBytes(">"));
		marshalerType = reflect.TypeOf(ptrType.nil).Elem();
		marshalerAttrType = reflect.TypeOf(ptrType$1.nil).Elem();
		textMarshalerType = reflect.TypeOf(ptrType$2.nil).Elem();
		ddBytes = new sliceType$3($stringToBytes("--"));
		unmarshalerType = reflect.TypeOf(ptrType$3.nil).Elem();
		unmarshalerAttrType = reflect.TypeOf(ptrType$4.nil).Elem();
		textUnmarshalerType = reflect.TypeOf(ptrType$5.nil).Elem();
		tinfoMap = new $Map();
		nameType = reflect.TypeOf((x = new Name.ptr("", ""), new x.constructor.elem(x)));
		errRawToken = errors.New("xml: cannot use RawToken from UnmarshalXML method");
		entity = (_map = new $Map(), _key = "lt", _map[_key] = { k: _key, v: 60 }, _key = "gt", _map[_key] = { k: _key, v: 62 }, _key = "amp", _map[_key] = { k: _key, v: 38 }, _key = "apos", _map[_key] = { k: _key, v: 39 }, _key = "quot", _map[_key] = { k: _key, v: 34 }, _map);
		first = new unicode.RangeTable.ptr(new sliceType$6([new unicode.Range16.ptr(58, 58, 1), new unicode.Range16.ptr(65, 90, 1), new unicode.Range16.ptr(95, 95, 1), new unicode.Range16.ptr(97, 122, 1), new unicode.Range16.ptr(192, 214, 1), new unicode.Range16.ptr(216, 246, 1), new unicode.Range16.ptr(248, 255, 1), new unicode.Range16.ptr(256, 305, 1), new unicode.Range16.ptr(308, 318, 1), new unicode.Range16.ptr(321, 328, 1), new unicode.Range16.ptr(330, 382, 1), new unicode.Range16.ptr(384, 451, 1), new unicode.Range16.ptr(461, 496, 1), new unicode.Range16.ptr(500, 501, 1), new unicode.Range16.ptr(506, 535, 1), new unicode.Range16.ptr(592, 680, 1), new unicode.Range16.ptr(699, 705, 1), new unicode.Range16.ptr(902, 902, 1), new unicode.Range16.ptr(904, 906, 1), new unicode.Range16.ptr(908, 908, 1), new unicode.Range16.ptr(910, 929, 1), new unicode.Range16.ptr(931, 974, 1), new unicode.Range16.ptr(976, 982, 1), new unicode.Range16.ptr(986, 992, 2), new unicode.Range16.ptr(994, 1011, 1), new unicode.Range16.ptr(1025, 1036, 1), new unicode.Range16.ptr(1038, 1103, 1), new unicode.Range16.ptr(1105, 1116, 1), new unicode.Range16.ptr(1118, 1153, 1), new unicode.Range16.ptr(1168, 1220, 1), new unicode.Range16.ptr(1223, 1224, 1), new unicode.Range16.ptr(1227, 1228, 1), new unicode.Range16.ptr(1232, 1259, 1), new unicode.Range16.ptr(1262, 1269, 1), new unicode.Range16.ptr(1272, 1273, 1), new unicode.Range16.ptr(1329, 1366, 1), new unicode.Range16.ptr(1369, 1369, 1), new unicode.Range16.ptr(1377, 1414, 1), new unicode.Range16.ptr(1488, 1514, 1), new unicode.Range16.ptr(1520, 1522, 1), new unicode.Range16.ptr(1569, 1594, 1), new unicode.Range16.ptr(1601, 1610, 1), new unicode.Range16.ptr(1649, 1719, 1), new unicode.Range16.ptr(1722, 1726, 1), new unicode.Range16.ptr(1728, 1742, 1), new unicode.Range16.ptr(1744, 1747, 1), new unicode.Range16.ptr(1749, 1749, 1), new unicode.Range16.ptr(1765, 1766, 1), new unicode.Range16.ptr(2309, 2361, 1), new unicode.Range16.ptr(2365, 2365, 1), new unicode.Range16.ptr(2392, 2401, 1), new unicode.Range16.ptr(2437, 2444, 1), new unicode.Range16.ptr(2447, 2448, 1), new unicode.Range16.ptr(2451, 2472, 1), new unicode.Range16.ptr(2474, 2480, 1), new unicode.Range16.ptr(2482, 2482, 1), new unicode.Range16.ptr(2486, 2489, 1), new unicode.Range16.ptr(2524, 2525, 1), new unicode.Range16.ptr(2527, 2529, 1), new unicode.Range16.ptr(2544, 2545, 1), new unicode.Range16.ptr(2565, 2570, 1), new unicode.Range16.ptr(2575, 2576, 1), new unicode.Range16.ptr(2579, 2600, 1), new unicode.Range16.ptr(2602, 2608, 1), new unicode.Range16.ptr(2610, 2611, 1), new unicode.Range16.ptr(2613, 2614, 1), new unicode.Range16.ptr(2616, 2617, 1), new unicode.Range16.ptr(2649, 2652, 1), new unicode.Range16.ptr(2654, 2654, 1), new unicode.Range16.ptr(2674, 2676, 1), new unicode.Range16.ptr(2693, 2699, 1), new unicode.Range16.ptr(2701, 2701, 1), new unicode.Range16.ptr(2703, 2705, 1), new unicode.Range16.ptr(2707, 2728, 1), new unicode.Range16.ptr(2730, 2736, 1), new unicode.Range16.ptr(2738, 2739, 1), new unicode.Range16.ptr(2741, 2745, 1), new unicode.Range16.ptr(2749, 2784, 35), new unicode.Range16.ptr(2821, 2828, 1), new unicode.Range16.ptr(2831, 2832, 1), new unicode.Range16.ptr(2835, 2856, 1), new unicode.Range16.ptr(2858, 2864, 1), new unicode.Range16.ptr(2866, 2867, 1), new unicode.Range16.ptr(2870, 2873, 1), new unicode.Range16.ptr(2877, 2877, 1), new unicode.Range16.ptr(2908, 2909, 1), new unicode.Range16.ptr(2911, 2913, 1), new unicode.Range16.ptr(2949, 2954, 1), new unicode.Range16.ptr(2958, 2960, 1), new unicode.Range16.ptr(2962, 2965, 1), new unicode.Range16.ptr(2969, 2970, 1), new unicode.Range16.ptr(2972, 2972, 1), new unicode.Range16.ptr(2974, 2975, 1), new unicode.Range16.ptr(2979, 2980, 1), new unicode.Range16.ptr(2984, 2986, 1), new unicode.Range16.ptr(2990, 2997, 1), new unicode.Range16.ptr(2999, 3001, 1), new unicode.Range16.ptr(3077, 3084, 1), new unicode.Range16.ptr(3086, 3088, 1), new unicode.Range16.ptr(3090, 3112, 1), new unicode.Range16.ptr(3114, 3123, 1), new unicode.Range16.ptr(3125, 3129, 1), new unicode.Range16.ptr(3168, 3169, 1), new unicode.Range16.ptr(3205, 3212, 1), new unicode.Range16.ptr(3214, 3216, 1), new unicode.Range16.ptr(3218, 3240, 1), new unicode.Range16.ptr(3242, 3251, 1), new unicode.Range16.ptr(3253, 3257, 1), new unicode.Range16.ptr(3294, 3294, 1), new unicode.Range16.ptr(3296, 3297, 1), new unicode.Range16.ptr(3333, 3340, 1), new unicode.Range16.ptr(3342, 3344, 1), new unicode.Range16.ptr(3346, 3368, 1), new unicode.Range16.ptr(3370, 3385, 1), new unicode.Range16.ptr(3424, 3425, 1), new unicode.Range16.ptr(3585, 3630, 1), new unicode.Range16.ptr(3632, 3632, 1), new unicode.Range16.ptr(3634, 3635, 1), new unicode.Range16.ptr(3648, 3653, 1), new unicode.Range16.ptr(3713, 3714, 1), new unicode.Range16.ptr(3716, 3716, 1), new unicode.Range16.ptr(3719, 3720, 1), new unicode.Range16.ptr(3722, 3725, 3), new unicode.Range16.ptr(3732, 3735, 1), new unicode.Range16.ptr(3737, 3743, 1), new unicode.Range16.ptr(3745, 3747, 1), new unicode.Range16.ptr(3749, 3751, 2), new unicode.Range16.ptr(3754, 3755, 1), new unicode.Range16.ptr(3757, 3758, 1), new unicode.Range16.ptr(3760, 3760, 1), new unicode.Range16.ptr(3762, 3763, 1), new unicode.Range16.ptr(3773, 3773, 1), new unicode.Range16.ptr(3776, 3780, 1), new unicode.Range16.ptr(3904, 3911, 1), new unicode.Range16.ptr(3913, 3945, 1), new unicode.Range16.ptr(4256, 4293, 1), new unicode.Range16.ptr(4304, 4342, 1), new unicode.Range16.ptr(4352, 4352, 1), new unicode.Range16.ptr(4354, 4355, 1), new unicode.Range16.ptr(4357, 4359, 1), new unicode.Range16.ptr(4361, 4361, 1), new unicode.Range16.ptr(4363, 4364, 1), new unicode.Range16.ptr(4366, 4370, 1), new unicode.Range16.ptr(4412, 4416, 2), new unicode.Range16.ptr(4428, 4432, 2), new unicode.Range16.ptr(4436, 4437, 1), new unicode.Range16.ptr(4441, 4441, 1), new unicode.Range16.ptr(4447, 4449, 1), new unicode.Range16.ptr(4451, 4457, 2), new unicode.Range16.ptr(4461, 4462, 1), new unicode.Range16.ptr(4466, 4467, 1), new unicode.Range16.ptr(4469, 4510, 41), new unicode.Range16.ptr(4520, 4523, 3), new unicode.Range16.ptr(4526, 4527, 1), new unicode.Range16.ptr(4535, 4536, 1), new unicode.Range16.ptr(4538, 4538, 1), new unicode.Range16.ptr(4540, 4546, 1), new unicode.Range16.ptr(4587, 4592, 5), new unicode.Range16.ptr(4601, 4601, 1), new unicode.Range16.ptr(7680, 7835, 1), new unicode.Range16.ptr(7840, 7929, 1), new unicode.Range16.ptr(7936, 7957, 1), new unicode.Range16.ptr(7960, 7965, 1), new unicode.Range16.ptr(7968, 8005, 1), new unicode.Range16.ptr(8008, 8013, 1), new unicode.Range16.ptr(8016, 8023, 1), new unicode.Range16.ptr(8025, 8027, 2), new unicode.Range16.ptr(8029, 8029, 1), new unicode.Range16.ptr(8031, 8061, 1), new unicode.Range16.ptr(8064, 8116, 1), new unicode.Range16.ptr(8118, 8124, 1), new unicode.Range16.ptr(8126, 8126, 1), new unicode.Range16.ptr(8130, 8132, 1), new unicode.Range16.ptr(8134, 8140, 1), new unicode.Range16.ptr(8144, 8147, 1), new unicode.Range16.ptr(8150, 8155, 1), new unicode.Range16.ptr(8160, 8172, 1), new unicode.Range16.ptr(8178, 8180, 1), new unicode.Range16.ptr(8182, 8188, 1), new unicode.Range16.ptr(8486, 8486, 1), new unicode.Range16.ptr(8490, 8491, 1), new unicode.Range16.ptr(8494, 8494, 1), new unicode.Range16.ptr(8576, 8578, 1), new unicode.Range16.ptr(12295, 12295, 1), new unicode.Range16.ptr(12321, 12329, 1), new unicode.Range16.ptr(12353, 12436, 1), new unicode.Range16.ptr(12449, 12538, 1), new unicode.Range16.ptr(12549, 12588, 1), new unicode.Range16.ptr(19968, 40869, 1), new unicode.Range16.ptr(44032, 55203, 1)]), sliceType$5.nil, 0);
		second = new unicode.RangeTable.ptr(new sliceType$7([new unicode.Range16.ptr(45, 46, 1), new unicode.Range16.ptr(48, 57, 1), new unicode.Range16.ptr(183, 183, 1), new unicode.Range16.ptr(720, 721, 1), new unicode.Range16.ptr(768, 837, 1), new unicode.Range16.ptr(864, 865, 1), new unicode.Range16.ptr(903, 903, 1), new unicode.Range16.ptr(1155, 1158, 1), new unicode.Range16.ptr(1425, 1441, 1), new unicode.Range16.ptr(1443, 1465, 1), new unicode.Range16.ptr(1467, 1469, 1), new unicode.Range16.ptr(1471, 1471, 1), new unicode.Range16.ptr(1473, 1474, 1), new unicode.Range16.ptr(1476, 1600, 124), new unicode.Range16.ptr(1611, 1618, 1), new unicode.Range16.ptr(1632, 1641, 1), new unicode.Range16.ptr(1648, 1648, 1), new unicode.Range16.ptr(1750, 1756, 1), new unicode.Range16.ptr(1757, 1759, 1), new unicode.Range16.ptr(1760, 1764, 1), new unicode.Range16.ptr(1767, 1768, 1), new unicode.Range16.ptr(1770, 1773, 1), new unicode.Range16.ptr(1776, 1785, 1), new unicode.Range16.ptr(2305, 2307, 1), new unicode.Range16.ptr(2364, 2364, 1), new unicode.Range16.ptr(2366, 2380, 1), new unicode.Range16.ptr(2381, 2381, 1), new unicode.Range16.ptr(2385, 2388, 1), new unicode.Range16.ptr(2402, 2403, 1), new unicode.Range16.ptr(2406, 2415, 1), new unicode.Range16.ptr(2433, 2435, 1), new unicode.Range16.ptr(2492, 2492, 1), new unicode.Range16.ptr(2494, 2495, 1), new unicode.Range16.ptr(2496, 2500, 1), new unicode.Range16.ptr(2503, 2504, 1), new unicode.Range16.ptr(2507, 2509, 1), new unicode.Range16.ptr(2519, 2519, 1), new unicode.Range16.ptr(2530, 2531, 1), new unicode.Range16.ptr(2534, 2543, 1), new unicode.Range16.ptr(2562, 2620, 58), new unicode.Range16.ptr(2622, 2623, 1), new unicode.Range16.ptr(2624, 2626, 1), new unicode.Range16.ptr(2631, 2632, 1), new unicode.Range16.ptr(2635, 2637, 1), new unicode.Range16.ptr(2662, 2671, 1), new unicode.Range16.ptr(2672, 2673, 1), new unicode.Range16.ptr(2689, 2691, 1), new unicode.Range16.ptr(2748, 2748, 1), new unicode.Range16.ptr(2750, 2757, 1), new unicode.Range16.ptr(2759, 2761, 1), new unicode.Range16.ptr(2763, 2765, 1), new unicode.Range16.ptr(2790, 2799, 1), new unicode.Range16.ptr(2817, 2819, 1), new unicode.Range16.ptr(2876, 2876, 1), new unicode.Range16.ptr(2878, 2883, 1), new unicode.Range16.ptr(2887, 2888, 1), new unicode.Range16.ptr(2891, 2893, 1), new unicode.Range16.ptr(2902, 2903, 1), new unicode.Range16.ptr(2918, 2927, 1), new unicode.Range16.ptr(2946, 2947, 1), new unicode.Range16.ptr(3006, 3010, 1), new unicode.Range16.ptr(3014, 3016, 1), new unicode.Range16.ptr(3018, 3021, 1), new unicode.Range16.ptr(3031, 3031, 1), new unicode.Range16.ptr(3047, 3055, 1), new unicode.Range16.ptr(3073, 3075, 1), new unicode.Range16.ptr(3134, 3140, 1), new unicode.Range16.ptr(3142, 3144, 1), new unicode.Range16.ptr(3146, 3149, 1), new unicode.Range16.ptr(3157, 3158, 1), new unicode.Range16.ptr(3174, 3183, 1), new unicode.Range16.ptr(3202, 3203, 1), new unicode.Range16.ptr(3262, 3268, 1), new unicode.Range16.ptr(3270, 3272, 1), new unicode.Range16.ptr(3274, 3277, 1), new unicode.Range16.ptr(3285, 3286, 1), new unicode.Range16.ptr(3302, 3311, 1), new unicode.Range16.ptr(3330, 3331, 1), new unicode.Range16.ptr(3390, 3395, 1), new unicode.Range16.ptr(3398, 3400, 1), new unicode.Range16.ptr(3402, 3405, 1), new unicode.Range16.ptr(3415, 3415, 1), new unicode.Range16.ptr(3430, 3439, 1), new unicode.Range16.ptr(3633, 3633, 1), new unicode.Range16.ptr(3636, 3642, 1), new unicode.Range16.ptr(3654, 3654, 1), new unicode.Range16.ptr(3655, 3662, 1), new unicode.Range16.ptr(3664, 3673, 1), new unicode.Range16.ptr(3761, 3761, 1), new unicode.Range16.ptr(3764, 3769, 1), new unicode.Range16.ptr(3771, 3772, 1), new unicode.Range16.ptr(3782, 3782, 1), new unicode.Range16.ptr(3784, 3789, 1), new unicode.Range16.ptr(3792, 3801, 1), new unicode.Range16.ptr(3864, 3865, 1), new unicode.Range16.ptr(3872, 3881, 1), new unicode.Range16.ptr(3893, 3897, 2), new unicode.Range16.ptr(3902, 3903, 1), new unicode.Range16.ptr(3953, 3972, 1), new unicode.Range16.ptr(3974, 3979, 1), new unicode.Range16.ptr(3984, 3989, 1), new unicode.Range16.ptr(3991, 3991, 1), new unicode.Range16.ptr(3993, 4013, 1), new unicode.Range16.ptr(4017, 4023, 1), new unicode.Range16.ptr(4025, 4025, 1), new unicode.Range16.ptr(8400, 8412, 1), new unicode.Range16.ptr(8417, 12293, 3876), new unicode.Range16.ptr(12330, 12335, 1), new unicode.Range16.ptr(12337, 12341, 1), new unicode.Range16.ptr(12441, 12442, 1), new unicode.Range16.ptr(12445, 12446, 1), new unicode.Range16.ptr(12540, 12542, 1)]), sliceType$5.nil, 0);
		htmlEntity = (_map$1 = new $Map(), _key$1 = "nbsp", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA0" }, _key$1 = "iexcl", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA1" }, _key$1 = "cent", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA2" }, _key$1 = "pound", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA3" }, _key$1 = "curren", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA4" }, _key$1 = "yen", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA5" }, _key$1 = "brvbar", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA6" }, _key$1 = "sect", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA7" }, _key$1 = "uml", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA8" }, _key$1 = "copy", _map$1[_key$1] = { k: _key$1, v: "\xC2\xA9" }, _key$1 = "ordf", _map$1[_key$1] = { k: _key$1, v: "\xC2\xAA" }, _key$1 = "laquo", _map$1[_key$1] = { k: _key$1, v: "\xC2\xAB" }, _key$1 = "not", _map$1[_key$1] = { k: _key$1, v: "\xC2\xAC" }, _key$1 = "shy", _map$1[_key$1] = { k: _key$1, v: "\xC2\xAD" }, _key$1 = "reg", _map$1[_key$1] = { k: _key$1, v: "\xC2\xAE" }, _key$1 = "macr", _map$1[_key$1] = { k: _key$1, v: "\xC2\xAF" }, _key$1 = "deg", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB0" }, _key$1 = "plusmn", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB1" }, _key$1 = "sup2", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB2" }, _key$1 = "sup3", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB3" }, _key$1 = "acute", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB4" }, _key$1 = "micro", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB5" }, _key$1 = "para", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB6" }, _key$1 = "middot", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB7" }, _key$1 = "cedil", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB8" }, _key$1 = "sup1", _map$1[_key$1] = { k: _key$1, v: "\xC2\xB9" }, _key$1 = "ordm", _map$1[_key$1] = { k: _key$1, v: "\xC2\xBA" }, _key$1 = "raquo", _map$1[_key$1] = { k: _key$1, v: "\xC2\xBB" }, _key$1 = "frac14", _map$1[_key$1] = { k: _key$1, v: "\xC2\xBC" }, _key$1 = "frac12", _map$1[_key$1] = { k: _key$1, v: "\xC2\xBD" }, _key$1 = "frac34", _map$1[_key$1] = { k: _key$1, v: "\xC2\xBE" }, _key$1 = "iquest", _map$1[_key$1] = { k: _key$1, v: "\xC2\xBF" }, _key$1 = "Agrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\x80" }, _key$1 = "Aacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\x81" }, _key$1 = "Acirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\x82" }, _key$1 = "Atilde", _map$1[_key$1] = { k: _key$1, v: "\xC3\x83" }, _key$1 = "Auml", _map$1[_key$1] = { k: _key$1, v: "\xC3\x84" }, _key$1 = "Aring", _map$1[_key$1] = { k: _key$1, v: "\xC3\x85" }, _key$1 = "AElig", _map$1[_key$1] = { k: _key$1, v: "\xC3\x86" }, _key$1 = "Ccedil", _map$1[_key$1] = { k: _key$1, v: "\xC3\x87" }, _key$1 = "Egrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\x88" }, _key$1 = "Eacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\x89" }, _key$1 = "Ecirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\x8A" }, _key$1 = "Euml", _map$1[_key$1] = { k: _key$1, v: "\xC3\x8B" }, _key$1 = "Igrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\x8C" }, _key$1 = "Iacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\x8D" }, _key$1 = "Icirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\x8E" }, _key$1 = "Iuml", _map$1[_key$1] = { k: _key$1, v: "\xC3\x8F" }, _key$1 = "ETH", _map$1[_key$1] = { k: _key$1, v: "\xC3\x90" }, _key$1 = "Ntilde", _map$1[_key$1] = { k: _key$1, v: "\xC3\x91" }, _key$1 = "Ograve", _map$1[_key$1] = { k: _key$1, v: "\xC3\x92" }, _key$1 = "Oacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\x93" }, _key$1 = "Ocirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\x94" }, _key$1 = "Otilde", _map$1[_key$1] = { k: _key$1, v: "\xC3\x95" }, _key$1 = "Ouml", _map$1[_key$1] = { k: _key$1, v: "\xC3\x96" }, _key$1 = "times", _map$1[_key$1] = { k: _key$1, v: "\xC3\x97" }, _key$1 = "Oslash", _map$1[_key$1] = { k: _key$1, v: "\xC3\x98" }, _key$1 = "Ugrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\x99" }, _key$1 = "Uacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\x9A" }, _key$1 = "Ucirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\x9B" }, _key$1 = "Uuml", _map$1[_key$1] = { k: _key$1, v: "\xC3\x9C" }, _key$1 = "Yacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\x9D" }, _key$1 = "THORN", _map$1[_key$1] = { k: _key$1, v: "\xC3\x9E" }, _key$1 = "szlig", _map$1[_key$1] = { k: _key$1, v: "\xC3\x9F" }, _key$1 = "agrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA0" }, _key$1 = "aacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA1" }, _key$1 = "acirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA2" }, _key$1 = "atilde", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA3" }, _key$1 = "auml", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA4" }, _key$1 = "aring", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA5" }, _key$1 = "aelig", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA6" }, _key$1 = "ccedil", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA7" }, _key$1 = "egrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA8" }, _key$1 = "eacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\xA9" }, _key$1 = "ecirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\xAA" }, _key$1 = "euml", _map$1[_key$1] = { k: _key$1, v: "\xC3\xAB" }, _key$1 = "igrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\xAC" }, _key$1 = "iacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\xAD" }, _key$1 = "icirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\xAE" }, _key$1 = "iuml", _map$1[_key$1] = { k: _key$1, v: "\xC3\xAF" }, _key$1 = "eth", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB0" }, _key$1 = "ntilde", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB1" }, _key$1 = "ograve", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB2" }, _key$1 = "oacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB3" }, _key$1 = "ocirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB4" }, _key$1 = "otilde", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB5" }, _key$1 = "ouml", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB6" }, _key$1 = "divide", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB7" }, _key$1 = "oslash", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB8" }, _key$1 = "ugrave", _map$1[_key$1] = { k: _key$1, v: "\xC3\xB9" }, _key$1 = "uacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\xBA" }, _key$1 = "ucirc", _map$1[_key$1] = { k: _key$1, v: "\xC3\xBB" }, _key$1 = "uuml", _map$1[_key$1] = { k: _key$1, v: "\xC3\xBC" }, _key$1 = "yacute", _map$1[_key$1] = { k: _key$1, v: "\xC3\xBD" }, _key$1 = "thorn", _map$1[_key$1] = { k: _key$1, v: "\xC3\xBE" }, _key$1 = "yuml", _map$1[_key$1] = { k: _key$1, v: "\xC3\xBF" }, _key$1 = "fnof", _map$1[_key$1] = { k: _key$1, v: "\xC6\x92" }, _key$1 = "Alpha", _map$1[_key$1] = { k: _key$1, v: "\xCE\x91" }, _key$1 = "Beta", _map$1[_key$1] = { k: _key$1, v: "\xCE\x92" }, _key$1 = "Gamma", _map$1[_key$1] = { k: _key$1, v: "\xCE\x93" }, _key$1 = "Delta", _map$1[_key$1] = { k: _key$1, v: "\xCE\x94" }, _key$1 = "Epsilon", _map$1[_key$1] = { k: _key$1, v: "\xCE\x95" }, _key$1 = "Zeta", _map$1[_key$1] = { k: _key$1, v: "\xCE\x96" }, _key$1 = "Eta", _map$1[_key$1] = { k: _key$1, v: "\xCE\x97" }, _key$1 = "Theta", _map$1[_key$1] = { k: _key$1, v: "\xCE\x98" }, _key$1 = "Iota", _map$1[_key$1] = { k: _key$1, v: "\xCE\x99" }, _key$1 = "Kappa", _map$1[_key$1] = { k: _key$1, v: "\xCE\x9A" }, _key$1 = "Lambda", _map$1[_key$1] = { k: _key$1, v: "\xCE\x9B" }, _key$1 = "Mu", _map$1[_key$1] = { k: _key$1, v: "\xCE\x9C" }, _key$1 = "Nu", _map$1[_key$1] = { k: _key$1, v: "\xCE\x9D" }, _key$1 = "Xi", _map$1[_key$1] = { k: _key$1, v: "\xCE\x9E" }, _key$1 = "Omicron", _map$1[_key$1] = { k: _key$1, v: "\xCE\x9F" }, _key$1 = "Pi", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA0" }, _key$1 = "Rho", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA1" }, _key$1 = "Sigma", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA3" }, _key$1 = "Tau", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA4" }, _key$1 = "Upsilon", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA5" }, _key$1 = "Phi", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA6" }, _key$1 = "Chi", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA7" }, _key$1 = "Psi", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA8" }, _key$1 = "Omega", _map$1[_key$1] = { k: _key$1, v: "\xCE\xA9" }, _key$1 = "alpha", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB1" }, _key$1 = "beta", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB2" }, _key$1 = "gamma", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB3" }, _key$1 = "delta", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB4" }, _key$1 = "epsilon", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB5" }, _key$1 = "zeta", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB6" }, _key$1 = "eta", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB7" }, _key$1 = "theta", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB8" }, _key$1 = "iota", _map$1[_key$1] = { k: _key$1, v: "\xCE\xB9" }, _key$1 = "kappa", _map$1[_key$1] = { k: _key$1, v: "\xCE\xBA" }, _key$1 = "lambda", _map$1[_key$1] = { k: _key$1, v: "\xCE\xBB" }, _key$1 = "mu", _map$1[_key$1] = { k: _key$1, v: "\xCE\xBC" }, _key$1 = "nu", _map$1[_key$1] = { k: _key$1, v: "\xCE\xBD" }, _key$1 = "xi", _map$1[_key$1] = { k: _key$1, v: "\xCE\xBE" }, _key$1 = "omicron", _map$1[_key$1] = { k: _key$1, v: "\xCE\xBF" }, _key$1 = "pi", _map$1[_key$1] = { k: _key$1, v: "\xCF\x80" }, _key$1 = "rho", _map$1[_key$1] = { k: _key$1, v: "\xCF\x81" }, _key$1 = "sigmaf", _map$1[_key$1] = { k: _key$1, v: "\xCF\x82" }, _key$1 = "sigma", _map$1[_key$1] = { k: _key$1, v: "\xCF\x83" }, _key$1 = "tau", _map$1[_key$1] = { k: _key$1, v: "\xCF\x84" }, _key$1 = "upsilon", _map$1[_key$1] = { k: _key$1, v: "\xCF\x85" }, _key$1 = "phi", _map$1[_key$1] = { k: _key$1, v: "\xCF\x86" }, _key$1 = "chi", _map$1[_key$1] = { k: _key$1, v: "\xCF\x87" }, _key$1 = "psi", _map$1[_key$1] = { k: _key$1, v: "\xCF\x88" }, _key$1 = "omega", _map$1[_key$1] = { k: _key$1, v: "\xCF\x89" }, _key$1 = "thetasym", _map$1[_key$1] = { k: _key$1, v: "\xCF\x91" }, _key$1 = "upsih", _map$1[_key$1] = { k: _key$1, v: "\xCF\x92" }, _key$1 = "piv", _map$1[_key$1] = { k: _key$1, v: "\xCF\x96" }, _key$1 = "bull", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xA2" }, _key$1 = "hellip", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xA6" }, _key$1 = "prime", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xB2" }, _key$1 = "Prime", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xB3" }, _key$1 = "oline", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xBE" }, _key$1 = "frasl", _map$1[_key$1] = { k: _key$1, v: "\xE2\x81\x84" }, _key$1 = "weierp", _map$1[_key$1] = { k: _key$1, v: "\xE2\x84\x98" }, _key$1 = "image", _map$1[_key$1] = { k: _key$1, v: "\xE2\x84\x91" }, _key$1 = "real", _map$1[_key$1] = { k: _key$1, v: "\xE2\x84\x9C" }, _key$1 = "trade", _map$1[_key$1] = { k: _key$1, v: "\xE2\x84\xA2" }, _key$1 = "alefsym", _map$1[_key$1] = { k: _key$1, v: "\xE2\x84\xB5" }, _key$1 = "larr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x86\x90" }, _key$1 = "uarr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x86\x91" }, _key$1 = "rarr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x86\x92" }, _key$1 = "darr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x86\x93" }, _key$1 = "harr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x86\x94" }, _key$1 = "crarr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x86\xB5" }, _key$1 = "lArr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x87\x90" }, _key$1 = "uArr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x87\x91" }, _key$1 = "rArr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x87\x92" }, _key$1 = "dArr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x87\x93" }, _key$1 = "hArr", _map$1[_key$1] = { k: _key$1, v: "\xE2\x87\x94" }, _key$1 = "forall", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x80" }, _key$1 = "part", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x82" }, _key$1 = "exist", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x83" }, _key$1 = "empty", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x85" }, _key$1 = "nabla", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x87" }, _key$1 = "isin", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x88" }, _key$1 = "notin", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x89" }, _key$1 = "ni", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x8B" }, _key$1 = "prod", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x8F" }, _key$1 = "sum", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x91" }, _key$1 = "minus", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x92" }, _key$1 = "lowast", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x97" }, _key$1 = "radic", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x9A" }, _key$1 = "prop", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x9D" }, _key$1 = "infin", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\x9E" }, _key$1 = "ang", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xA0" }, _key$1 = "and", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xA7" }, _key$1 = "or", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xA8" }, _key$1 = "cap", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xA9" }, _key$1 = "cup", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xAA" }, _key$1 = "int", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xAB" }, _key$1 = "there4", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xB4" }, _key$1 = "sim", _map$1[_key$1] = { k: _key$1, v: "\xE2\x88\xBC" }, _key$1 = "cong", _map$1[_key$1] = { k: _key$1, v: "\xE2\x89\x85" }, _key$1 = "asymp", _map$1[_key$1] = { k: _key$1, v: "\xE2\x89\x88" }, _key$1 = "ne", _map$1[_key$1] = { k: _key$1, v: "\xE2\x89\xA0" }, _key$1 = "equiv", _map$1[_key$1] = { k: _key$1, v: "\xE2\x89\xA1" }, _key$1 = "le", _map$1[_key$1] = { k: _key$1, v: "\xE2\x89\xA4" }, _key$1 = "ge", _map$1[_key$1] = { k: _key$1, v: "\xE2\x89\xA5" }, _key$1 = "sub", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x82" }, _key$1 = "sup", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x83" }, _key$1 = "nsub", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x84" }, _key$1 = "sube", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x86" }, _key$1 = "supe", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x87" }, _key$1 = "oplus", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x95" }, _key$1 = "otimes", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\x97" }, _key$1 = "perp", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8A\xA5" }, _key$1 = "sdot", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8B\x85" }, _key$1 = "lceil", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8C\x88" }, _key$1 = "rceil", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8C\x89" }, _key$1 = "lfloor", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8C\x8A" }, _key$1 = "rfloor", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8C\x8B" }, _key$1 = "lang", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8C\xA9" }, _key$1 = "rang", _map$1[_key$1] = { k: _key$1, v: "\xE2\x8C\xAA" }, _key$1 = "loz", _map$1[_key$1] = { k: _key$1, v: "\xE2\x97\x8A" }, _key$1 = "spades", _map$1[_key$1] = { k: _key$1, v: "\xE2\x99\xA0" }, _key$1 = "clubs", _map$1[_key$1] = { k: _key$1, v: "\xE2\x99\xA3" }, _key$1 = "hearts", _map$1[_key$1] = { k: _key$1, v: "\xE2\x99\xA5" }, _key$1 = "diams", _map$1[_key$1] = { k: _key$1, v: "\xE2\x99\xA6" }, _key$1 = "quot", _map$1[_key$1] = { k: _key$1, v: "\"" }, _key$1 = "amp", _map$1[_key$1] = { k: _key$1, v: "&" }, _key$1 = "lt", _map$1[_key$1] = { k: _key$1, v: "<" }, _key$1 = "gt", _map$1[_key$1] = { k: _key$1, v: ">" }, _key$1 = "OElig", _map$1[_key$1] = { k: _key$1, v: "\xC5\x92" }, _key$1 = "oelig", _map$1[_key$1] = { k: _key$1, v: "\xC5\x93" }, _key$1 = "Scaron", _map$1[_key$1] = { k: _key$1, v: "\xC5\xA0" }, _key$1 = "scaron", _map$1[_key$1] = { k: _key$1, v: "\xC5\xA1" }, _key$1 = "Yuml", _map$1[_key$1] = { k: _key$1, v: "\xC5\xB8" }, _key$1 = "circ", _map$1[_key$1] = { k: _key$1, v: "\xCB\x86" }, _key$1 = "tilde", _map$1[_key$1] = { k: _key$1, v: "\xCB\x9C" }, _key$1 = "ensp", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x82" }, _key$1 = "emsp", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x83" }, _key$1 = "thinsp", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x89" }, _key$1 = "zwnj", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x8C" }, _key$1 = "zwj", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x8D" }, _key$1 = "lrm", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x8E" }, _key$1 = "rlm", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x8F" }, _key$1 = "ndash", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x93" }, _key$1 = "mdash", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x94" }, _key$1 = "lsquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x98" }, _key$1 = "rsquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x99" }, _key$1 = "sbquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x9A" }, _key$1 = "ldquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x9C" }, _key$1 = "rdquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x9D" }, _key$1 = "bdquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\x9E" }, _key$1 = "dagger", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xA0" }, _key$1 = "Dagger", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xA1" }, _key$1 = "permil", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xB0" }, _key$1 = "lsaquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xB9" }, _key$1 = "rsaquo", _map$1[_key$1] = { k: _key$1, v: "\xE2\x80\xBA" }, _key$1 = "euro", _map$1[_key$1] = { k: _key$1, v: "\xE2\x82\xAC" }, _map$1);
		$pkg.HTMLEntity = htmlEntity;
		htmlAutoClose = new sliceType$8(["basefont", "br", "area", "link", "img", "param", "hr", "input", "col", "frame", "isindex", "base", "meta"]);
		$pkg.HTMLAutoClose = htmlAutoClose;
		esc_quot = new sliceType$9($stringToBytes("&#34;"));
		esc_apos = new sliceType$10($stringToBytes("&#39;"));
		esc_amp = new sliceType$11($stringToBytes("&amp;"));
		esc_lt = new sliceType$12($stringToBytes("&lt;"));
		esc_gt = new sliceType$13($stringToBytes("&gt;"));
		esc_tab = new sliceType$14($stringToBytes("&#x9;"));
		esc_nl = new sliceType$15($stringToBytes("&#xA;"));
		esc_cr = new sliceType$16($stringToBytes("&#xD;"));
		esc_fffd = new sliceType$17($stringToBytes("\xEF\xBF\xBD"));
		/* */ } return; } }; $init_xml.$blocking = true; return $init_xml;
	};
	return $pkg;
})();
$packages["html"] = (function() {
	var $pkg = {}, bytes, strings, utf8, arrayType, sliceType, entity, entity2, replacementTable, _map, _key, _map$1, _key$1, unescapeEntity, unescape, UnescapeString;
	bytes = $packages["bytes"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	arrayType = $arrayType($Int32, 2);
	sliceType = $sliceType($Uint8);
	unescapeEntity = function(b, dst, src, attribute) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, attribute, b, c, c$1, dst, dst1 = 0, dst1$1, entityName, hex, i, j, maxLen, s, src, src1 = 0, x, x$1, x$2, x$3, x$4;
		_tmp = 1; _tmp$1 = $subslice(b, src); i = _tmp; s = _tmp$1;
		if (s.$length <= 1) {
			((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
			_tmp$2 = dst + 1 >> 0; _tmp$3 = src + 1 >> 0; dst1 = _tmp$2; src1 = _tmp$3;
			return [dst1, src1];
		}
		if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 35) {
			if (s.$length <= 3) {
				((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
				_tmp$4 = dst + 1 >> 0; _tmp$5 = src + 1 >> 0; dst1 = _tmp$4; src1 = _tmp$5;
				return [dst1, src1];
			}
			i = i + (1) >> 0;
			c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			hex = false;
			if ((c === 120) || (c === 88)) {
				hex = true;
				i = i + (1) >> 0;
			}
			x = 0;
			while (true) {
				if (!(i < s.$length)) { break; }
				c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
				i = i + (1) >> 0;
				if (hex) {
					if (48 <= c && c <= 57) {
						x = (((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
						continue;
					} else if (97 <= c && c <= 102) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 97 >> 0) + 10 >> 0;
						continue;
					} else if (65 <= c && c <= 70) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 65 >> 0) + 10 >> 0;
						continue;
					}
				} else if (48 <= c && c <= 57) {
					x = (((((10 >>> 16 << 16) * x >> 0) + (10 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
					continue;
				}
				if (!((c === 59))) {
					i = i - (1) >> 0;
				}
				break;
			}
			if (i <= 3) {
				((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]));
				_tmp$6 = dst + 1 >> 0; _tmp$7 = src + 1 >> 0; dst1 = _tmp$6; src1 = _tmp$7;
				return [dst1, src1];
			}
			if (128 <= x && x <= 159) {
				x = (x$1 = x - 128 >> 0, ((x$1 < 0 || x$1 >= replacementTable.length) ? $throwRuntimeError("index out of range") : replacementTable[x$1]));
			} else if ((x === 0) || (55296 <= x && x <= 57343) || x > 1114111) {
				x = 65533;
			}
			_tmp$8 = dst + utf8.EncodeRune($subslice(b, dst), x) >> 0; _tmp$9 = src + i >> 0; dst1 = _tmp$8; src1 = _tmp$9;
			return [dst1, src1];
		}
		while (true) {
			if (!(i < s.$length)) { break; }
			c$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			i = i + (1) >> 0;
			if (97 <= c$1 && c$1 <= 122 || 65 <= c$1 && c$1 <= 90 || 48 <= c$1 && c$1 <= 57) {
				continue;
			}
			if (!((c$1 === 59))) {
				i = i - (1) >> 0;
			}
			break;
		}
		entityName = $bytesToString($subslice(s, 1, i));
		if (entityName === "") {
		} else if (attribute && !((entityName.charCodeAt((entityName.length - 1 >> 0)) === 59)) && s.$length > i && (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 61)) {
		} else {
			x$2 = (_entry = entity[entityName], _entry !== undefined ? _entry.v : 0);
			if (!((x$2 === 0))) {
				_tmp$10 = dst + utf8.EncodeRune($subslice(b, dst), x$2) >> 0; _tmp$11 = src + i >> 0; dst1 = _tmp$10; src1 = _tmp$11;
				return [dst1, src1];
			} else {
				x$3 = $clone((_entry$1 = entity2[entityName], _entry$1 !== undefined ? _entry$1.v : arrayType.zero()), arrayType);
				if (!((x$3[0] === 0))) {
					dst1$1 = dst + utf8.EncodeRune($subslice(b, dst), x$3[0]) >> 0;
					_tmp$12 = dst1$1 + utf8.EncodeRune($subslice(b, dst1$1), x$3[1]) >> 0; _tmp$13 = src + i >> 0; dst1 = _tmp$12; src1 = _tmp$13;
					return [dst1, src1];
				} else if (!attribute) {
					maxLen = entityName.length - 1 >> 0;
					if (maxLen > 6) {
						maxLen = 6;
					}
					j = maxLen;
					while (true) {
						if (!(j > 1)) { break; }
						x$4 = (_entry$2 = entity[entityName.substring(0, j)], _entry$2 !== undefined ? _entry$2.v : 0);
						if (!((x$4 === 0))) {
							_tmp$14 = dst + utf8.EncodeRune($subslice(b, dst), x$4) >> 0; _tmp$15 = (src + j >> 0) + 1 >> 0; dst1 = _tmp$14; src1 = _tmp$15;
							return [dst1, src1];
						}
						j = j - (1) >> 0;
					}
				}
			}
		}
		_tmp$16 = dst + i >> 0; _tmp$17 = src + i >> 0; dst1 = _tmp$16; src1 = _tmp$17;
		$copySlice($subslice(b, dst, dst1), $subslice(b, src, src1));
		_tmp$18 = dst1; _tmp$19 = src1; dst1 = _tmp$18; src1 = _tmp$19;
		return [dst1, src1];
	};
	unescape = function(b) {
		var _i, _ref, _tmp, _tmp$1, _tuple, _tuple$1, b, c, c$1, dst, i, src;
		_ref = b;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c === 38) {
				_tuple = unescapeEntity(b, i, i, false); dst = _tuple[0]; src = _tuple[1];
				while (true) {
					if (!(src < b.$length)) { break; }
					c$1 = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]);
					if (c$1 === 38) {
						_tuple$1 = unescapeEntity(b, dst, src, false); dst = _tuple$1[0]; src = _tuple$1[1];
					} else {
						((dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = c$1);
						_tmp = dst + 1 >> 0; _tmp$1 = src + 1 >> 0; dst = _tmp; src = _tmp$1;
					}
				}
				return $subslice(b, 0, dst);
			}
			_i++;
		}
		return b;
	};
	UnescapeString = $pkg.UnescapeString = function(s) {
		var _i, _ref, _rune, c, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 38) {
				return $bytesToString(unescape(new sliceType($stringToBytes(s))));
			}
			_i += _rune[1];
		}
		return s;
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_html = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		entity = (_map = new $Map(), _key = "AElig;", _map[_key] = { k: _key, v: 198 }, _key = "AMP;", _map[_key] = { k: _key, v: 38 }, _key = "Aacute;", _map[_key] = { k: _key, v: 193 }, _key = "Abreve;", _map[_key] = { k: _key, v: 258 }, _key = "Acirc;", _map[_key] = { k: _key, v: 194 }, _key = "Acy;", _map[_key] = { k: _key, v: 1040 }, _key = "Afr;", _map[_key] = { k: _key, v: 120068 }, _key = "Agrave;", _map[_key] = { k: _key, v: 192 }, _key = "Alpha;", _map[_key] = { k: _key, v: 913 }, _key = "Amacr;", _map[_key] = { k: _key, v: 256 }, _key = "And;", _map[_key] = { k: _key, v: 10835 }, _key = "Aogon;", _map[_key] = { k: _key, v: 260 }, _key = "Aopf;", _map[_key] = { k: _key, v: 120120 }, _key = "ApplyFunction;", _map[_key] = { k: _key, v: 8289 }, _key = "Aring;", _map[_key] = { k: _key, v: 197 }, _key = "Ascr;", _map[_key] = { k: _key, v: 119964 }, _key = "Assign;", _map[_key] = { k: _key, v: 8788 }, _key = "Atilde;", _map[_key] = { k: _key, v: 195 }, _key = "Auml;", _map[_key] = { k: _key, v: 196 }, _key = "Backslash;", _map[_key] = { k: _key, v: 8726 }, _key = "Barv;", _map[_key] = { k: _key, v: 10983 }, _key = "Barwed;", _map[_key] = { k: _key, v: 8966 }, _key = "Bcy;", _map[_key] = { k: _key, v: 1041 }, _key = "Because;", _map[_key] = { k: _key, v: 8757 }, _key = "Bernoullis;", _map[_key] = { k: _key, v: 8492 }, _key = "Beta;", _map[_key] = { k: _key, v: 914 }, _key = "Bfr;", _map[_key] = { k: _key, v: 120069 }, _key = "Bopf;", _map[_key] = { k: _key, v: 120121 }, _key = "Breve;", _map[_key] = { k: _key, v: 728 }, _key = "Bscr;", _map[_key] = { k: _key, v: 8492 }, _key = "Bumpeq;", _map[_key] = { k: _key, v: 8782 }, _key = "CHcy;", _map[_key] = { k: _key, v: 1063 }, _key = "COPY;", _map[_key] = { k: _key, v: 169 }, _key = "Cacute;", _map[_key] = { k: _key, v: 262 }, _key = "Cap;", _map[_key] = { k: _key, v: 8914 }, _key = "CapitalDifferentialD;", _map[_key] = { k: _key, v: 8517 }, _key = "Cayleys;", _map[_key] = { k: _key, v: 8493 }, _key = "Ccaron;", _map[_key] = { k: _key, v: 268 }, _key = "Ccedil;", _map[_key] = { k: _key, v: 199 }, _key = "Ccirc;", _map[_key] = { k: _key, v: 264 }, _key = "Cconint;", _map[_key] = { k: _key, v: 8752 }, _key = "Cdot;", _map[_key] = { k: _key, v: 266 }, _key = "Cedilla;", _map[_key] = { k: _key, v: 184 }, _key = "CenterDot;", _map[_key] = { k: _key, v: 183 }, _key = "Cfr;", _map[_key] = { k: _key, v: 8493 }, _key = "Chi;", _map[_key] = { k: _key, v: 935 }, _key = "CircleDot;", _map[_key] = { k: _key, v: 8857 }, _key = "CircleMinus;", _map[_key] = { k: _key, v: 8854 }, _key = "CirclePlus;", _map[_key] = { k: _key, v: 8853 }, _key = "CircleTimes;", _map[_key] = { k: _key, v: 8855 }, _key = "ClockwiseContourIntegral;", _map[_key] = { k: _key, v: 8754 }, _key = "CloseCurlyDoubleQuote;", _map[_key] = { k: _key, v: 8221 }, _key = "CloseCurlyQuote;", _map[_key] = { k: _key, v: 8217 }, _key = "Colon;", _map[_key] = { k: _key, v: 8759 }, _key = "Colone;", _map[_key] = { k: _key, v: 10868 }, _key = "Congruent;", _map[_key] = { k: _key, v: 8801 }, _key = "Conint;", _map[_key] = { k: _key, v: 8751 }, _key = "ContourIntegral;", _map[_key] = { k: _key, v: 8750 }, _key = "Copf;", _map[_key] = { k: _key, v: 8450 }, _key = "Coproduct;", _map[_key] = { k: _key, v: 8720 }, _key = "CounterClockwiseContourIntegral;", _map[_key] = { k: _key, v: 8755 }, _key = "Cross;", _map[_key] = { k: _key, v: 10799 }, _key = "Cscr;", _map[_key] = { k: _key, v: 119966 }, _key = "Cup;", _map[_key] = { k: _key, v: 8915 }, _key = "CupCap;", _map[_key] = { k: _key, v: 8781 }, _key = "DD;", _map[_key] = { k: _key, v: 8517 }, _key = "DDotrahd;", _map[_key] = { k: _key, v: 10513 }, _key = "DJcy;", _map[_key] = { k: _key, v: 1026 }, _key = "DScy;", _map[_key] = { k: _key, v: 1029 }, _key = "DZcy;", _map[_key] = { k: _key, v: 1039 }, _key = "Dagger;", _map[_key] = { k: _key, v: 8225 }, _key = "Darr;", _map[_key] = { k: _key, v: 8609 }, _key = "Dashv;", _map[_key] = { k: _key, v: 10980 }, _key = "Dcaron;", _map[_key] = { k: _key, v: 270 }, _key = "Dcy;", _map[_key] = { k: _key, v: 1044 }, _key = "Del;", _map[_key] = { k: _key, v: 8711 }, _key = "Delta;", _map[_key] = { k: _key, v: 916 }, _key = "Dfr;", _map[_key] = { k: _key, v: 120071 }, _key = "DiacriticalAcute;", _map[_key] = { k: _key, v: 180 }, _key = "DiacriticalDot;", _map[_key] = { k: _key, v: 729 }, _key = "DiacriticalDoubleAcute;", _map[_key] = { k: _key, v: 733 }, _key = "DiacriticalGrave;", _map[_key] = { k: _key, v: 96 }, _key = "DiacriticalTilde;", _map[_key] = { k: _key, v: 732 }, _key = "Diamond;", _map[_key] = { k: _key, v: 8900 }, _key = "DifferentialD;", _map[_key] = { k: _key, v: 8518 }, _key = "Dopf;", _map[_key] = { k: _key, v: 120123 }, _key = "Dot;", _map[_key] = { k: _key, v: 168 }, _key = "DotDot;", _map[_key] = { k: _key, v: 8412 }, _key = "DotEqual;", _map[_key] = { k: _key, v: 8784 }, _key = "DoubleContourIntegral;", _map[_key] = { k: _key, v: 8751 }, _key = "DoubleDot;", _map[_key] = { k: _key, v: 168 }, _key = "DoubleDownArrow;", _map[_key] = { k: _key, v: 8659 }, _key = "DoubleLeftArrow;", _map[_key] = { k: _key, v: 8656 }, _key = "DoubleLeftRightArrow;", _map[_key] = { k: _key, v: 8660 }, _key = "DoubleLeftTee;", _map[_key] = { k: _key, v: 10980 }, _key = "DoubleLongLeftArrow;", _map[_key] = { k: _key, v: 10232 }, _key = "DoubleLongLeftRightArrow;", _map[_key] = { k: _key, v: 10234 }, _key = "DoubleLongRightArrow;", _map[_key] = { k: _key, v: 10233 }, _key = "DoubleRightArrow;", _map[_key] = { k: _key, v: 8658 }, _key = "DoubleRightTee;", _map[_key] = { k: _key, v: 8872 }, _key = "DoubleUpArrow;", _map[_key] = { k: _key, v: 8657 }, _key = "DoubleUpDownArrow;", _map[_key] = { k: _key, v: 8661 }, _key = "DoubleVerticalBar;", _map[_key] = { k: _key, v: 8741 }, _key = "DownArrow;", _map[_key] = { k: _key, v: 8595 }, _key = "DownArrowBar;", _map[_key] = { k: _key, v: 10515 }, _key = "DownArrowUpArrow;", _map[_key] = { k: _key, v: 8693 }, _key = "DownBreve;", _map[_key] = { k: _key, v: 785 }, _key = "DownLeftRightVector;", _map[_key] = { k: _key, v: 10576 }, _key = "DownLeftTeeVector;", _map[_key] = { k: _key, v: 10590 }, _key = "DownLeftVector;", _map[_key] = { k: _key, v: 8637 }, _key = "DownLeftVectorBar;", _map[_key] = { k: _key, v: 10582 }, _key = "DownRightTeeVector;", _map[_key] = { k: _key, v: 10591 }, _key = "DownRightVector;", _map[_key] = { k: _key, v: 8641 }, _key = "DownRightVectorBar;", _map[_key] = { k: _key, v: 10583 }, _key = "DownTee;", _map[_key] = { k: _key, v: 8868 }, _key = "DownTeeArrow;", _map[_key] = { k: _key, v: 8615 }, _key = "Downarrow;", _map[_key] = { k: _key, v: 8659 }, _key = "Dscr;", _map[_key] = { k: _key, v: 119967 }, _key = "Dstrok;", _map[_key] = { k: _key, v: 272 }, _key = "ENG;", _map[_key] = { k: _key, v: 330 }, _key = "ETH;", _map[_key] = { k: _key, v: 208 }, _key = "Eacute;", _map[_key] = { k: _key, v: 201 }, _key = "Ecaron;", _map[_key] = { k: _key, v: 282 }, _key = "Ecirc;", _map[_key] = { k: _key, v: 202 }, _key = "Ecy;", _map[_key] = { k: _key, v: 1069 }, _key = "Edot;", _map[_key] = { k: _key, v: 278 }, _key = "Efr;", _map[_key] = { k: _key, v: 120072 }, _key = "Egrave;", _map[_key] = { k: _key, v: 200 }, _key = "Element;", _map[_key] = { k: _key, v: 8712 }, _key = "Emacr;", _map[_key] = { k: _key, v: 274 }, _key = "EmptySmallSquare;", _map[_key] = { k: _key, v: 9723 }, _key = "EmptyVerySmallSquare;", _map[_key] = { k: _key, v: 9643 }, _key = "Eogon;", _map[_key] = { k: _key, v: 280 }, _key = "Eopf;", _map[_key] = { k: _key, v: 120124 }, _key = "Epsilon;", _map[_key] = { k: _key, v: 917 }, _key = "Equal;", _map[_key] = { k: _key, v: 10869 }, _key = "EqualTilde;", _map[_key] = { k: _key, v: 8770 }, _key = "Equilibrium;", _map[_key] = { k: _key, v: 8652 }, _key = "Escr;", _map[_key] = { k: _key, v: 8496 }, _key = "Esim;", _map[_key] = { k: _key, v: 10867 }, _key = "Eta;", _map[_key] = { k: _key, v: 919 }, _key = "Euml;", _map[_key] = { k: _key, v: 203 }, _key = "Exists;", _map[_key] = { k: _key, v: 8707 }, _key = "ExponentialE;", _map[_key] = { k: _key, v: 8519 }, _key = "Fcy;", _map[_key] = { k: _key, v: 1060 }, _key = "Ffr;", _map[_key] = { k: _key, v: 120073 }, _key = "FilledSmallSquare;", _map[_key] = { k: _key, v: 9724 }, _key = "FilledVerySmallSquare;", _map[_key] = { k: _key, v: 9642 }, _key = "Fopf;", _map[_key] = { k: _key, v: 120125 }, _key = "ForAll;", _map[_key] = { k: _key, v: 8704 }, _key = "Fouriertrf;", _map[_key] = { k: _key, v: 8497 }, _key = "Fscr;", _map[_key] = { k: _key, v: 8497 }, _key = "GJcy;", _map[_key] = { k: _key, v: 1027 }, _key = "GT;", _map[_key] = { k: _key, v: 62 }, _key = "Gamma;", _map[_key] = { k: _key, v: 915 }, _key = "Gammad;", _map[_key] = { k: _key, v: 988 }, _key = "Gbreve;", _map[_key] = { k: _key, v: 286 }, _key = "Gcedil;", _map[_key] = { k: _key, v: 290 }, _key = "Gcirc;", _map[_key] = { k: _key, v: 284 }, _key = "Gcy;", _map[_key] = { k: _key, v: 1043 }, _key = "Gdot;", _map[_key] = { k: _key, v: 288 }, _key = "Gfr;", _map[_key] = { k: _key, v: 120074 }, _key = "Gg;", _map[_key] = { k: _key, v: 8921 }, _key = "Gopf;", _map[_key] = { k: _key, v: 120126 }, _key = "GreaterEqual;", _map[_key] = { k: _key, v: 8805 }, _key = "GreaterEqualLess;", _map[_key] = { k: _key, v: 8923 }, _key = "GreaterFullEqual;", _map[_key] = { k: _key, v: 8807 }, _key = "GreaterGreater;", _map[_key] = { k: _key, v: 10914 }, _key = "GreaterLess;", _map[_key] = { k: _key, v: 8823 }, _key = "GreaterSlantEqual;", _map[_key] = { k: _key, v: 10878 }, _key = "GreaterTilde;", _map[_key] = { k: _key, v: 8819 }, _key = "Gscr;", _map[_key] = { k: _key, v: 119970 }, _key = "Gt;", _map[_key] = { k: _key, v: 8811 }, _key = "HARDcy;", _map[_key] = { k: _key, v: 1066 }, _key = "Hacek;", _map[_key] = { k: _key, v: 711 }, _key = "Hat;", _map[_key] = { k: _key, v: 94 }, _key = "Hcirc;", _map[_key] = { k: _key, v: 292 }, _key = "Hfr;", _map[_key] = { k: _key, v: 8460 }, _key = "HilbertSpace;", _map[_key] = { k: _key, v: 8459 }, _key = "Hopf;", _map[_key] = { k: _key, v: 8461 }, _key = "HorizontalLine;", _map[_key] = { k: _key, v: 9472 }, _key = "Hscr;", _map[_key] = { k: _key, v: 8459 }, _key = "Hstrok;", _map[_key] = { k: _key, v: 294 }, _key = "HumpDownHump;", _map[_key] = { k: _key, v: 8782 }, _key = "HumpEqual;", _map[_key] = { k: _key, v: 8783 }, _key = "IEcy;", _map[_key] = { k: _key, v: 1045 }, _key = "IJlig;", _map[_key] = { k: _key, v: 306 }, _key = "IOcy;", _map[_key] = { k: _key, v: 1025 }, _key = "Iacute;", _map[_key] = { k: _key, v: 205 }, _key = "Icirc;", _map[_key] = { k: _key, v: 206 }, _key = "Icy;", _map[_key] = { k: _key, v: 1048 }, _key = "Idot;", _map[_key] = { k: _key, v: 304 }, _key = "Ifr;", _map[_key] = { k: _key, v: 8465 }, _key = "Igrave;", _map[_key] = { k: _key, v: 204 }, _key = "Im;", _map[_key] = { k: _key, v: 8465 }, _key = "Imacr;", _map[_key] = { k: _key, v: 298 }, _key = "ImaginaryI;", _map[_key] = { k: _key, v: 8520 }, _key = "Implies;", _map[_key] = { k: _key, v: 8658 }, _key = "Int;", _map[_key] = { k: _key, v: 8748 }, _key = "Integral;", _map[_key] = { k: _key, v: 8747 }, _key = "Intersection;", _map[_key] = { k: _key, v: 8898 }, _key = "InvisibleComma;", _map[_key] = { k: _key, v: 8291 }, _key = "InvisibleTimes;", _map[_key] = { k: _key, v: 8290 }, _key = "Iogon;", _map[_key] = { k: _key, v: 302 }, _key = "Iopf;", _map[_key] = { k: _key, v: 120128 }, _key = "Iota;", _map[_key] = { k: _key, v: 921 }, _key = "Iscr;", _map[_key] = { k: _key, v: 8464 }, _key = "Itilde;", _map[_key] = { k: _key, v: 296 }, _key = "Iukcy;", _map[_key] = { k: _key, v: 1030 }, _key = "Iuml;", _map[_key] = { k: _key, v: 207 }, _key = "Jcirc;", _map[_key] = { k: _key, v: 308 }, _key = "Jcy;", _map[_key] = { k: _key, v: 1049 }, _key = "Jfr;", _map[_key] = { k: _key, v: 120077 }, _key = "Jopf;", _map[_key] = { k: _key, v: 120129 }, _key = "Jscr;", _map[_key] = { k: _key, v: 119973 }, _key = "Jsercy;", _map[_key] = { k: _key, v: 1032 }, _key = "Jukcy;", _map[_key] = { k: _key, v: 1028 }, _key = "KHcy;", _map[_key] = { k: _key, v: 1061 }, _key = "KJcy;", _map[_key] = { k: _key, v: 1036 }, _key = "Kappa;", _map[_key] = { k: _key, v: 922 }, _key = "Kcedil;", _map[_key] = { k: _key, v: 310 }, _key = "Kcy;", _map[_key] = { k: _key, v: 1050 }, _key = "Kfr;", _map[_key] = { k: _key, v: 120078 }, _key = "Kopf;", _map[_key] = { k: _key, v: 120130 }, _key = "Kscr;", _map[_key] = { k: _key, v: 119974 }, _key = "LJcy;", _map[_key] = { k: _key, v: 1033 }, _key = "LT;", _map[_key] = { k: _key, v: 60 }, _key = "Lacute;", _map[_key] = { k: _key, v: 313 }, _key = "Lambda;", _map[_key] = { k: _key, v: 923 }, _key = "Lang;", _map[_key] = { k: _key, v: 10218 }, _key = "Laplacetrf;", _map[_key] = { k: _key, v: 8466 }, _key = "Larr;", _map[_key] = { k: _key, v: 8606 }, _key = "Lcaron;", _map[_key] = { k: _key, v: 317 }, _key = "Lcedil;", _map[_key] = { k: _key, v: 315 }, _key = "Lcy;", _map[_key] = { k: _key, v: 1051 }, _key = "LeftAngleBracket;", _map[_key] = { k: _key, v: 10216 }, _key = "LeftArrow;", _map[_key] = { k: _key, v: 8592 }, _key = "LeftArrowBar;", _map[_key] = { k: _key, v: 8676 }, _key = "LeftArrowRightArrow;", _map[_key] = { k: _key, v: 8646 }, _key = "LeftCeiling;", _map[_key] = { k: _key, v: 8968 }, _key = "LeftDoubleBracket;", _map[_key] = { k: _key, v: 10214 }, _key = "LeftDownTeeVector;", _map[_key] = { k: _key, v: 10593 }, _key = "LeftDownVector;", _map[_key] = { k: _key, v: 8643 }, _key = "LeftDownVectorBar;", _map[_key] = { k: _key, v: 10585 }, _key = "LeftFloor;", _map[_key] = { k: _key, v: 8970 }, _key = "LeftRightArrow;", _map[_key] = { k: _key, v: 8596 }, _key = "LeftRightVector;", _map[_key] = { k: _key, v: 10574 }, _key = "LeftTee;", _map[_key] = { k: _key, v: 8867 }, _key = "LeftTeeArrow;", _map[_key] = { k: _key, v: 8612 }, _key = "LeftTeeVector;", _map[_key] = { k: _key, v: 10586 }, _key = "LeftTriangle;", _map[_key] = { k: _key, v: 8882 }, _key = "LeftTriangleBar;", _map[_key] = { k: _key, v: 10703 }, _key = "LeftTriangleEqual;", _map[_key] = { k: _key, v: 8884 }, _key = "LeftUpDownVector;", _map[_key] = { k: _key, v: 10577 }, _key = "LeftUpTeeVector;", _map[_key] = { k: _key, v: 10592 }, _key = "LeftUpVector;", _map[_key] = { k: _key, v: 8639 }, _key = "LeftUpVectorBar;", _map[_key] = { k: _key, v: 10584 }, _key = "LeftVector;", _map[_key] = { k: _key, v: 8636 }, _key = "LeftVectorBar;", _map[_key] = { k: _key, v: 10578 }, _key = "Leftarrow;", _map[_key] = { k: _key, v: 8656 }, _key = "Leftrightarrow;", _map[_key] = { k: _key, v: 8660 }, _key = "LessEqualGreater;", _map[_key] = { k: _key, v: 8922 }, _key = "LessFullEqual;", _map[_key] = { k: _key, v: 8806 }, _key = "LessGreater;", _map[_key] = { k: _key, v: 8822 }, _key = "LessLess;", _map[_key] = { k: _key, v: 10913 }, _key = "LessSlantEqual;", _map[_key] = { k: _key, v: 10877 }, _key = "LessTilde;", _map[_key] = { k: _key, v: 8818 }, _key = "Lfr;", _map[_key] = { k: _key, v: 120079 }, _key = "Ll;", _map[_key] = { k: _key, v: 8920 }, _key = "Lleftarrow;", _map[_key] = { k: _key, v: 8666 }, _key = "Lmidot;", _map[_key] = { k: _key, v: 319 }, _key = "LongLeftArrow;", _map[_key] = { k: _key, v: 10229 }, _key = "LongLeftRightArrow;", _map[_key] = { k: _key, v: 10231 }, _key = "LongRightArrow;", _map[_key] = { k: _key, v: 10230 }, _key = "Longleftarrow;", _map[_key] = { k: _key, v: 10232 }, _key = "Longleftrightarrow;", _map[_key] = { k: _key, v: 10234 }, _key = "Longrightarrow;", _map[_key] = { k: _key, v: 10233 }, _key = "Lopf;", _map[_key] = { k: _key, v: 120131 }, _key = "LowerLeftArrow;", _map[_key] = { k: _key, v: 8601 }, _key = "LowerRightArrow;", _map[_key] = { k: _key, v: 8600 }, _key = "Lscr;", _map[_key] = { k: _key, v: 8466 }, _key = "Lsh;", _map[_key] = { k: _key, v: 8624 }, _key = "Lstrok;", _map[_key] = { k: _key, v: 321 }, _key = "Lt;", _map[_key] = { k: _key, v: 8810 }, _key = "Map;", _map[_key] = { k: _key, v: 10501 }, _key = "Mcy;", _map[_key] = { k: _key, v: 1052 }, _key = "MediumSpace;", _map[_key] = { k: _key, v: 8287 }, _key = "Mellintrf;", _map[_key] = { k: _key, v: 8499 }, _key = "Mfr;", _map[_key] = { k: _key, v: 120080 }, _key = "MinusPlus;", _map[_key] = { k: _key, v: 8723 }, _key = "Mopf;", _map[_key] = { k: _key, v: 120132 }, _key = "Mscr;", _map[_key] = { k: _key, v: 8499 }, _key = "Mu;", _map[_key] = { k: _key, v: 924 }, _key = "NJcy;", _map[_key] = { k: _key, v: 1034 }, _key = "Nacute;", _map[_key] = { k: _key, v: 323 }, _key = "Ncaron;", _map[_key] = { k: _key, v: 327 }, _key = "Ncedil;", _map[_key] = { k: _key, v: 325 }, _key = "Ncy;", _map[_key] = { k: _key, v: 1053 }, _key = "NegativeMediumSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeThickSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeThinSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeVeryThinSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NestedGreaterGreater;", _map[_key] = { k: _key, v: 8811 }, _key = "NestedLessLess;", _map[_key] = { k: _key, v: 8810 }, _key = "NewLine;", _map[_key] = { k: _key, v: 10 }, _key = "Nfr;", _map[_key] = { k: _key, v: 120081 }, _key = "NoBreak;", _map[_key] = { k: _key, v: 8288 }, _key = "NonBreakingSpace;", _map[_key] = { k: _key, v: 160 }, _key = "Nopf;", _map[_key] = { k: _key, v: 8469 }, _key = "Not;", _map[_key] = { k: _key, v: 10988 }, _key = "NotCongruent;", _map[_key] = { k: _key, v: 8802 }, _key = "NotCupCap;", _map[_key] = { k: _key, v: 8813 }, _key = "NotDoubleVerticalBar;", _map[_key] = { k: _key, v: 8742 }, _key = "NotElement;", _map[_key] = { k: _key, v: 8713 }, _key = "NotEqual;", _map[_key] = { k: _key, v: 8800 }, _key = "NotExists;", _map[_key] = { k: _key, v: 8708 }, _key = "NotGreater;", _map[_key] = { k: _key, v: 8815 }, _key = "NotGreaterEqual;", _map[_key] = { k: _key, v: 8817 }, _key = "NotGreaterLess;", _map[_key] = { k: _key, v: 8825 }, _key = "NotGreaterTilde;", _map[_key] = { k: _key, v: 8821 }, _key = "NotLeftTriangle;", _map[_key] = { k: _key, v: 8938 }, _key = "NotLeftTriangleEqual;", _map[_key] = { k: _key, v: 8940 }, _key = "NotLess;", _map[_key] = { k: _key, v: 8814 }, _key = "NotLessEqual;", _map[_key] = { k: _key, v: 8816 }, _key = "NotLessGreater;", _map[_key] = { k: _key, v: 8824 }, _key = "NotLessTilde;", _map[_key] = { k: _key, v: 8820 }, _key = "NotPrecedes;", _map[_key] = { k: _key, v: 8832 }, _key = "NotPrecedesSlantEqual;", _map[_key] = { k: _key, v: 8928 }, _key = "NotReverseElement;", _map[_key] = { k: _key, v: 8716 }, _key = "NotRightTriangle;", _map[_key] = { k: _key, v: 8939 }, _key = "NotRightTriangleEqual;", _map[_key] = { k: _key, v: 8941 }, _key = "NotSquareSubsetEqual;", _map[_key] = { k: _key, v: 8930 }, _key = "NotSquareSupersetEqual;", _map[_key] = { k: _key, v: 8931 }, _key = "NotSubsetEqual;", _map[_key] = { k: _key, v: 8840 }, _key = "NotSucceeds;", _map[_key] = { k: _key, v: 8833 }, _key = "NotSucceedsSlantEqual;", _map[_key] = { k: _key, v: 8929 }, _key = "NotSupersetEqual;", _map[_key] = { k: _key, v: 8841 }, _key = "NotTilde;", _map[_key] = { k: _key, v: 8769 }, _key = "NotTildeEqual;", _map[_key] = { k: _key, v: 8772 }, _key = "NotTildeFullEqual;", _map[_key] = { k: _key, v: 8775 }, _key = "NotTildeTilde;", _map[_key] = { k: _key, v: 8777 }, _key = "NotVerticalBar;", _map[_key] = { k: _key, v: 8740 }, _key = "Nscr;", _map[_key] = { k: _key, v: 119977 }, _key = "Ntilde;", _map[_key] = { k: _key, v: 209 }, _key = "Nu;", _map[_key] = { k: _key, v: 925 }, _key = "OElig;", _map[_key] = { k: _key, v: 338 }, _key = "Oacute;", _map[_key] = { k: _key, v: 211 }, _key = "Ocirc;", _map[_key] = { k: _key, v: 212 }, _key = "Ocy;", _map[_key] = { k: _key, v: 1054 }, _key = "Odblac;", _map[_key] = { k: _key, v: 336 }, _key = "Ofr;", _map[_key] = { k: _key, v: 120082 }, _key = "Ograve;", _map[_key] = { k: _key, v: 210 }, _key = "Omacr;", _map[_key] = { k: _key, v: 332 }, _key = "Omega;", _map[_key] = { k: _key, v: 937 }, _key = "Omicron;", _map[_key] = { k: _key, v: 927 }, _key = "Oopf;", _map[_key] = { k: _key, v: 120134 }, _key = "OpenCurlyDoubleQuote;", _map[_key] = { k: _key, v: 8220 }, _key = "OpenCurlyQuote;", _map[_key] = { k: _key, v: 8216 }, _key = "Or;", _map[_key] = { k: _key, v: 10836 }, _key = "Oscr;", _map[_key] = { k: _key, v: 119978 }, _key = "Oslash;", _map[_key] = { k: _key, v: 216 }, _key = "Otilde;", _map[_key] = { k: _key, v: 213 }, _key = "Otimes;", _map[_key] = { k: _key, v: 10807 }, _key = "Ouml;", _map[_key] = { k: _key, v: 214 }, _key = "OverBar;", _map[_key] = { k: _key, v: 8254 }, _key = "OverBrace;", _map[_key] = { k: _key, v: 9182 }, _key = "OverBracket;", _map[_key] = { k: _key, v: 9140 }, _key = "OverParenthesis;", _map[_key] = { k: _key, v: 9180 }, _key = "PartialD;", _map[_key] = { k: _key, v: 8706 }, _key = "Pcy;", _map[_key] = { k: _key, v: 1055 }, _key = "Pfr;", _map[_key] = { k: _key, v: 120083 }, _key = "Phi;", _map[_key] = { k: _key, v: 934 }, _key = "Pi;", _map[_key] = { k: _key, v: 928 }, _key = "PlusMinus;", _map[_key] = { k: _key, v: 177 }, _key = "Poincareplane;", _map[_key] = { k: _key, v: 8460 }, _key = "Popf;", _map[_key] = { k: _key, v: 8473 }, _key = "Pr;", _map[_key] = { k: _key, v: 10939 }, _key = "Precedes;", _map[_key] = { k: _key, v: 8826 }, _key = "PrecedesEqual;", _map[_key] = { k: _key, v: 10927 }, _key = "PrecedesSlantEqual;", _map[_key] = { k: _key, v: 8828 }, _key = "PrecedesTilde;", _map[_key] = { k: _key, v: 8830 }, _key = "Prime;", _map[_key] = { k: _key, v: 8243 }, _key = "Product;", _map[_key] = { k: _key, v: 8719 }, _key = "Proportion;", _map[_key] = { k: _key, v: 8759 }, _key = "Proportional;", _map[_key] = { k: _key, v: 8733 }, _key = "Pscr;", _map[_key] = { k: _key, v: 119979 }, _key = "Psi;", _map[_key] = { k: _key, v: 936 }, _key = "QUOT;", _map[_key] = { k: _key, v: 34 }, _key = "Qfr;", _map[_key] = { k: _key, v: 120084 }, _key = "Qopf;", _map[_key] = { k: _key, v: 8474 }, _key = "Qscr;", _map[_key] = { k: _key, v: 119980 }, _key = "RBarr;", _map[_key] = { k: _key, v: 10512 }, _key = "REG;", _map[_key] = { k: _key, v: 174 }, _key = "Racute;", _map[_key] = { k: _key, v: 340 }, _key = "Rang;", _map[_key] = { k: _key, v: 10219 }, _key = "Rarr;", _map[_key] = { k: _key, v: 8608 }, _key = "Rarrtl;", _map[_key] = { k: _key, v: 10518 }, _key = "Rcaron;", _map[_key] = { k: _key, v: 344 }, _key = "Rcedil;", _map[_key] = { k: _key, v: 342 }, _key = "Rcy;", _map[_key] = { k: _key, v: 1056 }, _key = "Re;", _map[_key] = { k: _key, v: 8476 }, _key = "ReverseElement;", _map[_key] = { k: _key, v: 8715 }, _key = "ReverseEquilibrium;", _map[_key] = { k: _key, v: 8651 }, _key = "ReverseUpEquilibrium;", _map[_key] = { k: _key, v: 10607 }, _key = "Rfr;", _map[_key] = { k: _key, v: 8476 }, _key = "Rho;", _map[_key] = { k: _key, v: 929 }, _key = "RightAngleBracket;", _map[_key] = { k: _key, v: 10217 }, _key = "RightArrow;", _map[_key] = { k: _key, v: 8594 }, _key = "RightArrowBar;", _map[_key] = { k: _key, v: 8677 }, _key = "RightArrowLeftArrow;", _map[_key] = { k: _key, v: 8644 }, _key = "RightCeiling;", _map[_key] = { k: _key, v: 8969 }, _key = "RightDoubleBracket;", _map[_key] = { k: _key, v: 10215 }, _key = "RightDownTeeVector;", _map[_key] = { k: _key, v: 10589 }, _key = "RightDownVector;", _map[_key] = { k: _key, v: 8642 }, _key = "RightDownVectorBar;", _map[_key] = { k: _key, v: 10581 }, _key = "RightFloor;", _map[_key] = { k: _key, v: 8971 }, _key = "RightTee;", _map[_key] = { k: _key, v: 8866 }, _key = "RightTeeArrow;", _map[_key] = { k: _key, v: 8614 }, _key = "RightTeeVector;", _map[_key] = { k: _key, v: 10587 }, _key = "RightTriangle;", _map[_key] = { k: _key, v: 8883 }, _key = "RightTriangleBar;", _map[_key] = { k: _key, v: 10704 }, _key = "RightTriangleEqual;", _map[_key] = { k: _key, v: 8885 }, _key = "RightUpDownVector;", _map[_key] = { k: _key, v: 10575 }, _key = "RightUpTeeVector;", _map[_key] = { k: _key, v: 10588 }, _key = "RightUpVector;", _map[_key] = { k: _key, v: 8638 }, _key = "RightUpVectorBar;", _map[_key] = { k: _key, v: 10580 }, _key = "RightVector;", _map[_key] = { k: _key, v: 8640 }, _key = "RightVectorBar;", _map[_key] = { k: _key, v: 10579 }, _key = "Rightarrow;", _map[_key] = { k: _key, v: 8658 }, _key = "Ropf;", _map[_key] = { k: _key, v: 8477 }, _key = "RoundImplies;", _map[_key] = { k: _key, v: 10608 }, _key = "Rrightarrow;", _map[_key] = { k: _key, v: 8667 }, _key = "Rscr;", _map[_key] = { k: _key, v: 8475 }, _key = "Rsh;", _map[_key] = { k: _key, v: 8625 }, _key = "RuleDelayed;", _map[_key] = { k: _key, v: 10740 }, _key = "SHCHcy;", _map[_key] = { k: _key, v: 1065 }, _key = "SHcy;", _map[_key] = { k: _key, v: 1064 }, _key = "SOFTcy;", _map[_key] = { k: _key, v: 1068 }, _key = "Sacute;", _map[_key] = { k: _key, v: 346 }, _key = "Sc;", _map[_key] = { k: _key, v: 10940 }, _key = "Scaron;", _map[_key] = { k: _key, v: 352 }, _key = "Scedil;", _map[_key] = { k: _key, v: 350 }, _key = "Scirc;", _map[_key] = { k: _key, v: 348 }, _key = "Scy;", _map[_key] = { k: _key, v: 1057 }, _key = "Sfr;", _map[_key] = { k: _key, v: 120086 }, _key = "ShortDownArrow;", _map[_key] = { k: _key, v: 8595 }, _key = "ShortLeftArrow;", _map[_key] = { k: _key, v: 8592 }, _key = "ShortRightArrow;", _map[_key] = { k: _key, v: 8594 }, _key = "ShortUpArrow;", _map[_key] = { k: _key, v: 8593 }, _key = "Sigma;", _map[_key] = { k: _key, v: 931 }, _key = "SmallCircle;", _map[_key] = { k: _key, v: 8728 }, _key = "Sopf;", _map[_key] = { k: _key, v: 120138 }, _key = "Sqrt;", _map[_key] = { k: _key, v: 8730 }, _key = "Square;", _map[_key] = { k: _key, v: 9633 }, _key = "SquareIntersection;", _map[_key] = { k: _key, v: 8851 }, _key = "SquareSubset;", _map[_key] = { k: _key, v: 8847 }, _key = "SquareSubsetEqual;", _map[_key] = { k: _key, v: 8849 }, _key = "SquareSuperset;", _map[_key] = { k: _key, v: 8848 }, _key = "SquareSupersetEqual;", _map[_key] = { k: _key, v: 8850 }, _key = "SquareUnion;", _map[_key] = { k: _key, v: 8852 }, _key = "Sscr;", _map[_key] = { k: _key, v: 119982 }, _key = "Star;", _map[_key] = { k: _key, v: 8902 }, _key = "Sub;", _map[_key] = { k: _key, v: 8912 }, _key = "Subset;", _map[_key] = { k: _key, v: 8912 }, _key = "SubsetEqual;", _map[_key] = { k: _key, v: 8838 }, _key = "Succeeds;", _map[_key] = { k: _key, v: 8827 }, _key = "SucceedsEqual;", _map[_key] = { k: _key, v: 10928 }, _key = "SucceedsSlantEqual;", _map[_key] = { k: _key, v: 8829 }, _key = "SucceedsTilde;", _map[_key] = { k: _key, v: 8831 }, _key = "SuchThat;", _map[_key] = { k: _key, v: 8715 }, _key = "Sum;", _map[_key] = { k: _key, v: 8721 }, _key = "Sup;", _map[_key] = { k: _key, v: 8913 }, _key = "Superset;", _map[_key] = { k: _key, v: 8835 }, _key = "SupersetEqual;", _map[_key] = { k: _key, v: 8839 }, _key = "Supset;", _map[_key] = { k: _key, v: 8913 }, _key = "THORN;", _map[_key] = { k: _key, v: 222 }, _key = "TRADE;", _map[_key] = { k: _key, v: 8482 }, _key = "TSHcy;", _map[_key] = { k: _key, v: 1035 }, _key = "TScy;", _map[_key] = { k: _key, v: 1062 }, _key = "Tab;", _map[_key] = { k: _key, v: 9 }, _key = "Tau;", _map[_key] = { k: _key, v: 932 }, _key = "Tcaron;", _map[_key] = { k: _key, v: 356 }, _key = "Tcedil;", _map[_key] = { k: _key, v: 354 }, _key = "Tcy;", _map[_key] = { k: _key, v: 1058 }, _key = "Tfr;", _map[_key] = { k: _key, v: 120087 }, _key = "Therefore;", _map[_key] = { k: _key, v: 8756 }, _key = "Theta;", _map[_key] = { k: _key, v: 920 }, _key = "ThinSpace;", _map[_key] = { k: _key, v: 8201 }, _key = "Tilde;", _map[_key] = { k: _key, v: 8764 }, _key = "TildeEqual;", _map[_key] = { k: _key, v: 8771 }, _key = "TildeFullEqual;", _map[_key] = { k: _key, v: 8773 }, _key = "TildeTilde;", _map[_key] = { k: _key, v: 8776 }, _key = "Topf;", _map[_key] = { k: _key, v: 120139 }, _key = "TripleDot;", _map[_key] = { k: _key, v: 8411 }, _key = "Tscr;", _map[_key] = { k: _key, v: 119983 }, _key = "Tstrok;", _map[_key] = { k: _key, v: 358 }, _key = "Uacute;", _map[_key] = { k: _key, v: 218 }, _key = "Uarr;", _map[_key] = { k: _key, v: 8607 }, _key = "Uarrocir;", _map[_key] = { k: _key, v: 10569 }, _key = "Ubrcy;", _map[_key] = { k: _key, v: 1038 }, _key = "Ubreve;", _map[_key] = { k: _key, v: 364 }, _key = "Ucirc;", _map[_key] = { k: _key, v: 219 }, _key = "Ucy;", _map[_key] = { k: _key, v: 1059 }, _key = "Udblac;", _map[_key] = { k: _key, v: 368 }, _key = "Ufr;", _map[_key] = { k: _key, v: 120088 }, _key = "Ugrave;", _map[_key] = { k: _key, v: 217 }, _key = "Umacr;", _map[_key] = { k: _key, v: 362 }, _key = "UnderBar;", _map[_key] = { k: _key, v: 95 }, _key = "UnderBrace;", _map[_key] = { k: _key, v: 9183 }, _key = "UnderBracket;", _map[_key] = { k: _key, v: 9141 }, _key = "UnderParenthesis;", _map[_key] = { k: _key, v: 9181 }, _key = "Union;", _map[_key] = { k: _key, v: 8899 }, _key = "UnionPlus;", _map[_key] = { k: _key, v: 8846 }, _key = "Uogon;", _map[_key] = { k: _key, v: 370 }, _key = "Uopf;", _map[_key] = { k: _key, v: 120140 }, _key = "UpArrow;", _map[_key] = { k: _key, v: 8593 }, _key = "UpArrowBar;", _map[_key] = { k: _key, v: 10514 }, _key = "UpArrowDownArrow;", _map[_key] = { k: _key, v: 8645 }, _key = "UpDownArrow;", _map[_key] = { k: _key, v: 8597 }, _key = "UpEquilibrium;", _map[_key] = { k: _key, v: 10606 }, _key = "UpTee;", _map[_key] = { k: _key, v: 8869 }, _key = "UpTeeArrow;", _map[_key] = { k: _key, v: 8613 }, _key = "Uparrow;", _map[_key] = { k: _key, v: 8657 }, _key = "Updownarrow;", _map[_key] = { k: _key, v: 8661 }, _key = "UpperLeftArrow;", _map[_key] = { k: _key, v: 8598 }, _key = "UpperRightArrow;", _map[_key] = { k: _key, v: 8599 }, _key = "Upsi;", _map[_key] = { k: _key, v: 978 }, _key = "Upsilon;", _map[_key] = { k: _key, v: 933 }, _key = "Uring;", _map[_key] = { k: _key, v: 366 }, _key = "Uscr;", _map[_key] = { k: _key, v: 119984 }, _key = "Utilde;", _map[_key] = { k: _key, v: 360 }, _key = "Uuml;", _map[_key] = { k: _key, v: 220 }, _key = "VDash;", _map[_key] = { k: _key, v: 8875 }, _key = "Vbar;", _map[_key] = { k: _key, v: 10987 }, _key = "Vcy;", _map[_key] = { k: _key, v: 1042 }, _key = "Vdash;", _map[_key] = { k: _key, v: 8873 }, _key = "Vdashl;", _map[_key] = { k: _key, v: 10982 }, _key = "Vee;", _map[_key] = { k: _key, v: 8897 }, _key = "Verbar;", _map[_key] = { k: _key, v: 8214 }, _key = "Vert;", _map[_key] = { k: _key, v: 8214 }, _key = "VerticalBar;", _map[_key] = { k: _key, v: 8739 }, _key = "VerticalLine;", _map[_key] = { k: _key, v: 124 }, _key = "VerticalSeparator;", _map[_key] = { k: _key, v: 10072 }, _key = "VerticalTilde;", _map[_key] = { k: _key, v: 8768 }, _key = "VeryThinSpace;", _map[_key] = { k: _key, v: 8202 }, _key = "Vfr;", _map[_key] = { k: _key, v: 120089 }, _key = "Vopf;", _map[_key] = { k: _key, v: 120141 }, _key = "Vscr;", _map[_key] = { k: _key, v: 119985 }, _key = "Vvdash;", _map[_key] = { k: _key, v: 8874 }, _key = "Wcirc;", _map[_key] = { k: _key, v: 372 }, _key = "Wedge;", _map[_key] = { k: _key, v: 8896 }, _key = "Wfr;", _map[_key] = { k: _key, v: 120090 }, _key = "Wopf;", _map[_key] = { k: _key, v: 120142 }, _key = "Wscr;", _map[_key] = { k: _key, v: 119986 }, _key = "Xfr;", _map[_key] = { k: _key, v: 120091 }, _key = "Xi;", _map[_key] = { k: _key, v: 926 }, _key = "Xopf;", _map[_key] = { k: _key, v: 120143 }, _key = "Xscr;", _map[_key] = { k: _key, v: 119987 }, _key = "YAcy;", _map[_key] = { k: _key, v: 1071 }, _key = "YIcy;", _map[_key] = { k: _key, v: 1031 }, _key = "YUcy;", _map[_key] = { k: _key, v: 1070 }, _key = "Yacute;", _map[_key] = { k: _key, v: 221 }, _key = "Ycirc;", _map[_key] = { k: _key, v: 374 }, _key = "Ycy;", _map[_key] = { k: _key, v: 1067 }, _key = "Yfr;", _map[_key] = { k: _key, v: 120092 }, _key = "Yopf;", _map[_key] = { k: _key, v: 120144 }, _key = "Yscr;", _map[_key] = { k: _key, v: 119988 }, _key = "Yuml;", _map[_key] = { k: _key, v: 376 }, _key = "ZHcy;", _map[_key] = { k: _key, v: 1046 }, _key = "Zacute;", _map[_key] = { k: _key, v: 377 }, _key = "Zcaron;", _map[_key] = { k: _key, v: 381 }, _key = "Zcy;", _map[_key] = { k: _key, v: 1047 }, _key = "Zdot;", _map[_key] = { k: _key, v: 379 }, _key = "ZeroWidthSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "Zeta;", _map[_key] = { k: _key, v: 918 }, _key = "Zfr;", _map[_key] = { k: _key, v: 8488 }, _key = "Zopf;", _map[_key] = { k: _key, v: 8484 }, _key = "Zscr;", _map[_key] = { k: _key, v: 119989 }, _key = "aacute;", _map[_key] = { k: _key, v: 225 }, _key = "abreve;", _map[_key] = { k: _key, v: 259 }, _key = "ac;", _map[_key] = { k: _key, v: 8766 }, _key = "acd;", _map[_key] = { k: _key, v: 8767 }, _key = "acirc;", _map[_key] = { k: _key, v: 226 }, _key = "acute;", _map[_key] = { k: _key, v: 180 }, _key = "acy;", _map[_key] = { k: _key, v: 1072 }, _key = "aelig;", _map[_key] = { k: _key, v: 230 }, _key = "af;", _map[_key] = { k: _key, v: 8289 }, _key = "afr;", _map[_key] = { k: _key, v: 120094 }, _key = "agrave;", _map[_key] = { k: _key, v: 224 }, _key = "alefsym;", _map[_key] = { k: _key, v: 8501 }, _key = "aleph;", _map[_key] = { k: _key, v: 8501 }, _key = "alpha;", _map[_key] = { k: _key, v: 945 }, _key = "amacr;", _map[_key] = { k: _key, v: 257 }, _key = "amalg;", _map[_key] = { k: _key, v: 10815 }, _key = "amp;", _map[_key] = { k: _key, v: 38 }, _key = "and;", _map[_key] = { k: _key, v: 8743 }, _key = "andand;", _map[_key] = { k: _key, v: 10837 }, _key = "andd;", _map[_key] = { k: _key, v: 10844 }, _key = "andslope;", _map[_key] = { k: _key, v: 10840 }, _key = "andv;", _map[_key] = { k: _key, v: 10842 }, _key = "ang;", _map[_key] = { k: _key, v: 8736 }, _key = "ange;", _map[_key] = { k: _key, v: 10660 }, _key = "angle;", _map[_key] = { k: _key, v: 8736 }, _key = "angmsd;", _map[_key] = { k: _key, v: 8737 }, _key = "angmsdaa;", _map[_key] = { k: _key, v: 10664 }, _key = "angmsdab;", _map[_key] = { k: _key, v: 10665 }, _key = "angmsdac;", _map[_key] = { k: _key, v: 10666 }, _key = "angmsdad;", _map[_key] = { k: _key, v: 10667 }, _key = "angmsdae;", _map[_key] = { k: _key, v: 10668 }, _key = "angmsdaf;", _map[_key] = { k: _key, v: 10669 }, _key = "angmsdag;", _map[_key] = { k: _key, v: 10670 }, _key = "angmsdah;", _map[_key] = { k: _key, v: 10671 }, _key = "angrt;", _map[_key] = { k: _key, v: 8735 }, _key = "angrtvb;", _map[_key] = { k: _key, v: 8894 }, _key = "angrtvbd;", _map[_key] = { k: _key, v: 10653 }, _key = "angsph;", _map[_key] = { k: _key, v: 8738 }, _key = "angst;", _map[_key] = { k: _key, v: 197 }, _key = "angzarr;", _map[_key] = { k: _key, v: 9084 }, _key = "aogon;", _map[_key] = { k: _key, v: 261 }, _key = "aopf;", _map[_key] = { k: _key, v: 120146 }, _key = "ap;", _map[_key] = { k: _key, v: 8776 }, _key = "apE;", _map[_key] = { k: _key, v: 10864 }, _key = "apacir;", _map[_key] = { k: _key, v: 10863 }, _key = "ape;", _map[_key] = { k: _key, v: 8778 }, _key = "apid;", _map[_key] = { k: _key, v: 8779 }, _key = "apos;", _map[_key] = { k: _key, v: 39 }, _key = "approx;", _map[_key] = { k: _key, v: 8776 }, _key = "approxeq;", _map[_key] = { k: _key, v: 8778 }, _key = "aring;", _map[_key] = { k: _key, v: 229 }, _key = "ascr;", _map[_key] = { k: _key, v: 119990 }, _key = "ast;", _map[_key] = { k: _key, v: 42 }, _key = "asymp;", _map[_key] = { k: _key, v: 8776 }, _key = "asympeq;", _map[_key] = { k: _key, v: 8781 }, _key = "atilde;", _map[_key] = { k: _key, v: 227 }, _key = "auml;", _map[_key] = { k: _key, v: 228 }, _key = "awconint;", _map[_key] = { k: _key, v: 8755 }, _key = "awint;", _map[_key] = { k: _key, v: 10769 }, _key = "bNot;", _map[_key] = { k: _key, v: 10989 }, _key = "backcong;", _map[_key] = { k: _key, v: 8780 }, _key = "backepsilon;", _map[_key] = { k: _key, v: 1014 }, _key = "backprime;", _map[_key] = { k: _key, v: 8245 }, _key = "backsim;", _map[_key] = { k: _key, v: 8765 }, _key = "backsimeq;", _map[_key] = { k: _key, v: 8909 }, _key = "barvee;", _map[_key] = { k: _key, v: 8893 }, _key = "barwed;", _map[_key] = { k: _key, v: 8965 }, _key = "barwedge;", _map[_key] = { k: _key, v: 8965 }, _key = "bbrk;", _map[_key] = { k: _key, v: 9141 }, _key = "bbrktbrk;", _map[_key] = { k: _key, v: 9142 }, _key = "bcong;", _map[_key] = { k: _key, v: 8780 }, _key = "bcy;", _map[_key] = { k: _key, v: 1073 }, _key = "bdquo;", _map[_key] = { k: _key, v: 8222 }, _key = "becaus;", _map[_key] = { k: _key, v: 8757 }, _key = "because;", _map[_key] = { k: _key, v: 8757 }, _key = "bemptyv;", _map[_key] = { k: _key, v: 10672 }, _key = "bepsi;", _map[_key] = { k: _key, v: 1014 }, _key = "bernou;", _map[_key] = { k: _key, v: 8492 }, _key = "beta;", _map[_key] = { k: _key, v: 946 }, _key = "beth;", _map[_key] = { k: _key, v: 8502 }, _key = "between;", _map[_key] = { k: _key, v: 8812 }, _key = "bfr;", _map[_key] = { k: _key, v: 120095 }, _key = "bigcap;", _map[_key] = { k: _key, v: 8898 }, _key = "bigcirc;", _map[_key] = { k: _key, v: 9711 }, _key = "bigcup;", _map[_key] = { k: _key, v: 8899 }, _key = "bigodot;", _map[_key] = { k: _key, v: 10752 }, _key = "bigoplus;", _map[_key] = { k: _key, v: 10753 }, _key = "bigotimes;", _map[_key] = { k: _key, v: 10754 }, _key = "bigsqcup;", _map[_key] = { k: _key, v: 10758 }, _key = "bigstar;", _map[_key] = { k: _key, v: 9733 }, _key = "bigtriangledown;", _map[_key] = { k: _key, v: 9661 }, _key = "bigtriangleup;", _map[_key] = { k: _key, v: 9651 }, _key = "biguplus;", _map[_key] = { k: _key, v: 10756 }, _key = "bigvee;", _map[_key] = { k: _key, v: 8897 }, _key = "bigwedge;", _map[_key] = { k: _key, v: 8896 }, _key = "bkarow;", _map[_key] = { k: _key, v: 10509 }, _key = "blacklozenge;", _map[_key] = { k: _key, v: 10731 }, _key = "blacksquare;", _map[_key] = { k: _key, v: 9642 }, _key = "blacktriangle;", _map[_key] = { k: _key, v: 9652 }, _key = "blacktriangledown;", _map[_key] = { k: _key, v: 9662 }, _key = "blacktriangleleft;", _map[_key] = { k: _key, v: 9666 }, _key = "blacktriangleright;", _map[_key] = { k: _key, v: 9656 }, _key = "blank;", _map[_key] = { k: _key, v: 9251 }, _key = "blk12;", _map[_key] = { k: _key, v: 9618 }, _key = "blk14;", _map[_key] = { k: _key, v: 9617 }, _key = "blk34;", _map[_key] = { k: _key, v: 9619 }, _key = "block;", _map[_key] = { k: _key, v: 9608 }, _key = "bnot;", _map[_key] = { k: _key, v: 8976 }, _key = "bopf;", _map[_key] = { k: _key, v: 120147 }, _key = "bot;", _map[_key] = { k: _key, v: 8869 }, _key = "bottom;", _map[_key] = { k: _key, v: 8869 }, _key = "bowtie;", _map[_key] = { k: _key, v: 8904 }, _key = "boxDL;", _map[_key] = { k: _key, v: 9559 }, _key = "boxDR;", _map[_key] = { k: _key, v: 9556 }, _key = "boxDl;", _map[_key] = { k: _key, v: 9558 }, _key = "boxDr;", _map[_key] = { k: _key, v: 9555 }, _key = "boxH;", _map[_key] = { k: _key, v: 9552 }, _key = "boxHD;", _map[_key] = { k: _key, v: 9574 }, _key = "boxHU;", _map[_key] = { k: _key, v: 9577 }, _key = "boxHd;", _map[_key] = { k: _key, v: 9572 }, _key = "boxHu;", _map[_key] = { k: _key, v: 9575 }, _key = "boxUL;", _map[_key] = { k: _key, v: 9565 }, _key = "boxUR;", _map[_key] = { k: _key, v: 9562 }, _key = "boxUl;", _map[_key] = { k: _key, v: 9564 }, _key = "boxUr;", _map[_key] = { k: _key, v: 9561 }, _key = "boxV;", _map[_key] = { k: _key, v: 9553 }, _key = "boxVH;", _map[_key] = { k: _key, v: 9580 }, _key = "boxVL;", _map[_key] = { k: _key, v: 9571 }, _key = "boxVR;", _map[_key] = { k: _key, v: 9568 }, _key = "boxVh;", _map[_key] = { k: _key, v: 9579 }, _key = "boxVl;", _map[_key] = { k: _key, v: 9570 }, _key = "boxVr;", _map[_key] = { k: _key, v: 9567 }, _key = "boxbox;", _map[_key] = { k: _key, v: 10697 }, _key = "boxdL;", _map[_key] = { k: _key, v: 9557 }, _key = "boxdR;", _map[_key] = { k: _key, v: 9554 }, _key = "boxdl;", _map[_key] = { k: _key, v: 9488 }, _key = "boxdr;", _map[_key] = { k: _key, v: 9484 }, _key = "boxh;", _map[_key] = { k: _key, v: 9472 }, _key = "boxhD;", _map[_key] = { k: _key, v: 9573 }, _key = "boxhU;", _map[_key] = { k: _key, v: 9576 }, _key = "boxhd;", _map[_key] = { k: _key, v: 9516 }, _key = "boxhu;", _map[_key] = { k: _key, v: 9524 }, _key = "boxminus;", _map[_key] = { k: _key, v: 8863 }, _key = "boxplus;", _map[_key] = { k: _key, v: 8862 }, _key = "boxtimes;", _map[_key] = { k: _key, v: 8864 }, _key = "boxuL;", _map[_key] = { k: _key, v: 9563 }, _key = "boxuR;", _map[_key] = { k: _key, v: 9560 }, _key = "boxul;", _map[_key] = { k: _key, v: 9496 }, _key = "boxur;", _map[_key] = { k: _key, v: 9492 }, _key = "boxv;", _map[_key] = { k: _key, v: 9474 }, _key = "boxvH;", _map[_key] = { k: _key, v: 9578 }, _key = "boxvL;", _map[_key] = { k: _key, v: 9569 }, _key = "boxvR;", _map[_key] = { k: _key, v: 9566 }, _key = "boxvh;", _map[_key] = { k: _key, v: 9532 }, _key = "boxvl;", _map[_key] = { k: _key, v: 9508 }, _key = "boxvr;", _map[_key] = { k: _key, v: 9500 }, _key = "bprime;", _map[_key] = { k: _key, v: 8245 }, _key = "breve;", _map[_key] = { k: _key, v: 728 }, _key = "brvbar;", _map[_key] = { k: _key, v: 166 }, _key = "bscr;", _map[_key] = { k: _key, v: 119991 }, _key = "bsemi;", _map[_key] = { k: _key, v: 8271 }, _key = "bsim;", _map[_key] = { k: _key, v: 8765 }, _key = "bsime;", _map[_key] = { k: _key, v: 8909 }, _key = "bsol;", _map[_key] = { k: _key, v: 92 }, _key = "bsolb;", _map[_key] = { k: _key, v: 10693 }, _key = "bsolhsub;", _map[_key] = { k: _key, v: 10184 }, _key = "bull;", _map[_key] = { k: _key, v: 8226 }, _key = "bullet;", _map[_key] = { k: _key, v: 8226 }, _key = "bump;", _map[_key] = { k: _key, v: 8782 }, _key = "bumpE;", _map[_key] = { k: _key, v: 10926 }, _key = "bumpe;", _map[_key] = { k: _key, v: 8783 }, _key = "bumpeq;", _map[_key] = { k: _key, v: 8783 }, _key = "cacute;", _map[_key] = { k: _key, v: 263 }, _key = "cap;", _map[_key] = { k: _key, v: 8745 }, _key = "capand;", _map[_key] = { k: _key, v: 10820 }, _key = "capbrcup;", _map[_key] = { k: _key, v: 10825 }, _key = "capcap;", _map[_key] = { k: _key, v: 10827 }, _key = "capcup;", _map[_key] = { k: _key, v: 10823 }, _key = "capdot;", _map[_key] = { k: _key, v: 10816 }, _key = "caret;", _map[_key] = { k: _key, v: 8257 }, _key = "caron;", _map[_key] = { k: _key, v: 711 }, _key = "ccaps;", _map[_key] = { k: _key, v: 10829 }, _key = "ccaron;", _map[_key] = { k: _key, v: 269 }, _key = "ccedil;", _map[_key] = { k: _key, v: 231 }, _key = "ccirc;", _map[_key] = { k: _key, v: 265 }, _key = "ccups;", _map[_key] = { k: _key, v: 10828 }, _key = "ccupssm;", _map[_key] = { k: _key, v: 10832 }, _key = "cdot;", _map[_key] = { k: _key, v: 267 }, _key = "cedil;", _map[_key] = { k: _key, v: 184 }, _key = "cemptyv;", _map[_key] = { k: _key, v: 10674 }, _key = "cent;", _map[_key] = { k: _key, v: 162 }, _key = "centerdot;", _map[_key] = { k: _key, v: 183 }, _key = "cfr;", _map[_key] = { k: _key, v: 120096 }, _key = "chcy;", _map[_key] = { k: _key, v: 1095 }, _key = "check;", _map[_key] = { k: _key, v: 10003 }, _key = "checkmark;", _map[_key] = { k: _key, v: 10003 }, _key = "chi;", _map[_key] = { k: _key, v: 967 }, _key = "cir;", _map[_key] = { k: _key, v: 9675 }, _key = "cirE;", _map[_key] = { k: _key, v: 10691 }, _key = "circ;", _map[_key] = { k: _key, v: 710 }, _key = "circeq;", _map[_key] = { k: _key, v: 8791 }, _key = "circlearrowleft;", _map[_key] = { k: _key, v: 8634 }, _key = "circlearrowright;", _map[_key] = { k: _key, v: 8635 }, _key = "circledR;", _map[_key] = { k: _key, v: 174 }, _key = "circledS;", _map[_key] = { k: _key, v: 9416 }, _key = "circledast;", _map[_key] = { k: _key, v: 8859 }, _key = "circledcirc;", _map[_key] = { k: _key, v: 8858 }, _key = "circleddash;", _map[_key] = { k: _key, v: 8861 }, _key = "cire;", _map[_key] = { k: _key, v: 8791 }, _key = "cirfnint;", _map[_key] = { k: _key, v: 10768 }, _key = "cirmid;", _map[_key] = { k: _key, v: 10991 }, _key = "cirscir;", _map[_key] = { k: _key, v: 10690 }, _key = "clubs;", _map[_key] = { k: _key, v: 9827 }, _key = "clubsuit;", _map[_key] = { k: _key, v: 9827 }, _key = "colon;", _map[_key] = { k: _key, v: 58 }, _key = "colone;", _map[_key] = { k: _key, v: 8788 }, _key = "coloneq;", _map[_key] = { k: _key, v: 8788 }, _key = "comma;", _map[_key] = { k: _key, v: 44 }, _key = "commat;", _map[_key] = { k: _key, v: 64 }, _key = "comp;", _map[_key] = { k: _key, v: 8705 }, _key = "compfn;", _map[_key] = { k: _key, v: 8728 }, _key = "complement;", _map[_key] = { k: _key, v: 8705 }, _key = "complexes;", _map[_key] = { k: _key, v: 8450 }, _key = "cong;", _map[_key] = { k: _key, v: 8773 }, _key = "congdot;", _map[_key] = { k: _key, v: 10861 }, _key = "conint;", _map[_key] = { k: _key, v: 8750 }, _key = "copf;", _map[_key] = { k: _key, v: 120148 }, _key = "coprod;", _map[_key] = { k: _key, v: 8720 }, _key = "copy;", _map[_key] = { k: _key, v: 169 }, _key = "copysr;", _map[_key] = { k: _key, v: 8471 }, _key = "crarr;", _map[_key] = { k: _key, v: 8629 }, _key = "cross;", _map[_key] = { k: _key, v: 10007 }, _key = "cscr;", _map[_key] = { k: _key, v: 119992 }, _key = "csub;", _map[_key] = { k: _key, v: 10959 }, _key = "csube;", _map[_key] = { k: _key, v: 10961 }, _key = "csup;", _map[_key] = { k: _key, v: 10960 }, _key = "csupe;", _map[_key] = { k: _key, v: 10962 }, _key = "ctdot;", _map[_key] = { k: _key, v: 8943 }, _key = "cudarrl;", _map[_key] = { k: _key, v: 10552 }, _key = "cudarrr;", _map[_key] = { k: _key, v: 10549 }, _key = "cuepr;", _map[_key] = { k: _key, v: 8926 }, _key = "cuesc;", _map[_key] = { k: _key, v: 8927 }, _key = "cularr;", _map[_key] = { k: _key, v: 8630 }, _key = "cularrp;", _map[_key] = { k: _key, v: 10557 }, _key = "cup;", _map[_key] = { k: _key, v: 8746 }, _key = "cupbrcap;", _map[_key] = { k: _key, v: 10824 }, _key = "cupcap;", _map[_key] = { k: _key, v: 10822 }, _key = "cupcup;", _map[_key] = { k: _key, v: 10826 }, _key = "cupdot;", _map[_key] = { k: _key, v: 8845 }, _key = "cupor;", _map[_key] = { k: _key, v: 10821 }, _key = "curarr;", _map[_key] = { k: _key, v: 8631 }, _key = "curarrm;", _map[_key] = { k: _key, v: 10556 }, _key = "curlyeqprec;", _map[_key] = { k: _key, v: 8926 }, _key = "curlyeqsucc;", _map[_key] = { k: _key, v: 8927 }, _key = "curlyvee;", _map[_key] = { k: _key, v: 8910 }, _key = "curlywedge;", _map[_key] = { k: _key, v: 8911 }, _key = "curren;", _map[_key] = { k: _key, v: 164 }, _key = "curvearrowleft;", _map[_key] = { k: _key, v: 8630 }, _key = "curvearrowright;", _map[_key] = { k: _key, v: 8631 }, _key = "cuvee;", _map[_key] = { k: _key, v: 8910 }, _key = "cuwed;", _map[_key] = { k: _key, v: 8911 }, _key = "cwconint;", _map[_key] = { k: _key, v: 8754 }, _key = "cwint;", _map[_key] = { k: _key, v: 8753 }, _key = "cylcty;", _map[_key] = { k: _key, v: 9005 }, _key = "dArr;", _map[_key] = { k: _key, v: 8659 }, _key = "dHar;", _map[_key] = { k: _key, v: 10597 }, _key = "dagger;", _map[_key] = { k: _key, v: 8224 }, _key = "daleth;", _map[_key] = { k: _key, v: 8504 }, _key = "darr;", _map[_key] = { k: _key, v: 8595 }, _key = "dash;", _map[_key] = { k: _key, v: 8208 }, _key = "dashv;", _map[_key] = { k: _key, v: 8867 }, _key = "dbkarow;", _map[_key] = { k: _key, v: 10511 }, _key = "dblac;", _map[_key] = { k: _key, v: 733 }, _key = "dcaron;", _map[_key] = { k: _key, v: 271 }, _key = "dcy;", _map[_key] = { k: _key, v: 1076 }, _key = "dd;", _map[_key] = { k: _key, v: 8518 }, _key = "ddagger;", _map[_key] = { k: _key, v: 8225 }, _key = "ddarr;", _map[_key] = { k: _key, v: 8650 }, _key = "ddotseq;", _map[_key] = { k: _key, v: 10871 }, _key = "deg;", _map[_key] = { k: _key, v: 176 }, _key = "delta;", _map[_key] = { k: _key, v: 948 }, _key = "demptyv;", _map[_key] = { k: _key, v: 10673 }, _key = "dfisht;", _map[_key] = { k: _key, v: 10623 }, _key = "dfr;", _map[_key] = { k: _key, v: 120097 }, _key = "dharl;", _map[_key] = { k: _key, v: 8643 }, _key = "dharr;", _map[_key] = { k: _key, v: 8642 }, _key = "diam;", _map[_key] = { k: _key, v: 8900 }, _key = "diamond;", _map[_key] = { k: _key, v: 8900 }, _key = "diamondsuit;", _map[_key] = { k: _key, v: 9830 }, _key = "diams;", _map[_key] = { k: _key, v: 9830 }, _key = "die;", _map[_key] = { k: _key, v: 168 }, _key = "digamma;", _map[_key] = { k: _key, v: 989 }, _key = "disin;", _map[_key] = { k: _key, v: 8946 }, _key = "div;", _map[_key] = { k: _key, v: 247 }, _key = "divide;", _map[_key] = { k: _key, v: 247 }, _key = "divideontimes;", _map[_key] = { k: _key, v: 8903 }, _key = "divonx;", _map[_key] = { k: _key, v: 8903 }, _key = "djcy;", _map[_key] = { k: _key, v: 1106 }, _key = "dlcorn;", _map[_key] = { k: _key, v: 8990 }, _key = "dlcrop;", _map[_key] = { k: _key, v: 8973 }, _key = "dollar;", _map[_key] = { k: _key, v: 36 }, _key = "dopf;", _map[_key] = { k: _key, v: 120149 }, _key = "dot;", _map[_key] = { k: _key, v: 729 }, _key = "doteq;", _map[_key] = { k: _key, v: 8784 }, _key = "doteqdot;", _map[_key] = { k: _key, v: 8785 }, _key = "dotminus;", _map[_key] = { k: _key, v: 8760 }, _key = "dotplus;", _map[_key] = { k: _key, v: 8724 }, _key = "dotsquare;", _map[_key] = { k: _key, v: 8865 }, _key = "doublebarwedge;", _map[_key] = { k: _key, v: 8966 }, _key = "downarrow;", _map[_key] = { k: _key, v: 8595 }, _key = "downdownarrows;", _map[_key] = { k: _key, v: 8650 }, _key = "downharpoonleft;", _map[_key] = { k: _key, v: 8643 }, _key = "downharpoonright;", _map[_key] = { k: _key, v: 8642 }, _key = "drbkarow;", _map[_key] = { k: _key, v: 10512 }, _key = "drcorn;", _map[_key] = { k: _key, v: 8991 }, _key = "drcrop;", _map[_key] = { k: _key, v: 8972 }, _key = "dscr;", _map[_key] = { k: _key, v: 119993 }, _key = "dscy;", _map[_key] = { k: _key, v: 1109 }, _key = "dsol;", _map[_key] = { k: _key, v: 10742 }, _key = "dstrok;", _map[_key] = { k: _key, v: 273 }, _key = "dtdot;", _map[_key] = { k: _key, v: 8945 }, _key = "dtri;", _map[_key] = { k: _key, v: 9663 }, _key = "dtrif;", _map[_key] = { k: _key, v: 9662 }, _key = "duarr;", _map[_key] = { k: _key, v: 8693 }, _key = "duhar;", _map[_key] = { k: _key, v: 10607 }, _key = "dwangle;", _map[_key] = { k: _key, v: 10662 }, _key = "dzcy;", _map[_key] = { k: _key, v: 1119 }, _key = "dzigrarr;", _map[_key] = { k: _key, v: 10239 }, _key = "eDDot;", _map[_key] = { k: _key, v: 10871 }, _key = "eDot;", _map[_key] = { k: _key, v: 8785 }, _key = "eacute;", _map[_key] = { k: _key, v: 233 }, _key = "easter;", _map[_key] = { k: _key, v: 10862 }, _key = "ecaron;", _map[_key] = { k: _key, v: 283 }, _key = "ecir;", _map[_key] = { k: _key, v: 8790 }, _key = "ecirc;", _map[_key] = { k: _key, v: 234 }, _key = "ecolon;", _map[_key] = { k: _key, v: 8789 }, _key = "ecy;", _map[_key] = { k: _key, v: 1101 }, _key = "edot;", _map[_key] = { k: _key, v: 279 }, _key = "ee;", _map[_key] = { k: _key, v: 8519 }, _key = "efDot;", _map[_key] = { k: _key, v: 8786 }, _key = "efr;", _map[_key] = { k: _key, v: 120098 }, _key = "eg;", _map[_key] = { k: _key, v: 10906 }, _key = "egrave;", _map[_key] = { k: _key, v: 232 }, _key = "egs;", _map[_key] = { k: _key, v: 10902 }, _key = "egsdot;", _map[_key] = { k: _key, v: 10904 }, _key = "el;", _map[_key] = { k: _key, v: 10905 }, _key = "elinters;", _map[_key] = { k: _key, v: 9191 }, _key = "ell;", _map[_key] = { k: _key, v: 8467 }, _key = "els;", _map[_key] = { k: _key, v: 10901 }, _key = "elsdot;", _map[_key] = { k: _key, v: 10903 }, _key = "emacr;", _map[_key] = { k: _key, v: 275 }, _key = "empty;", _map[_key] = { k: _key, v: 8709 }, _key = "emptyset;", _map[_key] = { k: _key, v: 8709 }, _key = "emptyv;", _map[_key] = { k: _key, v: 8709 }, _key = "emsp;", _map[_key] = { k: _key, v: 8195 }, _key = "emsp13;", _map[_key] = { k: _key, v: 8196 }, _key = "emsp14;", _map[_key] = { k: _key, v: 8197 }, _key = "eng;", _map[_key] = { k: _key, v: 331 }, _key = "ensp;", _map[_key] = { k: _key, v: 8194 }, _key = "eogon;", _map[_key] = { k: _key, v: 281 }, _key = "eopf;", _map[_key] = { k: _key, v: 120150 }, _key = "epar;", _map[_key] = { k: _key, v: 8917 }, _key = "eparsl;", _map[_key] = { k: _key, v: 10723 }, _key = "eplus;", _map[_key] = { k: _key, v: 10865 }, _key = "epsi;", _map[_key] = { k: _key, v: 949 }, _key = "epsilon;", _map[_key] = { k: _key, v: 949 }, _key = "epsiv;", _map[_key] = { k: _key, v: 1013 }, _key = "eqcirc;", _map[_key] = { k: _key, v: 8790 }, _key = "eqcolon;", _map[_key] = { k: _key, v: 8789 }, _key = "eqsim;", _map[_key] = { k: _key, v: 8770 }, _key = "eqslantgtr;", _map[_key] = { k: _key, v: 10902 }, _key = "eqslantless;", _map[_key] = { k: _key, v: 10901 }, _key = "equals;", _map[_key] = { k: _key, v: 61 }, _key = "equest;", _map[_key] = { k: _key, v: 8799 }, _key = "equiv;", _map[_key] = { k: _key, v: 8801 }, _key = "equivDD;", _map[_key] = { k: _key, v: 10872 }, _key = "eqvparsl;", _map[_key] = { k: _key, v: 10725 }, _key = "erDot;", _map[_key] = { k: _key, v: 8787 }, _key = "erarr;", _map[_key] = { k: _key, v: 10609 }, _key = "escr;", _map[_key] = { k: _key, v: 8495 }, _key = "esdot;", _map[_key] = { k: _key, v: 8784 }, _key = "esim;", _map[_key] = { k: _key, v: 8770 }, _key = "eta;", _map[_key] = { k: _key, v: 951 }, _key = "eth;", _map[_key] = { k: _key, v: 240 }, _key = "euml;", _map[_key] = { k: _key, v: 235 }, _key = "euro;", _map[_key] = { k: _key, v: 8364 }, _key = "excl;", _map[_key] = { k: _key, v: 33 }, _key = "exist;", _map[_key] = { k: _key, v: 8707 }, _key = "expectation;", _map[_key] = { k: _key, v: 8496 }, _key = "exponentiale;", _map[_key] = { k: _key, v: 8519 }, _key = "fallingdotseq;", _map[_key] = { k: _key, v: 8786 }, _key = "fcy;", _map[_key] = { k: _key, v: 1092 }, _key = "female;", _map[_key] = { k: _key, v: 9792 }, _key = "ffilig;", _map[_key] = { k: _key, v: 64259 }, _key = "fflig;", _map[_key] = { k: _key, v: 64256 }, _key = "ffllig;", _map[_key] = { k: _key, v: 64260 }, _key = "ffr;", _map[_key] = { k: _key, v: 120099 }, _key = "filig;", _map[_key] = { k: _key, v: 64257 }, _key = "flat;", _map[_key] = { k: _key, v: 9837 }, _key = "fllig;", _map[_key] = { k: _key, v: 64258 }, _key = "fltns;", _map[_key] = { k: _key, v: 9649 }, _key = "fnof;", _map[_key] = { k: _key, v: 402 }, _key = "fopf;", _map[_key] = { k: _key, v: 120151 }, _key = "forall;", _map[_key] = { k: _key, v: 8704 }, _key = "fork;", _map[_key] = { k: _key, v: 8916 }, _key = "forkv;", _map[_key] = { k: _key, v: 10969 }, _key = "fpartint;", _map[_key] = { k: _key, v: 10765 }, _key = "frac12;", _map[_key] = { k: _key, v: 189 }, _key = "frac13;", _map[_key] = { k: _key, v: 8531 }, _key = "frac14;", _map[_key] = { k: _key, v: 188 }, _key = "frac15;", _map[_key] = { k: _key, v: 8533 }, _key = "frac16;", _map[_key] = { k: _key, v: 8537 }, _key = "frac18;", _map[_key] = { k: _key, v: 8539 }, _key = "frac23;", _map[_key] = { k: _key, v: 8532 }, _key = "frac25;", _map[_key] = { k: _key, v: 8534 }, _key = "frac34;", _map[_key] = { k: _key, v: 190 }, _key = "frac35;", _map[_key] = { k: _key, v: 8535 }, _key = "frac38;", _map[_key] = { k: _key, v: 8540 }, _key = "frac45;", _map[_key] = { k: _key, v: 8536 }, _key = "frac56;", _map[_key] = { k: _key, v: 8538 }, _key = "frac58;", _map[_key] = { k: _key, v: 8541 }, _key = "frac78;", _map[_key] = { k: _key, v: 8542 }, _key = "frasl;", _map[_key] = { k: _key, v: 8260 }, _key = "frown;", _map[_key] = { k: _key, v: 8994 }, _key = "fscr;", _map[_key] = { k: _key, v: 119995 }, _key = "gE;", _map[_key] = { k: _key, v: 8807 }, _key = "gEl;", _map[_key] = { k: _key, v: 10892 }, _key = "gacute;", _map[_key] = { k: _key, v: 501 }, _key = "gamma;", _map[_key] = { k: _key, v: 947 }, _key = "gammad;", _map[_key] = { k: _key, v: 989 }, _key = "gap;", _map[_key] = { k: _key, v: 10886 }, _key = "gbreve;", _map[_key] = { k: _key, v: 287 }, _key = "gcirc;", _map[_key] = { k: _key, v: 285 }, _key = "gcy;", _map[_key] = { k: _key, v: 1075 }, _key = "gdot;", _map[_key] = { k: _key, v: 289 }, _key = "ge;", _map[_key] = { k: _key, v: 8805 }, _key = "gel;", _map[_key] = { k: _key, v: 8923 }, _key = "geq;", _map[_key] = { k: _key, v: 8805 }, _key = "geqq;", _map[_key] = { k: _key, v: 8807 }, _key = "geqslant;", _map[_key] = { k: _key, v: 10878 }, _key = "ges;", _map[_key] = { k: _key, v: 10878 }, _key = "gescc;", _map[_key] = { k: _key, v: 10921 }, _key = "gesdot;", _map[_key] = { k: _key, v: 10880 }, _key = "gesdoto;", _map[_key] = { k: _key, v: 10882 }, _key = "gesdotol;", _map[_key] = { k: _key, v: 10884 }, _key = "gesles;", _map[_key] = { k: _key, v: 10900 }, _key = "gfr;", _map[_key] = { k: _key, v: 120100 }, _key = "gg;", _map[_key] = { k: _key, v: 8811 }, _key = "ggg;", _map[_key] = { k: _key, v: 8921 }, _key = "gimel;", _map[_key] = { k: _key, v: 8503 }, _key = "gjcy;", _map[_key] = { k: _key, v: 1107 }, _key = "gl;", _map[_key] = { k: _key, v: 8823 }, _key = "glE;", _map[_key] = { k: _key, v: 10898 }, _key = "gla;", _map[_key] = { k: _key, v: 10917 }, _key = "glj;", _map[_key] = { k: _key, v: 10916 }, _key = "gnE;", _map[_key] = { k: _key, v: 8809 }, _key = "gnap;", _map[_key] = { k: _key, v: 10890 }, _key = "gnapprox;", _map[_key] = { k: _key, v: 10890 }, _key = "gne;", _map[_key] = { k: _key, v: 10888 }, _key = "gneq;", _map[_key] = { k: _key, v: 10888 }, _key = "gneqq;", _map[_key] = { k: _key, v: 8809 }, _key = "gnsim;", _map[_key] = { k: _key, v: 8935 }, _key = "gopf;", _map[_key] = { k: _key, v: 120152 }, _key = "grave;", _map[_key] = { k: _key, v: 96 }, _key = "gscr;", _map[_key] = { k: _key, v: 8458 }, _key = "gsim;", _map[_key] = { k: _key, v: 8819 }, _key = "gsime;", _map[_key] = { k: _key, v: 10894 }, _key = "gsiml;", _map[_key] = { k: _key, v: 10896 }, _key = "gt;", _map[_key] = { k: _key, v: 62 }, _key = "gtcc;", _map[_key] = { k: _key, v: 10919 }, _key = "gtcir;", _map[_key] = { k: _key, v: 10874 }, _key = "gtdot;", _map[_key] = { k: _key, v: 8919 }, _key = "gtlPar;", _map[_key] = { k: _key, v: 10645 }, _key = "gtquest;", _map[_key] = { k: _key, v: 10876 }, _key = "gtrapprox;", _map[_key] = { k: _key, v: 10886 }, _key = "gtrarr;", _map[_key] = { k: _key, v: 10616 }, _key = "gtrdot;", _map[_key] = { k: _key, v: 8919 }, _key = "gtreqless;", _map[_key] = { k: _key, v: 8923 }, _key = "gtreqqless;", _map[_key] = { k: _key, v: 10892 }, _key = "gtrless;", _map[_key] = { k: _key, v: 8823 }, _key = "gtrsim;", _map[_key] = { k: _key, v: 8819 }, _key = "hArr;", _map[_key] = { k: _key, v: 8660 }, _key = "hairsp;", _map[_key] = { k: _key, v: 8202 }, _key = "half;", _map[_key] = { k: _key, v: 189 }, _key = "hamilt;", _map[_key] = { k: _key, v: 8459 }, _key = "hardcy;", _map[_key] = { k: _key, v: 1098 }, _key = "harr;", _map[_key] = { k: _key, v: 8596 }, _key = "harrcir;", _map[_key] = { k: _key, v: 10568 }, _key = "harrw;", _map[_key] = { k: _key, v: 8621 }, _key = "hbar;", _map[_key] = { k: _key, v: 8463 }, _key = "hcirc;", _map[_key] = { k: _key, v: 293 }, _key = "hearts;", _map[_key] = { k: _key, v: 9829 }, _key = "heartsuit;", _map[_key] = { k: _key, v: 9829 }, _key = "hellip;", _map[_key] = { k: _key, v: 8230 }, _key = "hercon;", _map[_key] = { k: _key, v: 8889 }, _key = "hfr;", _map[_key] = { k: _key, v: 120101 }, _key = "hksearow;", _map[_key] = { k: _key, v: 10533 }, _key = "hkswarow;", _map[_key] = { k: _key, v: 10534 }, _key = "hoarr;", _map[_key] = { k: _key, v: 8703 }, _key = "homtht;", _map[_key] = { k: _key, v: 8763 }, _key = "hookleftarrow;", _map[_key] = { k: _key, v: 8617 }, _key = "hookrightarrow;", _map[_key] = { k: _key, v: 8618 }, _key = "hopf;", _map[_key] = { k: _key, v: 120153 }, _key = "horbar;", _map[_key] = { k: _key, v: 8213 }, _key = "hscr;", _map[_key] = { k: _key, v: 119997 }, _key = "hslash;", _map[_key] = { k: _key, v: 8463 }, _key = "hstrok;", _map[_key] = { k: _key, v: 295 }, _key = "hybull;", _map[_key] = { k: _key, v: 8259 }, _key = "hyphen;", _map[_key] = { k: _key, v: 8208 }, _key = "iacute;", _map[_key] = { k: _key, v: 237 }, _key = "ic;", _map[_key] = { k: _key, v: 8291 }, _key = "icirc;", _map[_key] = { k: _key, v: 238 }, _key = "icy;", _map[_key] = { k: _key, v: 1080 }, _key = "iecy;", _map[_key] = { k: _key, v: 1077 }, _key = "iexcl;", _map[_key] = { k: _key, v: 161 }, _key = "iff;", _map[_key] = { k: _key, v: 8660 }, _key = "ifr;", _map[_key] = { k: _key, v: 120102 }, _key = "igrave;", _map[_key] = { k: _key, v: 236 }, _key = "ii;", _map[_key] = { k: _key, v: 8520 }, _key = "iiiint;", _map[_key] = { k: _key, v: 10764 }, _key = "iiint;", _map[_key] = { k: _key, v: 8749 }, _key = "iinfin;", _map[_key] = { k: _key, v: 10716 }, _key = "iiota;", _map[_key] = { k: _key, v: 8489 }, _key = "ijlig;", _map[_key] = { k: _key, v: 307 }, _key = "imacr;", _map[_key] = { k: _key, v: 299 }, _key = "image;", _map[_key] = { k: _key, v: 8465 }, _key = "imagline;", _map[_key] = { k: _key, v: 8464 }, _key = "imagpart;", _map[_key] = { k: _key, v: 8465 }, _key = "imath;", _map[_key] = { k: _key, v: 305 }, _key = "imof;", _map[_key] = { k: _key, v: 8887 }, _key = "imped;", _map[_key] = { k: _key, v: 437 }, _key = "in;", _map[_key] = { k: _key, v: 8712 }, _key = "incare;", _map[_key] = { k: _key, v: 8453 }, _key = "infin;", _map[_key] = { k: _key, v: 8734 }, _key = "infintie;", _map[_key] = { k: _key, v: 10717 }, _key = "inodot;", _map[_key] = { k: _key, v: 305 }, _key = "int;", _map[_key] = { k: _key, v: 8747 }, _key = "intcal;", _map[_key] = { k: _key, v: 8890 }, _key = "integers;", _map[_key] = { k: _key, v: 8484 }, _key = "intercal;", _map[_key] = { k: _key, v: 8890 }, _key = "intlarhk;", _map[_key] = { k: _key, v: 10775 }, _key = "intprod;", _map[_key] = { k: _key, v: 10812 }, _key = "iocy;", _map[_key] = { k: _key, v: 1105 }, _key = "iogon;", _map[_key] = { k: _key, v: 303 }, _key = "iopf;", _map[_key] = { k: _key, v: 120154 }, _key = "iota;", _map[_key] = { k: _key, v: 953 }, _key = "iprod;", _map[_key] = { k: _key, v: 10812 }, _key = "iquest;", _map[_key] = { k: _key, v: 191 }, _key = "iscr;", _map[_key] = { k: _key, v: 119998 }, _key = "isin;", _map[_key] = { k: _key, v: 8712 }, _key = "isinE;", _map[_key] = { k: _key, v: 8953 }, _key = "isindot;", _map[_key] = { k: _key, v: 8949 }, _key = "isins;", _map[_key] = { k: _key, v: 8948 }, _key = "isinsv;", _map[_key] = { k: _key, v: 8947 }, _key = "isinv;", _map[_key] = { k: _key, v: 8712 }, _key = "it;", _map[_key] = { k: _key, v: 8290 }, _key = "itilde;", _map[_key] = { k: _key, v: 297 }, _key = "iukcy;", _map[_key] = { k: _key, v: 1110 }, _key = "iuml;", _map[_key] = { k: _key, v: 239 }, _key = "jcirc;", _map[_key] = { k: _key, v: 309 }, _key = "jcy;", _map[_key] = { k: _key, v: 1081 }, _key = "jfr;", _map[_key] = { k: _key, v: 120103 }, _key = "jmath;", _map[_key] = { k: _key, v: 567 }, _key = "jopf;", _map[_key] = { k: _key, v: 120155 }, _key = "jscr;", _map[_key] = { k: _key, v: 119999 }, _key = "jsercy;", _map[_key] = { k: _key, v: 1112 }, _key = "jukcy;", _map[_key] = { k: _key, v: 1108 }, _key = "kappa;", _map[_key] = { k: _key, v: 954 }, _key = "kappav;", _map[_key] = { k: _key, v: 1008 }, _key = "kcedil;", _map[_key] = { k: _key, v: 311 }, _key = "kcy;", _map[_key] = { k: _key, v: 1082 }, _key = "kfr;", _map[_key] = { k: _key, v: 120104 }, _key = "kgreen;", _map[_key] = { k: _key, v: 312 }, _key = "khcy;", _map[_key] = { k: _key, v: 1093 }, _key = "kjcy;", _map[_key] = { k: _key, v: 1116 }, _key = "kopf;", _map[_key] = { k: _key, v: 120156 }, _key = "kscr;", _map[_key] = { k: _key, v: 120000 }, _key = "lAarr;", _map[_key] = { k: _key, v: 8666 }, _key = "lArr;", _map[_key] = { k: _key, v: 8656 }, _key = "lAtail;", _map[_key] = { k: _key, v: 10523 }, _key = "lBarr;", _map[_key] = { k: _key, v: 10510 }, _key = "lE;", _map[_key] = { k: _key, v: 8806 }, _key = "lEg;", _map[_key] = { k: _key, v: 10891 }, _key = "lHar;", _map[_key] = { k: _key, v: 10594 }, _key = "lacute;", _map[_key] = { k: _key, v: 314 }, _key = "laemptyv;", _map[_key] = { k: _key, v: 10676 }, _key = "lagran;", _map[_key] = { k: _key, v: 8466 }, _key = "lambda;", _map[_key] = { k: _key, v: 955 }, _key = "lang;", _map[_key] = { k: _key, v: 10216 }, _key = "langd;", _map[_key] = { k: _key, v: 10641 }, _key = "langle;", _map[_key] = { k: _key, v: 10216 }, _key = "lap;", _map[_key] = { k: _key, v: 10885 }, _key = "laquo;", _map[_key] = { k: _key, v: 171 }, _key = "larr;", _map[_key] = { k: _key, v: 8592 }, _key = "larrb;", _map[_key] = { k: _key, v: 8676 }, _key = "larrbfs;", _map[_key] = { k: _key, v: 10527 }, _key = "larrfs;", _map[_key] = { k: _key, v: 10525 }, _key = "larrhk;", _map[_key] = { k: _key, v: 8617 }, _key = "larrlp;", _map[_key] = { k: _key, v: 8619 }, _key = "larrpl;", _map[_key] = { k: _key, v: 10553 }, _key = "larrsim;", _map[_key] = { k: _key, v: 10611 }, _key = "larrtl;", _map[_key] = { k: _key, v: 8610 }, _key = "lat;", _map[_key] = { k: _key, v: 10923 }, _key = "latail;", _map[_key] = { k: _key, v: 10521 }, _key = "late;", _map[_key] = { k: _key, v: 10925 }, _key = "lbarr;", _map[_key] = { k: _key, v: 10508 }, _key = "lbbrk;", _map[_key] = { k: _key, v: 10098 }, _key = "lbrace;", _map[_key] = { k: _key, v: 123 }, _key = "lbrack;", _map[_key] = { k: _key, v: 91 }, _key = "lbrke;", _map[_key] = { k: _key, v: 10635 }, _key = "lbrksld;", _map[_key] = { k: _key, v: 10639 }, _key = "lbrkslu;", _map[_key] = { k: _key, v: 10637 }, _key = "lcaron;", _map[_key] = { k: _key, v: 318 }, _key = "lcedil;", _map[_key] = { k: _key, v: 316 }, _key = "lceil;", _map[_key] = { k: _key, v: 8968 }, _key = "lcub;", _map[_key] = { k: _key, v: 123 }, _key = "lcy;", _map[_key] = { k: _key, v: 1083 }, _key = "ldca;", _map[_key] = { k: _key, v: 10550 }, _key = "ldquo;", _map[_key] = { k: _key, v: 8220 }, _key = "ldquor;", _map[_key] = { k: _key, v: 8222 }, _key = "ldrdhar;", _map[_key] = { k: _key, v: 10599 }, _key = "ldrushar;", _map[_key] = { k: _key, v: 10571 }, _key = "ldsh;", _map[_key] = { k: _key, v: 8626 }, _key = "le;", _map[_key] = { k: _key, v: 8804 }, _key = "leftarrow;", _map[_key] = { k: _key, v: 8592 }, _key = "leftarrowtail;", _map[_key] = { k: _key, v: 8610 }, _key = "leftharpoondown;", _map[_key] = { k: _key, v: 8637 }, _key = "leftharpoonup;", _map[_key] = { k: _key, v: 8636 }, _key = "leftleftarrows;", _map[_key] = { k: _key, v: 8647 }, _key = "leftrightarrow;", _map[_key] = { k: _key, v: 8596 }, _key = "leftrightarrows;", _map[_key] = { k: _key, v: 8646 }, _key = "leftrightharpoons;", _map[_key] = { k: _key, v: 8651 }, _key = "leftrightsquigarrow;", _map[_key] = { k: _key, v: 8621 }, _key = "leftthreetimes;", _map[_key] = { k: _key, v: 8907 }, _key = "leg;", _map[_key] = { k: _key, v: 8922 }, _key = "leq;", _map[_key] = { k: _key, v: 8804 }, _key = "leqq;", _map[_key] = { k: _key, v: 8806 }, _key = "leqslant;", _map[_key] = { k: _key, v: 10877 }, _key = "les;", _map[_key] = { k: _key, v: 10877 }, _key = "lescc;", _map[_key] = { k: _key, v: 10920 }, _key = "lesdot;", _map[_key] = { k: _key, v: 10879 }, _key = "lesdoto;", _map[_key] = { k: _key, v: 10881 }, _key = "lesdotor;", _map[_key] = { k: _key, v: 10883 }, _key = "lesges;", _map[_key] = { k: _key, v: 10899 }, _key = "lessapprox;", _map[_key] = { k: _key, v: 10885 }, _key = "lessdot;", _map[_key] = { k: _key, v: 8918 }, _key = "lesseqgtr;", _map[_key] = { k: _key, v: 8922 }, _key = "lesseqqgtr;", _map[_key] = { k: _key, v: 10891 }, _key = "lessgtr;", _map[_key] = { k: _key, v: 8822 }, _key = "lesssim;", _map[_key] = { k: _key, v: 8818 }, _key = "lfisht;", _map[_key] = { k: _key, v: 10620 }, _key = "lfloor;", _map[_key] = { k: _key, v: 8970 }, _key = "lfr;", _map[_key] = { k: _key, v: 120105 }, _key = "lg;", _map[_key] = { k: _key, v: 8822 }, _key = "lgE;", _map[_key] = { k: _key, v: 10897 }, _key = "lhard;", _map[_key] = { k: _key, v: 8637 }, _key = "lharu;", _map[_key] = { k: _key, v: 8636 }, _key = "lharul;", _map[_key] = { k: _key, v: 10602 }, _key = "lhblk;", _map[_key] = { k: _key, v: 9604 }, _key = "ljcy;", _map[_key] = { k: _key, v: 1113 }, _key = "ll;", _map[_key] = { k: _key, v: 8810 }, _key = "llarr;", _map[_key] = { k: _key, v: 8647 }, _key = "llcorner;", _map[_key] = { k: _key, v: 8990 }, _key = "llhard;", _map[_key] = { k: _key, v: 10603 }, _key = "lltri;", _map[_key] = { k: _key, v: 9722 }, _key = "lmidot;", _map[_key] = { k: _key, v: 320 }, _key = "lmoust;", _map[_key] = { k: _key, v: 9136 }, _key = "lmoustache;", _map[_key] = { k: _key, v: 9136 }, _key = "lnE;", _map[_key] = { k: _key, v: 8808 }, _key = "lnap;", _map[_key] = { k: _key, v: 10889 }, _key = "lnapprox;", _map[_key] = { k: _key, v: 10889 }, _key = "lne;", _map[_key] = { k: _key, v: 10887 }, _key = "lneq;", _map[_key] = { k: _key, v: 10887 }, _key = "lneqq;", _map[_key] = { k: _key, v: 8808 }, _key = "lnsim;", _map[_key] = { k: _key, v: 8934 }, _key = "loang;", _map[_key] = { k: _key, v: 10220 }, _key = "loarr;", _map[_key] = { k: _key, v: 8701 }, _key = "lobrk;", _map[_key] = { k: _key, v: 10214 }, _key = "longleftarrow;", _map[_key] = { k: _key, v: 10229 }, _key = "longleftrightarrow;", _map[_key] = { k: _key, v: 10231 }, _key = "longmapsto;", _map[_key] = { k: _key, v: 10236 }, _key = "longrightarrow;", _map[_key] = { k: _key, v: 10230 }, _key = "looparrowleft;", _map[_key] = { k: _key, v: 8619 }, _key = "looparrowright;", _map[_key] = { k: _key, v: 8620 }, _key = "lopar;", _map[_key] = { k: _key, v: 10629 }, _key = "lopf;", _map[_key] = { k: _key, v: 120157 }, _key = "loplus;", _map[_key] = { k: _key, v: 10797 }, _key = "lotimes;", _map[_key] = { k: _key, v: 10804 }, _key = "lowast;", _map[_key] = { k: _key, v: 8727 }, _key = "lowbar;", _map[_key] = { k: _key, v: 95 }, _key = "loz;", _map[_key] = { k: _key, v: 9674 }, _key = "lozenge;", _map[_key] = { k: _key, v: 9674 }, _key = "lozf;", _map[_key] = { k: _key, v: 10731 }, _key = "lpar;", _map[_key] = { k: _key, v: 40 }, _key = "lparlt;", _map[_key] = { k: _key, v: 10643 }, _key = "lrarr;", _map[_key] = { k: _key, v: 8646 }, _key = "lrcorner;", _map[_key] = { k: _key, v: 8991 }, _key = "lrhar;", _map[_key] = { k: _key, v: 8651 }, _key = "lrhard;", _map[_key] = { k: _key, v: 10605 }, _key = "lrm;", _map[_key] = { k: _key, v: 8206 }, _key = "lrtri;", _map[_key] = { k: _key, v: 8895 }, _key = "lsaquo;", _map[_key] = { k: _key, v: 8249 }, _key = "lscr;", _map[_key] = { k: _key, v: 120001 }, _key = "lsh;", _map[_key] = { k: _key, v: 8624 }, _key = "lsim;", _map[_key] = { k: _key, v: 8818 }, _key = "lsime;", _map[_key] = { k: _key, v: 10893 }, _key = "lsimg;", _map[_key] = { k: _key, v: 10895 }, _key = "lsqb;", _map[_key] = { k: _key, v: 91 }, _key = "lsquo;", _map[_key] = { k: _key, v: 8216 }, _key = "lsquor;", _map[_key] = { k: _key, v: 8218 }, _key = "lstrok;", _map[_key] = { k: _key, v: 322 }, _key = "lt;", _map[_key] = { k: _key, v: 60 }, _key = "ltcc;", _map[_key] = { k: _key, v: 10918 }, _key = "ltcir;", _map[_key] = { k: _key, v: 10873 }, _key = "ltdot;", _map[_key] = { k: _key, v: 8918 }, _key = "lthree;", _map[_key] = { k: _key, v: 8907 }, _key = "ltimes;", _map[_key] = { k: _key, v: 8905 }, _key = "ltlarr;", _map[_key] = { k: _key, v: 10614 }, _key = "ltquest;", _map[_key] = { k: _key, v: 10875 }, _key = "ltrPar;", _map[_key] = { k: _key, v: 10646 }, _key = "ltri;", _map[_key] = { k: _key, v: 9667 }, _key = "ltrie;", _map[_key] = { k: _key, v: 8884 }, _key = "ltrif;", _map[_key] = { k: _key, v: 9666 }, _key = "lurdshar;", _map[_key] = { k: _key, v: 10570 }, _key = "luruhar;", _map[_key] = { k: _key, v: 10598 }, _key = "mDDot;", _map[_key] = { k: _key, v: 8762 }, _key = "macr;", _map[_key] = { k: _key, v: 175 }, _key = "male;", _map[_key] = { k: _key, v: 9794 }, _key = "malt;", _map[_key] = { k: _key, v: 10016 }, _key = "maltese;", _map[_key] = { k: _key, v: 10016 }, _key = "map;", _map[_key] = { k: _key, v: 8614 }, _key = "mapsto;", _map[_key] = { k: _key, v: 8614 }, _key = "mapstodown;", _map[_key] = { k: _key, v: 8615 }, _key = "mapstoleft;", _map[_key] = { k: _key, v: 8612 }, _key = "mapstoup;", _map[_key] = { k: _key, v: 8613 }, _key = "marker;", _map[_key] = { k: _key, v: 9646 }, _key = "mcomma;", _map[_key] = { k: _key, v: 10793 }, _key = "mcy;", _map[_key] = { k: _key, v: 1084 }, _key = "mdash;", _map[_key] = { k: _key, v: 8212 }, _key = "measuredangle;", _map[_key] = { k: _key, v: 8737 }, _key = "mfr;", _map[_key] = { k: _key, v: 120106 }, _key = "mho;", _map[_key] = { k: _key, v: 8487 }, _key = "micro;", _map[_key] = { k: _key, v: 181 }, _key = "mid;", _map[_key] = { k: _key, v: 8739 }, _key = "midast;", _map[_key] = { k: _key, v: 42 }, _key = "midcir;", _map[_key] = { k: _key, v: 10992 }, _key = "middot;", _map[_key] = { k: _key, v: 183 }, _key = "minus;", _map[_key] = { k: _key, v: 8722 }, _key = "minusb;", _map[_key] = { k: _key, v: 8863 }, _key = "minusd;", _map[_key] = { k: _key, v: 8760 }, _key = "minusdu;", _map[_key] = { k: _key, v: 10794 }, _key = "mlcp;", _map[_key] = { k: _key, v: 10971 }, _key = "mldr;", _map[_key] = { k: _key, v: 8230 }, _key = "mnplus;", _map[_key] = { k: _key, v: 8723 }, _key = "models;", _map[_key] = { k: _key, v: 8871 }, _key = "mopf;", _map[_key] = { k: _key, v: 120158 }, _key = "mp;", _map[_key] = { k: _key, v: 8723 }, _key = "mscr;", _map[_key] = { k: _key, v: 120002 }, _key = "mstpos;", _map[_key] = { k: _key, v: 8766 }, _key = "mu;", _map[_key] = { k: _key, v: 956 }, _key = "multimap;", _map[_key] = { k: _key, v: 8888 }, _key = "mumap;", _map[_key] = { k: _key, v: 8888 }, _key = "nLeftarrow;", _map[_key] = { k: _key, v: 8653 }, _key = "nLeftrightarrow;", _map[_key] = { k: _key, v: 8654 }, _key = "nRightarrow;", _map[_key] = { k: _key, v: 8655 }, _key = "nVDash;", _map[_key] = { k: _key, v: 8879 }, _key = "nVdash;", _map[_key] = { k: _key, v: 8878 }, _key = "nabla;", _map[_key] = { k: _key, v: 8711 }, _key = "nacute;", _map[_key] = { k: _key, v: 324 }, _key = "nap;", _map[_key] = { k: _key, v: 8777 }, _key = "napos;", _map[_key] = { k: _key, v: 329 }, _key = "napprox;", _map[_key] = { k: _key, v: 8777 }, _key = "natur;", _map[_key] = { k: _key, v: 9838 }, _key = "natural;", _map[_key] = { k: _key, v: 9838 }, _key = "naturals;", _map[_key] = { k: _key, v: 8469 }, _key = "nbsp;", _map[_key] = { k: _key, v: 160 }, _key = "ncap;", _map[_key] = { k: _key, v: 10819 }, _key = "ncaron;", _map[_key] = { k: _key, v: 328 }, _key = "ncedil;", _map[_key] = { k: _key, v: 326 }, _key = "ncong;", _map[_key] = { k: _key, v: 8775 }, _key = "ncup;", _map[_key] = { k: _key, v: 10818 }, _key = "ncy;", _map[_key] = { k: _key, v: 1085 }, _key = "ndash;", _map[_key] = { k: _key, v: 8211 }, _key = "ne;", _map[_key] = { k: _key, v: 8800 }, _key = "neArr;", _map[_key] = { k: _key, v: 8663 }, _key = "nearhk;", _map[_key] = { k: _key, v: 10532 }, _key = "nearr;", _map[_key] = { k: _key, v: 8599 }, _key = "nearrow;", _map[_key] = { k: _key, v: 8599 }, _key = "nequiv;", _map[_key] = { k: _key, v: 8802 }, _key = "nesear;", _map[_key] = { k: _key, v: 10536 }, _key = "nexist;", _map[_key] = { k: _key, v: 8708 }, _key = "nexists;", _map[_key] = { k: _key, v: 8708 }, _key = "nfr;", _map[_key] = { k: _key, v: 120107 }, _key = "nge;", _map[_key] = { k: _key, v: 8817 }, _key = "ngeq;", _map[_key] = { k: _key, v: 8817 }, _key = "ngsim;", _map[_key] = { k: _key, v: 8821 }, _key = "ngt;", _map[_key] = { k: _key, v: 8815 }, _key = "ngtr;", _map[_key] = { k: _key, v: 8815 }, _key = "nhArr;", _map[_key] = { k: _key, v: 8654 }, _key = "nharr;", _map[_key] = { k: _key, v: 8622 }, _key = "nhpar;", _map[_key] = { k: _key, v: 10994 }, _key = "ni;", _map[_key] = { k: _key, v: 8715 }, _key = "nis;", _map[_key] = { k: _key, v: 8956 }, _key = "nisd;", _map[_key] = { k: _key, v: 8954 }, _key = "niv;", _map[_key] = { k: _key, v: 8715 }, _key = "njcy;", _map[_key] = { k: _key, v: 1114 }, _key = "nlArr;", _map[_key] = { k: _key, v: 8653 }, _key = "nlarr;", _map[_key] = { k: _key, v: 8602 }, _key = "nldr;", _map[_key] = { k: _key, v: 8229 }, _key = "nle;", _map[_key] = { k: _key, v: 8816 }, _key = "nleftarrow;", _map[_key] = { k: _key, v: 8602 }, _key = "nleftrightarrow;", _map[_key] = { k: _key, v: 8622 }, _key = "nleq;", _map[_key] = { k: _key, v: 8816 }, _key = "nless;", _map[_key] = { k: _key, v: 8814 }, _key = "nlsim;", _map[_key] = { k: _key, v: 8820 }, _key = "nlt;", _map[_key] = { k: _key, v: 8814 }, _key = "nltri;", _map[_key] = { k: _key, v: 8938 }, _key = "nltrie;", _map[_key] = { k: _key, v: 8940 }, _key = "nmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nopf;", _map[_key] = { k: _key, v: 120159 }, _key = "not;", _map[_key] = { k: _key, v: 172 }, _key = "notin;", _map[_key] = { k: _key, v: 8713 }, _key = "notinva;", _map[_key] = { k: _key, v: 8713 }, _key = "notinvb;", _map[_key] = { k: _key, v: 8951 }, _key = "notinvc;", _map[_key] = { k: _key, v: 8950 }, _key = "notni;", _map[_key] = { k: _key, v: 8716 }, _key = "notniva;", _map[_key] = { k: _key, v: 8716 }, _key = "notnivb;", _map[_key] = { k: _key, v: 8958 }, _key = "notnivc;", _map[_key] = { k: _key, v: 8957 }, _key = "npar;", _map[_key] = { k: _key, v: 8742 }, _key = "nparallel;", _map[_key] = { k: _key, v: 8742 }, _key = "npolint;", _map[_key] = { k: _key, v: 10772 }, _key = "npr;", _map[_key] = { k: _key, v: 8832 }, _key = "nprcue;", _map[_key] = { k: _key, v: 8928 }, _key = "nprec;", _map[_key] = { k: _key, v: 8832 }, _key = "nrArr;", _map[_key] = { k: _key, v: 8655 }, _key = "nrarr;", _map[_key] = { k: _key, v: 8603 }, _key = "nrightarrow;", _map[_key] = { k: _key, v: 8603 }, _key = "nrtri;", _map[_key] = { k: _key, v: 8939 }, _key = "nrtrie;", _map[_key] = { k: _key, v: 8941 }, _key = "nsc;", _map[_key] = { k: _key, v: 8833 }, _key = "nsccue;", _map[_key] = { k: _key, v: 8929 }, _key = "nscr;", _map[_key] = { k: _key, v: 120003 }, _key = "nshortmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nshortparallel;", _map[_key] = { k: _key, v: 8742 }, _key = "nsim;", _map[_key] = { k: _key, v: 8769 }, _key = "nsime;", _map[_key] = { k: _key, v: 8772 }, _key = "nsimeq;", _map[_key] = { k: _key, v: 8772 }, _key = "nsmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nspar;", _map[_key] = { k: _key, v: 8742 }, _key = "nsqsube;", _map[_key] = { k: _key, v: 8930 }, _key = "nsqsupe;", _map[_key] = { k: _key, v: 8931 }, _key = "nsub;", _map[_key] = { k: _key, v: 8836 }, _key = "nsube;", _map[_key] = { k: _key, v: 8840 }, _key = "nsubseteq;", _map[_key] = { k: _key, v: 8840 }, _key = "nsucc;", _map[_key] = { k: _key, v: 8833 }, _key = "nsup;", _map[_key] = { k: _key, v: 8837 }, _key = "nsupe;", _map[_key] = { k: _key, v: 8841 }, _key = "nsupseteq;", _map[_key] = { k: _key, v: 8841 }, _key = "ntgl;", _map[_key] = { k: _key, v: 8825 }, _key = "ntilde;", _map[_key] = { k: _key, v: 241 }, _key = "ntlg;", _map[_key] = { k: _key, v: 8824 }, _key = "ntriangleleft;", _map[_key] = { k: _key, v: 8938 }, _key = "ntrianglelefteq;", _map[_key] = { k: _key, v: 8940 }, _key = "ntriangleright;", _map[_key] = { k: _key, v: 8939 }, _key = "ntrianglerighteq;", _map[_key] = { k: _key, v: 8941 }, _key = "nu;", _map[_key] = { k: _key, v: 957 }, _key = "num;", _map[_key] = { k: _key, v: 35 }, _key = "numero;", _map[_key] = { k: _key, v: 8470 }, _key = "numsp;", _map[_key] = { k: _key, v: 8199 }, _key = "nvDash;", _map[_key] = { k: _key, v: 8877 }, _key = "nvHarr;", _map[_key] = { k: _key, v: 10500 }, _key = "nvdash;", _map[_key] = { k: _key, v: 8876 }, _key = "nvinfin;", _map[_key] = { k: _key, v: 10718 }, _key = "nvlArr;", _map[_key] = { k: _key, v: 10498 }, _key = "nvrArr;", _map[_key] = { k: _key, v: 10499 }, _key = "nwArr;", _map[_key] = { k: _key, v: 8662 }, _key = "nwarhk;", _map[_key] = { k: _key, v: 10531 }, _key = "nwarr;", _map[_key] = { k: _key, v: 8598 }, _key = "nwarrow;", _map[_key] = { k: _key, v: 8598 }, _key = "nwnear;", _map[_key] = { k: _key, v: 10535 }, _key = "oS;", _map[_key] = { k: _key, v: 9416 }, _key = "oacute;", _map[_key] = { k: _key, v: 243 }, _key = "oast;", _map[_key] = { k: _key, v: 8859 }, _key = "ocir;", _map[_key] = { k: _key, v: 8858 }, _key = "ocirc;", _map[_key] = { k: _key, v: 244 }, _key = "ocy;", _map[_key] = { k: _key, v: 1086 }, _key = "odash;", _map[_key] = { k: _key, v: 8861 }, _key = "odblac;", _map[_key] = { k: _key, v: 337 }, _key = "odiv;", _map[_key] = { k: _key, v: 10808 }, _key = "odot;", _map[_key] = { k: _key, v: 8857 }, _key = "odsold;", _map[_key] = { k: _key, v: 10684 }, _key = "oelig;", _map[_key] = { k: _key, v: 339 }, _key = "ofcir;", _map[_key] = { k: _key, v: 10687 }, _key = "ofr;", _map[_key] = { k: _key, v: 120108 }, _key = "ogon;", _map[_key] = { k: _key, v: 731 }, _key = "ograve;", _map[_key] = { k: _key, v: 242 }, _key = "ogt;", _map[_key] = { k: _key, v: 10689 }, _key = "ohbar;", _map[_key] = { k: _key, v: 10677 }, _key = "ohm;", _map[_key] = { k: _key, v: 937 }, _key = "oint;", _map[_key] = { k: _key, v: 8750 }, _key = "olarr;", _map[_key] = { k: _key, v: 8634 }, _key = "olcir;", _map[_key] = { k: _key, v: 10686 }, _key = "olcross;", _map[_key] = { k: _key, v: 10683 }, _key = "oline;", _map[_key] = { k: _key, v: 8254 }, _key = "olt;", _map[_key] = { k: _key, v: 10688 }, _key = "omacr;", _map[_key] = { k: _key, v: 333 }, _key = "omega;", _map[_key] = { k: _key, v: 969 }, _key = "omicron;", _map[_key] = { k: _key, v: 959 }, _key = "omid;", _map[_key] = { k: _key, v: 10678 }, _key = "ominus;", _map[_key] = { k: _key, v: 8854 }, _key = "oopf;", _map[_key] = { k: _key, v: 120160 }, _key = "opar;", _map[_key] = { k: _key, v: 10679 }, _key = "operp;", _map[_key] = { k: _key, v: 10681 }, _key = "oplus;", _map[_key] = { k: _key, v: 8853 }, _key = "or;", _map[_key] = { k: _key, v: 8744 }, _key = "orarr;", _map[_key] = { k: _key, v: 8635 }, _key = "ord;", _map[_key] = { k: _key, v: 10845 }, _key = "order;", _map[_key] = { k: _key, v: 8500 }, _key = "orderof;", _map[_key] = { k: _key, v: 8500 }, _key = "ordf;", _map[_key] = { k: _key, v: 170 }, _key = "ordm;", _map[_key] = { k: _key, v: 186 }, _key = "origof;", _map[_key] = { k: _key, v: 8886 }, _key = "oror;", _map[_key] = { k: _key, v: 10838 }, _key = "orslope;", _map[_key] = { k: _key, v: 10839 }, _key = "orv;", _map[_key] = { k: _key, v: 10843 }, _key = "oscr;", _map[_key] = { k: _key, v: 8500 }, _key = "oslash;", _map[_key] = { k: _key, v: 248 }, _key = "osol;", _map[_key] = { k: _key, v: 8856 }, _key = "otilde;", _map[_key] = { k: _key, v: 245 }, _key = "otimes;", _map[_key] = { k: _key, v: 8855 }, _key = "otimesas;", _map[_key] = { k: _key, v: 10806 }, _key = "ouml;", _map[_key] = { k: _key, v: 246 }, _key = "ovbar;", _map[_key] = { k: _key, v: 9021 }, _key = "par;", _map[_key] = { k: _key, v: 8741 }, _key = "para;", _map[_key] = { k: _key, v: 182 }, _key = "parallel;", _map[_key] = { k: _key, v: 8741 }, _key = "parsim;", _map[_key] = { k: _key, v: 10995 }, _key = "parsl;", _map[_key] = { k: _key, v: 11005 }, _key = "part;", _map[_key] = { k: _key, v: 8706 }, _key = "pcy;", _map[_key] = { k: _key, v: 1087 }, _key = "percnt;", _map[_key] = { k: _key, v: 37 }, _key = "period;", _map[_key] = { k: _key, v: 46 }, _key = "permil;", _map[_key] = { k: _key, v: 8240 }, _key = "perp;", _map[_key] = { k: _key, v: 8869 }, _key = "pertenk;", _map[_key] = { k: _key, v: 8241 }, _key = "pfr;", _map[_key] = { k: _key, v: 120109 }, _key = "phi;", _map[_key] = { k: _key, v: 966 }, _key = "phiv;", _map[_key] = { k: _key, v: 981 }, _key = "phmmat;", _map[_key] = { k: _key, v: 8499 }, _key = "phone;", _map[_key] = { k: _key, v: 9742 }, _key = "pi;", _map[_key] = { k: _key, v: 960 }, _key = "pitchfork;", _map[_key] = { k: _key, v: 8916 }, _key = "piv;", _map[_key] = { k: _key, v: 982 }, _key = "planck;", _map[_key] = { k: _key, v: 8463 }, _key = "planckh;", _map[_key] = { k: _key, v: 8462 }, _key = "plankv;", _map[_key] = { k: _key, v: 8463 }, _key = "plus;", _map[_key] = { k: _key, v: 43 }, _key = "plusacir;", _map[_key] = { k: _key, v: 10787 }, _key = "plusb;", _map[_key] = { k: _key, v: 8862 }, _key = "pluscir;", _map[_key] = { k: _key, v: 10786 }, _key = "plusdo;", _map[_key] = { k: _key, v: 8724 }, _key = "plusdu;", _map[_key] = { k: _key, v: 10789 }, _key = "pluse;", _map[_key] = { k: _key, v: 10866 }, _key = "plusmn;", _map[_key] = { k: _key, v: 177 }, _key = "plussim;", _map[_key] = { k: _key, v: 10790 }, _key = "plustwo;", _map[_key] = { k: _key, v: 10791 }, _key = "pm;", _map[_key] = { k: _key, v: 177 }, _key = "pointint;", _map[_key] = { k: _key, v: 10773 }, _key = "popf;", _map[_key] = { k: _key, v: 120161 }, _key = "pound;", _map[_key] = { k: _key, v: 163 }, _key = "pr;", _map[_key] = { k: _key, v: 8826 }, _key = "prE;", _map[_key] = { k: _key, v: 10931 }, _key = "prap;", _map[_key] = { k: _key, v: 10935 }, _key = "prcue;", _map[_key] = { k: _key, v: 8828 }, _key = "pre;", _map[_key] = { k: _key, v: 10927 }, _key = "prec;", _map[_key] = { k: _key, v: 8826 }, _key = "precapprox;", _map[_key] = { k: _key, v: 10935 }, _key = "preccurlyeq;", _map[_key] = { k: _key, v: 8828 }, _key = "preceq;", _map[_key] = { k: _key, v: 10927 }, _key = "precnapprox;", _map[_key] = { k: _key, v: 10937 }, _key = "precneqq;", _map[_key] = { k: _key, v: 10933 }, _key = "precnsim;", _map[_key] = { k: _key, v: 8936 }, _key = "precsim;", _map[_key] = { k: _key, v: 8830 }, _key = "prime;", _map[_key] = { k: _key, v: 8242 }, _key = "primes;", _map[_key] = { k: _key, v: 8473 }, _key = "prnE;", _map[_key] = { k: _key, v: 10933 }, _key = "prnap;", _map[_key] = { k: _key, v: 10937 }, _key = "prnsim;", _map[_key] = { k: _key, v: 8936 }, _key = "prod;", _map[_key] = { k: _key, v: 8719 }, _key = "profalar;", _map[_key] = { k: _key, v: 9006 }, _key = "profline;", _map[_key] = { k: _key, v: 8978 }, _key = "profsurf;", _map[_key] = { k: _key, v: 8979 }, _key = "prop;", _map[_key] = { k: _key, v: 8733 }, _key = "propto;", _map[_key] = { k: _key, v: 8733 }, _key = "prsim;", _map[_key] = { k: _key, v: 8830 }, _key = "prurel;", _map[_key] = { k: _key, v: 8880 }, _key = "pscr;", _map[_key] = { k: _key, v: 120005 }, _key = "psi;", _map[_key] = { k: _key, v: 968 }, _key = "puncsp;", _map[_key] = { k: _key, v: 8200 }, _key = "qfr;", _map[_key] = { k: _key, v: 120110 }, _key = "qint;", _map[_key] = { k: _key, v: 10764 }, _key = "qopf;", _map[_key] = { k: _key, v: 120162 }, _key = "qprime;", _map[_key] = { k: _key, v: 8279 }, _key = "qscr;", _map[_key] = { k: _key, v: 120006 }, _key = "quaternions;", _map[_key] = { k: _key, v: 8461 }, _key = "quatint;", _map[_key] = { k: _key, v: 10774 }, _key = "quest;", _map[_key] = { k: _key, v: 63 }, _key = "questeq;", _map[_key] = { k: _key, v: 8799 }, _key = "quot;", _map[_key] = { k: _key, v: 34 }, _key = "rAarr;", _map[_key] = { k: _key, v: 8667 }, _key = "rArr;", _map[_key] = { k: _key, v: 8658 }, _key = "rAtail;", _map[_key] = { k: _key, v: 10524 }, _key = "rBarr;", _map[_key] = { k: _key, v: 10511 }, _key = "rHar;", _map[_key] = { k: _key, v: 10596 }, _key = "racute;", _map[_key] = { k: _key, v: 341 }, _key = "radic;", _map[_key] = { k: _key, v: 8730 }, _key = "raemptyv;", _map[_key] = { k: _key, v: 10675 }, _key = "rang;", _map[_key] = { k: _key, v: 10217 }, _key = "rangd;", _map[_key] = { k: _key, v: 10642 }, _key = "range;", _map[_key] = { k: _key, v: 10661 }, _key = "rangle;", _map[_key] = { k: _key, v: 10217 }, _key = "raquo;", _map[_key] = { k: _key, v: 187 }, _key = "rarr;", _map[_key] = { k: _key, v: 8594 }, _key = "rarrap;", _map[_key] = { k: _key, v: 10613 }, _key = "rarrb;", _map[_key] = { k: _key, v: 8677 }, _key = "rarrbfs;", _map[_key] = { k: _key, v: 10528 }, _key = "rarrc;", _map[_key] = { k: _key, v: 10547 }, _key = "rarrfs;", _map[_key] = { k: _key, v: 10526 }, _key = "rarrhk;", _map[_key] = { k: _key, v: 8618 }, _key = "rarrlp;", _map[_key] = { k: _key, v: 8620 }, _key = "rarrpl;", _map[_key] = { k: _key, v: 10565 }, _key = "rarrsim;", _map[_key] = { k: _key, v: 10612 }, _key = "rarrtl;", _map[_key] = { k: _key, v: 8611 }, _key = "rarrw;", _map[_key] = { k: _key, v: 8605 }, _key = "ratail;", _map[_key] = { k: _key, v: 10522 }, _key = "ratio;", _map[_key] = { k: _key, v: 8758 }, _key = "rationals;", _map[_key] = { k: _key, v: 8474 }, _key = "rbarr;", _map[_key] = { k: _key, v: 10509 }, _key = "rbbrk;", _map[_key] = { k: _key, v: 10099 }, _key = "rbrace;", _map[_key] = { k: _key, v: 125 }, _key = "rbrack;", _map[_key] = { k: _key, v: 93 }, _key = "rbrke;", _map[_key] = { k: _key, v: 10636 }, _key = "rbrksld;", _map[_key] = { k: _key, v: 10638 }, _key = "rbrkslu;", _map[_key] = { k: _key, v: 10640 }, _key = "rcaron;", _map[_key] = { k: _key, v: 345 }, _key = "rcedil;", _map[_key] = { k: _key, v: 343 }, _key = "rceil;", _map[_key] = { k: _key, v: 8969 }, _key = "rcub;", _map[_key] = { k: _key, v: 125 }, _key = "rcy;", _map[_key] = { k: _key, v: 1088 }, _key = "rdca;", _map[_key] = { k: _key, v: 10551 }, _key = "rdldhar;", _map[_key] = { k: _key, v: 10601 }, _key = "rdquo;", _map[_key] = { k: _key, v: 8221 }, _key = "rdquor;", _map[_key] = { k: _key, v: 8221 }, _key = "rdsh;", _map[_key] = { k: _key, v: 8627 }, _key = "real;", _map[_key] = { k: _key, v: 8476 }, _key = "realine;", _map[_key] = { k: _key, v: 8475 }, _key = "realpart;", _map[_key] = { k: _key, v: 8476 }, _key = "reals;", _map[_key] = { k: _key, v: 8477 }, _key = "rect;", _map[_key] = { k: _key, v: 9645 }, _key = "reg;", _map[_key] = { k: _key, v: 174 }, _key = "rfisht;", _map[_key] = { k: _key, v: 10621 }, _key = "rfloor;", _map[_key] = { k: _key, v: 8971 }, _key = "rfr;", _map[_key] = { k: _key, v: 120111 }, _key = "rhard;", _map[_key] = { k: _key, v: 8641 }, _key = "rharu;", _map[_key] = { k: _key, v: 8640 }, _key = "rharul;", _map[_key] = { k: _key, v: 10604 }, _key = "rho;", _map[_key] = { k: _key, v: 961 }, _key = "rhov;", _map[_key] = { k: _key, v: 1009 }, _key = "rightarrow;", _map[_key] = { k: _key, v: 8594 }, _key = "rightarrowtail;", _map[_key] = { k: _key, v: 8611 }, _key = "rightharpoondown;", _map[_key] = { k: _key, v: 8641 }, _key = "rightharpoonup;", _map[_key] = { k: _key, v: 8640 }, _key = "rightleftarrows;", _map[_key] = { k: _key, v: 8644 }, _key = "rightleftharpoons;", _map[_key] = { k: _key, v: 8652 }, _key = "rightrightarrows;", _map[_key] = { k: _key, v: 8649 }, _key = "rightsquigarrow;", _map[_key] = { k: _key, v: 8605 }, _key = "rightthreetimes;", _map[_key] = { k: _key, v: 8908 }, _key = "ring;", _map[_key] = { k: _key, v: 730 }, _key = "risingdotseq;", _map[_key] = { k: _key, v: 8787 }, _key = "rlarr;", _map[_key] = { k: _key, v: 8644 }, _key = "rlhar;", _map[_key] = { k: _key, v: 8652 }, _key = "rlm;", _map[_key] = { k: _key, v: 8207 }, _key = "rmoust;", _map[_key] = { k: _key, v: 9137 }, _key = "rmoustache;", _map[_key] = { k: _key, v: 9137 }, _key = "rnmid;", _map[_key] = { k: _key, v: 10990 }, _key = "roang;", _map[_key] = { k: _key, v: 10221 }, _key = "roarr;", _map[_key] = { k: _key, v: 8702 }, _key = "robrk;", _map[_key] = { k: _key, v: 10215 }, _key = "ropar;", _map[_key] = { k: _key, v: 10630 }, _key = "ropf;", _map[_key] = { k: _key, v: 120163 }, _key = "roplus;", _map[_key] = { k: _key, v: 10798 }, _key = "rotimes;", _map[_key] = { k: _key, v: 10805 }, _key = "rpar;", _map[_key] = { k: _key, v: 41 }, _key = "rpargt;", _map[_key] = { k: _key, v: 10644 }, _key = "rppolint;", _map[_key] = { k: _key, v: 10770 }, _key = "rrarr;", _map[_key] = { k: _key, v: 8649 }, _key = "rsaquo;", _map[_key] = { k: _key, v: 8250 }, _key = "rscr;", _map[_key] = { k: _key, v: 120007 }, _key = "rsh;", _map[_key] = { k: _key, v: 8625 }, _key = "rsqb;", _map[_key] = { k: _key, v: 93 }, _key = "rsquo;", _map[_key] = { k: _key, v: 8217 }, _key = "rsquor;", _map[_key] = { k: _key, v: 8217 }, _key = "rthree;", _map[_key] = { k: _key, v: 8908 }, _key = "rtimes;", _map[_key] = { k: _key, v: 8906 }, _key = "rtri;", _map[_key] = { k: _key, v: 9657 }, _key = "rtrie;", _map[_key] = { k: _key, v: 8885 }, _key = "rtrif;", _map[_key] = { k: _key, v: 9656 }, _key = "rtriltri;", _map[_key] = { k: _key, v: 10702 }, _key = "ruluhar;", _map[_key] = { k: _key, v: 10600 }, _key = "rx;", _map[_key] = { k: _key, v: 8478 }, _key = "sacute;", _map[_key] = { k: _key, v: 347 }, _key = "sbquo;", _map[_key] = { k: _key, v: 8218 }, _key = "sc;", _map[_key] = { k: _key, v: 8827 }, _key = "scE;", _map[_key] = { k: _key, v: 10932 }, _key = "scap;", _map[_key] = { k: _key, v: 10936 }, _key = "scaron;", _map[_key] = { k: _key, v: 353 }, _key = "sccue;", _map[_key] = { k: _key, v: 8829 }, _key = "sce;", _map[_key] = { k: _key, v: 10928 }, _key = "scedil;", _map[_key] = { k: _key, v: 351 }, _key = "scirc;", _map[_key] = { k: _key, v: 349 }, _key = "scnE;", _map[_key] = { k: _key, v: 10934 }, _key = "scnap;", _map[_key] = { k: _key, v: 10938 }, _key = "scnsim;", _map[_key] = { k: _key, v: 8937 }, _key = "scpolint;", _map[_key] = { k: _key, v: 10771 }, _key = "scsim;", _map[_key] = { k: _key, v: 8831 }, _key = "scy;", _map[_key] = { k: _key, v: 1089 }, _key = "sdot;", _map[_key] = { k: _key, v: 8901 }, _key = "sdotb;", _map[_key] = { k: _key, v: 8865 }, _key = "sdote;", _map[_key] = { k: _key, v: 10854 }, _key = "seArr;", _map[_key] = { k: _key, v: 8664 }, _key = "searhk;", _map[_key] = { k: _key, v: 10533 }, _key = "searr;", _map[_key] = { k: _key, v: 8600 }, _key = "searrow;", _map[_key] = { k: _key, v: 8600 }, _key = "sect;", _map[_key] = { k: _key, v: 167 }, _key = "semi;", _map[_key] = { k: _key, v: 59 }, _key = "seswar;", _map[_key] = { k: _key, v: 10537 }, _key = "setminus;", _map[_key] = { k: _key, v: 8726 }, _key = "setmn;", _map[_key] = { k: _key, v: 8726 }, _key = "sext;", _map[_key] = { k: _key, v: 10038 }, _key = "sfr;", _map[_key] = { k: _key, v: 120112 }, _key = "sfrown;", _map[_key] = { k: _key, v: 8994 }, _key = "sharp;", _map[_key] = { k: _key, v: 9839 }, _key = "shchcy;", _map[_key] = { k: _key, v: 1097 }, _key = "shcy;", _map[_key] = { k: _key, v: 1096 }, _key = "shortmid;", _map[_key] = { k: _key, v: 8739 }, _key = "shortparallel;", _map[_key] = { k: _key, v: 8741 }, _key = "shy;", _map[_key] = { k: _key, v: 173 }, _key = "sigma;", _map[_key] = { k: _key, v: 963 }, _key = "sigmaf;", _map[_key] = { k: _key, v: 962 }, _key = "sigmav;", _map[_key] = { k: _key, v: 962 }, _key = "sim;", _map[_key] = { k: _key, v: 8764 }, _key = "simdot;", _map[_key] = { k: _key, v: 10858 }, _key = "sime;", _map[_key] = { k: _key, v: 8771 }, _key = "simeq;", _map[_key] = { k: _key, v: 8771 }, _key = "simg;", _map[_key] = { k: _key, v: 10910 }, _key = "simgE;", _map[_key] = { k: _key, v: 10912 }, _key = "siml;", _map[_key] = { k: _key, v: 10909 }, _key = "simlE;", _map[_key] = { k: _key, v: 10911 }, _key = "simne;", _map[_key] = { k: _key, v: 8774 }, _key = "simplus;", _map[_key] = { k: _key, v: 10788 }, _key = "simrarr;", _map[_key] = { k: _key, v: 10610 }, _key = "slarr;", _map[_key] = { k: _key, v: 8592 }, _key = "smallsetminus;", _map[_key] = { k: _key, v: 8726 }, _key = "smashp;", _map[_key] = { k: _key, v: 10803 }, _key = "smeparsl;", _map[_key] = { k: _key, v: 10724 }, _key = "smid;", _map[_key] = { k: _key, v: 8739 }, _key = "smile;", _map[_key] = { k: _key, v: 8995 }, _key = "smt;", _map[_key] = { k: _key, v: 10922 }, _key = "smte;", _map[_key] = { k: _key, v: 10924 }, _key = "softcy;", _map[_key] = { k: _key, v: 1100 }, _key = "sol;", _map[_key] = { k: _key, v: 47 }, _key = "solb;", _map[_key] = { k: _key, v: 10692 }, _key = "solbar;", _map[_key] = { k: _key, v: 9023 }, _key = "sopf;", _map[_key] = { k: _key, v: 120164 }, _key = "spades;", _map[_key] = { k: _key, v: 9824 }, _key = "spadesuit;", _map[_key] = { k: _key, v: 9824 }, _key = "spar;", _map[_key] = { k: _key, v: 8741 }, _key = "sqcap;", _map[_key] = { k: _key, v: 8851 }, _key = "sqcup;", _map[_key] = { k: _key, v: 8852 }, _key = "sqsub;", _map[_key] = { k: _key, v: 8847 }, _key = "sqsube;", _map[_key] = { k: _key, v: 8849 }, _key = "sqsubset;", _map[_key] = { k: _key, v: 8847 }, _key = "sqsubseteq;", _map[_key] = { k: _key, v: 8849 }, _key = "sqsup;", _map[_key] = { k: _key, v: 8848 }, _key = "sqsupe;", _map[_key] = { k: _key, v: 8850 }, _key = "sqsupset;", _map[_key] = { k: _key, v: 8848 }, _key = "sqsupseteq;", _map[_key] = { k: _key, v: 8850 }, _key = "squ;", _map[_key] = { k: _key, v: 9633 }, _key = "square;", _map[_key] = { k: _key, v: 9633 }, _key = "squarf;", _map[_key] = { k: _key, v: 9642 }, _key = "squf;", _map[_key] = { k: _key, v: 9642 }, _key = "srarr;", _map[_key] = { k: _key, v: 8594 }, _key = "sscr;", _map[_key] = { k: _key, v: 120008 }, _key = "ssetmn;", _map[_key] = { k: _key, v: 8726 }, _key = "ssmile;", _map[_key] = { k: _key, v: 8995 }, _key = "sstarf;", _map[_key] = { k: _key, v: 8902 }, _key = "star;", _map[_key] = { k: _key, v: 9734 }, _key = "starf;", _map[_key] = { k: _key, v: 9733 }, _key = "straightepsilon;", _map[_key] = { k: _key, v: 1013 }, _key = "straightphi;", _map[_key] = { k: _key, v: 981 }, _key = "strns;", _map[_key] = { k: _key, v: 175 }, _key = "sub;", _map[_key] = { k: _key, v: 8834 }, _key = "subE;", _map[_key] = { k: _key, v: 10949 }, _key = "subdot;", _map[_key] = { k: _key, v: 10941 }, _key = "sube;", _map[_key] = { k: _key, v: 8838 }, _key = "subedot;", _map[_key] = { k: _key, v: 10947 }, _key = "submult;", _map[_key] = { k: _key, v: 10945 }, _key = "subnE;", _map[_key] = { k: _key, v: 10955 }, _key = "subne;", _map[_key] = { k: _key, v: 8842 }, _key = "subplus;", _map[_key] = { k: _key, v: 10943 }, _key = "subrarr;", _map[_key] = { k: _key, v: 10617 }, _key = "subset;", _map[_key] = { k: _key, v: 8834 }, _key = "subseteq;", _map[_key] = { k: _key, v: 8838 }, _key = "subseteqq;", _map[_key] = { k: _key, v: 10949 }, _key = "subsetneq;", _map[_key] = { k: _key, v: 8842 }, _key = "subsetneqq;", _map[_key] = { k: _key, v: 10955 }, _key = "subsim;", _map[_key] = { k: _key, v: 10951 }, _key = "subsub;", _map[_key] = { k: _key, v: 10965 }, _key = "subsup;", _map[_key] = { k: _key, v: 10963 }, _key = "succ;", _map[_key] = { k: _key, v: 8827 }, _key = "succapprox;", _map[_key] = { k: _key, v: 10936 }, _key = "succcurlyeq;", _map[_key] = { k: _key, v: 8829 }, _key = "succeq;", _map[_key] = { k: _key, v: 10928 }, _key = "succnapprox;", _map[_key] = { k: _key, v: 10938 }, _key = "succneqq;", _map[_key] = { k: _key, v: 10934 }, _key = "succnsim;", _map[_key] = { k: _key, v: 8937 }, _key = "succsim;", _map[_key] = { k: _key, v: 8831 }, _key = "sum;", _map[_key] = { k: _key, v: 8721 }, _key = "sung;", _map[_key] = { k: _key, v: 9834 }, _key = "sup;", _map[_key] = { k: _key, v: 8835 }, _key = "sup1;", _map[_key] = { k: _key, v: 185 }, _key = "sup2;", _map[_key] = { k: _key, v: 178 }, _key = "sup3;", _map[_key] = { k: _key, v: 179 }, _key = "supE;", _map[_key] = { k: _key, v: 10950 }, _key = "supdot;", _map[_key] = { k: _key, v: 10942 }, _key = "supdsub;", _map[_key] = { k: _key, v: 10968 }, _key = "supe;", _map[_key] = { k: _key, v: 8839 }, _key = "supedot;", _map[_key] = { k: _key, v: 10948 }, _key = "suphsol;", _map[_key] = { k: _key, v: 10185 }, _key = "suphsub;", _map[_key] = { k: _key, v: 10967 }, _key = "suplarr;", _map[_key] = { k: _key, v: 10619 }, _key = "supmult;", _map[_key] = { k: _key, v: 10946 }, _key = "supnE;", _map[_key] = { k: _key, v: 10956 }, _key = "supne;", _map[_key] = { k: _key, v: 8843 }, _key = "supplus;", _map[_key] = { k: _key, v: 10944 }, _key = "supset;", _map[_key] = { k: _key, v: 8835 }, _key = "supseteq;", _map[_key] = { k: _key, v: 8839 }, _key = "supseteqq;", _map[_key] = { k: _key, v: 10950 }, _key = "supsetneq;", _map[_key] = { k: _key, v: 8843 }, _key = "supsetneqq;", _map[_key] = { k: _key, v: 10956 }, _key = "supsim;", _map[_key] = { k: _key, v: 10952 }, _key = "supsub;", _map[_key] = { k: _key, v: 10964 }, _key = "supsup;", _map[_key] = { k: _key, v: 10966 }, _key = "swArr;", _map[_key] = { k: _key, v: 8665 }, _key = "swarhk;", _map[_key] = { k: _key, v: 10534 }, _key = "swarr;", _map[_key] = { k: _key, v: 8601 }, _key = "swarrow;", _map[_key] = { k: _key, v: 8601 }, _key = "swnwar;", _map[_key] = { k: _key, v: 10538 }, _key = "szlig;", _map[_key] = { k: _key, v: 223 }, _key = "target;", _map[_key] = { k: _key, v: 8982 }, _key = "tau;", _map[_key] = { k: _key, v: 964 }, _key = "tbrk;", _map[_key] = { k: _key, v: 9140 }, _key = "tcaron;", _map[_key] = { k: _key, v: 357 }, _key = "tcedil;", _map[_key] = { k: _key, v: 355 }, _key = "tcy;", _map[_key] = { k: _key, v: 1090 }, _key = "tdot;", _map[_key] = { k: _key, v: 8411 }, _key = "telrec;", _map[_key] = { k: _key, v: 8981 }, _key = "tfr;", _map[_key] = { k: _key, v: 120113 }, _key = "there4;", _map[_key] = { k: _key, v: 8756 }, _key = "therefore;", _map[_key] = { k: _key, v: 8756 }, _key = "theta;", _map[_key] = { k: _key, v: 952 }, _key = "thetasym;", _map[_key] = { k: _key, v: 977 }, _key = "thetav;", _map[_key] = { k: _key, v: 977 }, _key = "thickapprox;", _map[_key] = { k: _key, v: 8776 }, _key = "thicksim;", _map[_key] = { k: _key, v: 8764 }, _key = "thinsp;", _map[_key] = { k: _key, v: 8201 }, _key = "thkap;", _map[_key] = { k: _key, v: 8776 }, _key = "thksim;", _map[_key] = { k: _key, v: 8764 }, _key = "thorn;", _map[_key] = { k: _key, v: 254 }, _key = "tilde;", _map[_key] = { k: _key, v: 732 }, _key = "times;", _map[_key] = { k: _key, v: 215 }, _key = "timesb;", _map[_key] = { k: _key, v: 8864 }, _key = "timesbar;", _map[_key] = { k: _key, v: 10801 }, _key = "timesd;", _map[_key] = { k: _key, v: 10800 }, _key = "tint;", _map[_key] = { k: _key, v: 8749 }, _key = "toea;", _map[_key] = { k: _key, v: 10536 }, _key = "top;", _map[_key] = { k: _key, v: 8868 }, _key = "topbot;", _map[_key] = { k: _key, v: 9014 }, _key = "topcir;", _map[_key] = { k: _key, v: 10993 }, _key = "topf;", _map[_key] = { k: _key, v: 120165 }, _key = "topfork;", _map[_key] = { k: _key, v: 10970 }, _key = "tosa;", _map[_key] = { k: _key, v: 10537 }, _key = "tprime;", _map[_key] = { k: _key, v: 8244 }, _key = "trade;", _map[_key] = { k: _key, v: 8482 }, _key = "triangle;", _map[_key] = { k: _key, v: 9653 }, _key = "triangledown;", _map[_key] = { k: _key, v: 9663 }, _key = "triangleleft;", _map[_key] = { k: _key, v: 9667 }, _key = "trianglelefteq;", _map[_key] = { k: _key, v: 8884 }, _key = "triangleq;", _map[_key] = { k: _key, v: 8796 }, _key = "triangleright;", _map[_key] = { k: _key, v: 9657 }, _key = "trianglerighteq;", _map[_key] = { k: _key, v: 8885 }, _key = "tridot;", _map[_key] = { k: _key, v: 9708 }, _key = "trie;", _map[_key] = { k: _key, v: 8796 }, _key = "triminus;", _map[_key] = { k: _key, v: 10810 }, _key = "triplus;", _map[_key] = { k: _key, v: 10809 }, _key = "trisb;", _map[_key] = { k: _key, v: 10701 }, _key = "tritime;", _map[_key] = { k: _key, v: 10811 }, _key = "trpezium;", _map[_key] = { k: _key, v: 9186 }, _key = "tscr;", _map[_key] = { k: _key, v: 120009 }, _key = "tscy;", _map[_key] = { k: _key, v: 1094 }, _key = "tshcy;", _map[_key] = { k: _key, v: 1115 }, _key = "tstrok;", _map[_key] = { k: _key, v: 359 }, _key = "twixt;", _map[_key] = { k: _key, v: 8812 }, _key = "twoheadleftarrow;", _map[_key] = { k: _key, v: 8606 }, _key = "twoheadrightarrow;", _map[_key] = { k: _key, v: 8608 }, _key = "uArr;", _map[_key] = { k: _key, v: 8657 }, _key = "uHar;", _map[_key] = { k: _key, v: 10595 }, _key = "uacute;", _map[_key] = { k: _key, v: 250 }, _key = "uarr;", _map[_key] = { k: _key, v: 8593 }, _key = "ubrcy;", _map[_key] = { k: _key, v: 1118 }, _key = "ubreve;", _map[_key] = { k: _key, v: 365 }, _key = "ucirc;", _map[_key] = { k: _key, v: 251 }, _key = "ucy;", _map[_key] = { k: _key, v: 1091 }, _key = "udarr;", _map[_key] = { k: _key, v: 8645 }, _key = "udblac;", _map[_key] = { k: _key, v: 369 }, _key = "udhar;", _map[_key] = { k: _key, v: 10606 }, _key = "ufisht;", _map[_key] = { k: _key, v: 10622 }, _key = "ufr;", _map[_key] = { k: _key, v: 120114 }, _key = "ugrave;", _map[_key] = { k: _key, v: 249 }, _key = "uharl;", _map[_key] = { k: _key, v: 8639 }, _key = "uharr;", _map[_key] = { k: _key, v: 8638 }, _key = "uhblk;", _map[_key] = { k: _key, v: 9600 }, _key = "ulcorn;", _map[_key] = { k: _key, v: 8988 }, _key = "ulcorner;", _map[_key] = { k: _key, v: 8988 }, _key = "ulcrop;", _map[_key] = { k: _key, v: 8975 }, _key = "ultri;", _map[_key] = { k: _key, v: 9720 }, _key = "umacr;", _map[_key] = { k: _key, v: 363 }, _key = "uml;", _map[_key] = { k: _key, v: 168 }, _key = "uogon;", _map[_key] = { k: _key, v: 371 }, _key = "uopf;", _map[_key] = { k: _key, v: 120166 }, _key = "uparrow;", _map[_key] = { k: _key, v: 8593 }, _key = "updownarrow;", _map[_key] = { k: _key, v: 8597 }, _key = "upharpoonleft;", _map[_key] = { k: _key, v: 8639 }, _key = "upharpoonright;", _map[_key] = { k: _key, v: 8638 }, _key = "uplus;", _map[_key] = { k: _key, v: 8846 }, _key = "upsi;", _map[_key] = { k: _key, v: 965 }, _key = "upsih;", _map[_key] = { k: _key, v: 978 }, _key = "upsilon;", _map[_key] = { k: _key, v: 965 }, _key = "upuparrows;", _map[_key] = { k: _key, v: 8648 }, _key = "urcorn;", _map[_key] = { k: _key, v: 8989 }, _key = "urcorner;", _map[_key] = { k: _key, v: 8989 }, _key = "urcrop;", _map[_key] = { k: _key, v: 8974 }, _key = "uring;", _map[_key] = { k: _key, v: 367 }, _key = "urtri;", _map[_key] = { k: _key, v: 9721 }, _key = "uscr;", _map[_key] = { k: _key, v: 120010 }, _key = "utdot;", _map[_key] = { k: _key, v: 8944 }, _key = "utilde;", _map[_key] = { k: _key, v: 361 }, _key = "utri;", _map[_key] = { k: _key, v: 9653 }, _key = "utrif;", _map[_key] = { k: _key, v: 9652 }, _key = "uuarr;", _map[_key] = { k: _key, v: 8648 }, _key = "uuml;", _map[_key] = { k: _key, v: 252 }, _key = "uwangle;", _map[_key] = { k: _key, v: 10663 }, _key = "vArr;", _map[_key] = { k: _key, v: 8661 }, _key = "vBar;", _map[_key] = { k: _key, v: 10984 }, _key = "vBarv;", _map[_key] = { k: _key, v: 10985 }, _key = "vDash;", _map[_key] = { k: _key, v: 8872 }, _key = "vangrt;", _map[_key] = { k: _key, v: 10652 }, _key = "varepsilon;", _map[_key] = { k: _key, v: 1013 }, _key = "varkappa;", _map[_key] = { k: _key, v: 1008 }, _key = "varnothing;", _map[_key] = { k: _key, v: 8709 }, _key = "varphi;", _map[_key] = { k: _key, v: 981 }, _key = "varpi;", _map[_key] = { k: _key, v: 982 }, _key = "varpropto;", _map[_key] = { k: _key, v: 8733 }, _key = "varr;", _map[_key] = { k: _key, v: 8597 }, _key = "varrho;", _map[_key] = { k: _key, v: 1009 }, _key = "varsigma;", _map[_key] = { k: _key, v: 962 }, _key = "vartheta;", _map[_key] = { k: _key, v: 977 }, _key = "vartriangleleft;", _map[_key] = { k: _key, v: 8882 }, _key = "vartriangleright;", _map[_key] = { k: _key, v: 8883 }, _key = "vcy;", _map[_key] = { k: _key, v: 1074 }, _key = "vdash;", _map[_key] = { k: _key, v: 8866 }, _key = "vee;", _map[_key] = { k: _key, v: 8744 }, _key = "veebar;", _map[_key] = { k: _key, v: 8891 }, _key = "veeeq;", _map[_key] = { k: _key, v: 8794 }, _key = "vellip;", _map[_key] = { k: _key, v: 8942 }, _key = "verbar;", _map[_key] = { k: _key, v: 124 }, _key = "vert;", _map[_key] = { k: _key, v: 124 }, _key = "vfr;", _map[_key] = { k: _key, v: 120115 }, _key = "vltri;", _map[_key] = { k: _key, v: 8882 }, _key = "vopf;", _map[_key] = { k: _key, v: 120167 }, _key = "vprop;", _map[_key] = { k: _key, v: 8733 }, _key = "vrtri;", _map[_key] = { k: _key, v: 8883 }, _key = "vscr;", _map[_key] = { k: _key, v: 120011 }, _key = "vzigzag;", _map[_key] = { k: _key, v: 10650 }, _key = "wcirc;", _map[_key] = { k: _key, v: 373 }, _key = "wedbar;", _map[_key] = { k: _key, v: 10847 }, _key = "wedge;", _map[_key] = { k: _key, v: 8743 }, _key = "wedgeq;", _map[_key] = { k: _key, v: 8793 }, _key = "weierp;", _map[_key] = { k: _key, v: 8472 }, _key = "wfr;", _map[_key] = { k: _key, v: 120116 }, _key = "wopf;", _map[_key] = { k: _key, v: 120168 }, _key = "wp;", _map[_key] = { k: _key, v: 8472 }, _key = "wr;", _map[_key] = { k: _key, v: 8768 }, _key = "wreath;", _map[_key] = { k: _key, v: 8768 }, _key = "wscr;", _map[_key] = { k: _key, v: 120012 }, _key = "xcap;", _map[_key] = { k: _key, v: 8898 }, _key = "xcirc;", _map[_key] = { k: _key, v: 9711 }, _key = "xcup;", _map[_key] = { k: _key, v: 8899 }, _key = "xdtri;", _map[_key] = { k: _key, v: 9661 }, _key = "xfr;", _map[_key] = { k: _key, v: 120117 }, _key = "xhArr;", _map[_key] = { k: _key, v: 10234 }, _key = "xharr;", _map[_key] = { k: _key, v: 10231 }, _key = "xi;", _map[_key] = { k: _key, v: 958 }, _key = "xlArr;", _map[_key] = { k: _key, v: 10232 }, _key = "xlarr;", _map[_key] = { k: _key, v: 10229 }, _key = "xmap;", _map[_key] = { k: _key, v: 10236 }, _key = "xnis;", _map[_key] = { k: _key, v: 8955 }, _key = "xodot;", _map[_key] = { k: _key, v: 10752 }, _key = "xopf;", _map[_key] = { k: _key, v: 120169 }, _key = "xoplus;", _map[_key] = { k: _key, v: 10753 }, _key = "xotime;", _map[_key] = { k: _key, v: 10754 }, _key = "xrArr;", _map[_key] = { k: _key, v: 10233 }, _key = "xrarr;", _map[_key] = { k: _key, v: 10230 }, _key = "xscr;", _map[_key] = { k: _key, v: 120013 }, _key = "xsqcup;", _map[_key] = { k: _key, v: 10758 }, _key = "xuplus;", _map[_key] = { k: _key, v: 10756 }, _key = "xutri;", _map[_key] = { k: _key, v: 9651 }, _key = "xvee;", _map[_key] = { k: _key, v: 8897 }, _key = "xwedge;", _map[_key] = { k: _key, v: 8896 }, _key = "yacute;", _map[_key] = { k: _key, v: 253 }, _key = "yacy;", _map[_key] = { k: _key, v: 1103 }, _key = "ycirc;", _map[_key] = { k: _key, v: 375 }, _key = "ycy;", _map[_key] = { k: _key, v: 1099 }, _key = "yen;", _map[_key] = { k: _key, v: 165 }, _key = "yfr;", _map[_key] = { k: _key, v: 120118 }, _key = "yicy;", _map[_key] = { k: _key, v: 1111 }, _key = "yopf;", _map[_key] = { k: _key, v: 120170 }, _key = "yscr;", _map[_key] = { k: _key, v: 120014 }, _key = "yucy;", _map[_key] = { k: _key, v: 1102 }, _key = "yuml;", _map[_key] = { k: _key, v: 255 }, _key = "zacute;", _map[_key] = { k: _key, v: 378 }, _key = "zcaron;", _map[_key] = { k: _key, v: 382 }, _key = "zcy;", _map[_key] = { k: _key, v: 1079 }, _key = "zdot;", _map[_key] = { k: _key, v: 380 }, _key = "zeetrf;", _map[_key] = { k: _key, v: 8488 }, _key = "zeta;", _map[_key] = { k: _key, v: 950 }, _key = "zfr;", _map[_key] = { k: _key, v: 120119 }, _key = "zhcy;", _map[_key] = { k: _key, v: 1078 }, _key = "zigrarr;", _map[_key] = { k: _key, v: 8669 }, _key = "zopf;", _map[_key] = { k: _key, v: 120171 }, _key = "zscr;", _map[_key] = { k: _key, v: 120015 }, _key = "zwj;", _map[_key] = { k: _key, v: 8205 }, _key = "zwnj;", _map[_key] = { k: _key, v: 8204 }, _key = "AElig", _map[_key] = { k: _key, v: 198 }, _key = "AMP", _map[_key] = { k: _key, v: 38 }, _key = "Aacute", _map[_key] = { k: _key, v: 193 }, _key = "Acirc", _map[_key] = { k: _key, v: 194 }, _key = "Agrave", _map[_key] = { k: _key, v: 192 }, _key = "Aring", _map[_key] = { k: _key, v: 197 }, _key = "Atilde", _map[_key] = { k: _key, v: 195 }, _key = "Auml", _map[_key] = { k: _key, v: 196 }, _key = "COPY", _map[_key] = { k: _key, v: 169 }, _key = "Ccedil", _map[_key] = { k: _key, v: 199 }, _key = "ETH", _map[_key] = { k: _key, v: 208 }, _key = "Eacute", _map[_key] = { k: _key, v: 201 }, _key = "Ecirc", _map[_key] = { k: _key, v: 202 }, _key = "Egrave", _map[_key] = { k: _key, v: 200 }, _key = "Euml", _map[_key] = { k: _key, v: 203 }, _key = "GT", _map[_key] = { k: _key, v: 62 }, _key = "Iacute", _map[_key] = { k: _key, v: 205 }, _key = "Icirc", _map[_key] = { k: _key, v: 206 }, _key = "Igrave", _map[_key] = { k: _key, v: 204 }, _key = "Iuml", _map[_key] = { k: _key, v: 207 }, _key = "LT", _map[_key] = { k: _key, v: 60 }, _key = "Ntilde", _map[_key] = { k: _key, v: 209 }, _key = "Oacute", _map[_key] = { k: _key, v: 211 }, _key = "Ocirc", _map[_key] = { k: _key, v: 212 }, _key = "Ograve", _map[_key] = { k: _key, v: 210 }, _key = "Oslash", _map[_key] = { k: _key, v: 216 }, _key = "Otilde", _map[_key] = { k: _key, v: 213 }, _key = "Ouml", _map[_key] = { k: _key, v: 214 }, _key = "QUOT", _map[_key] = { k: _key, v: 34 }, _key = "REG", _map[_key] = { k: _key, v: 174 }, _key = "THORN", _map[_key] = { k: _key, v: 222 }, _key = "Uacute", _map[_key] = { k: _key, v: 218 }, _key = "Ucirc", _map[_key] = { k: _key, v: 219 }, _key = "Ugrave", _map[_key] = { k: _key, v: 217 }, _key = "Uuml", _map[_key] = { k: _key, v: 220 }, _key = "Yacute", _map[_key] = { k: _key, v: 221 }, _key = "aacute", _map[_key] = { k: _key, v: 225 }, _key = "acirc", _map[_key] = { k: _key, v: 226 }, _key = "acute", _map[_key] = { k: _key, v: 180 }, _key = "aelig", _map[_key] = { k: _key, v: 230 }, _key = "agrave", _map[_key] = { k: _key, v: 224 }, _key = "amp", _map[_key] = { k: _key, v: 38 }, _key = "aring", _map[_key] = { k: _key, v: 229 }, _key = "atilde", _map[_key] = { k: _key, v: 227 }, _key = "auml", _map[_key] = { k: _key, v: 228 }, _key = "brvbar", _map[_key] = { k: _key, v: 166 }, _key = "ccedil", _map[_key] = { k: _key, v: 231 }, _key = "cedil", _map[_key] = { k: _key, v: 184 }, _key = "cent", _map[_key] = { k: _key, v: 162 }, _key = "copy", _map[_key] = { k: _key, v: 169 }, _key = "curren", _map[_key] = { k: _key, v: 164 }, _key = "deg", _map[_key] = { k: _key, v: 176 }, _key = "divide", _map[_key] = { k: _key, v: 247 }, _key = "eacute", _map[_key] = { k: _key, v: 233 }, _key = "ecirc", _map[_key] = { k: _key, v: 234 }, _key = "egrave", _map[_key] = { k: _key, v: 232 }, _key = "eth", _map[_key] = { k: _key, v: 240 }, _key = "euml", _map[_key] = { k: _key, v: 235 }, _key = "frac12", _map[_key] = { k: _key, v: 189 }, _key = "frac14", _map[_key] = { k: _key, v: 188 }, _key = "frac34", _map[_key] = { k: _key, v: 190 }, _key = "gt", _map[_key] = { k: _key, v: 62 }, _key = "iacute", _map[_key] = { k: _key, v: 237 }, _key = "icirc", _map[_key] = { k: _key, v: 238 }, _key = "iexcl", _map[_key] = { k: _key, v: 161 }, _key = "igrave", _map[_key] = { k: _key, v: 236 }, _key = "iquest", _map[_key] = { k: _key, v: 191 }, _key = "iuml", _map[_key] = { k: _key, v: 239 }, _key = "laquo", _map[_key] = { k: _key, v: 171 }, _key = "lt", _map[_key] = { k: _key, v: 60 }, _key = "macr", _map[_key] = { k: _key, v: 175 }, _key = "micro", _map[_key] = { k: _key, v: 181 }, _key = "middot", _map[_key] = { k: _key, v: 183 }, _key = "nbsp", _map[_key] = { k: _key, v: 160 }, _key = "not", _map[_key] = { k: _key, v: 172 }, _key = "ntilde", _map[_key] = { k: _key, v: 241 }, _key = "oacute", _map[_key] = { k: _key, v: 243 }, _key = "ocirc", _map[_key] = { k: _key, v: 244 }, _key = "ograve", _map[_key] = { k: _key, v: 242 }, _key = "ordf", _map[_key] = { k: _key, v: 170 }, _key = "ordm", _map[_key] = { k: _key, v: 186 }, _key = "oslash", _map[_key] = { k: _key, v: 248 }, _key = "otilde", _map[_key] = { k: _key, v: 245 }, _key = "ouml", _map[_key] = { k: _key, v: 246 }, _key = "para", _map[_key] = { k: _key, v: 182 }, _key = "plusmn", _map[_key] = { k: _key, v: 177 }, _key = "pound", _map[_key] = { k: _key, v: 163 }, _key = "quot", _map[_key] = { k: _key, v: 34 }, _key = "raquo", _map[_key] = { k: _key, v: 187 }, _key = "reg", _map[_key] = { k: _key, v: 174 }, _key = "sect", _map[_key] = { k: _key, v: 167 }, _key = "shy", _map[_key] = { k: _key, v: 173 }, _key = "sup1", _map[_key] = { k: _key, v: 185 }, _key = "sup2", _map[_key] = { k: _key, v: 178 }, _key = "sup3", _map[_key] = { k: _key, v: 179 }, _key = "szlig", _map[_key] = { k: _key, v: 223 }, _key = "thorn", _map[_key] = { k: _key, v: 254 }, _key = "times", _map[_key] = { k: _key, v: 215 }, _key = "uacute", _map[_key] = { k: _key, v: 250 }, _key = "ucirc", _map[_key] = { k: _key, v: 251 }, _key = "ugrave", _map[_key] = { k: _key, v: 249 }, _key = "uml", _map[_key] = { k: _key, v: 168 }, _key = "uuml", _map[_key] = { k: _key, v: 252 }, _key = "yacute", _map[_key] = { k: _key, v: 253 }, _key = "yen", _map[_key] = { k: _key, v: 165 }, _key = "yuml", _map[_key] = { k: _key, v: 255 }, _map);
		entity2 = (_map$1 = new $Map(), _key$1 = "NotEqualTilde;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8770, 824]) }, _key$1 = "NotGreaterFullEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8807, 824]) }, _key$1 = "NotGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8811, 824]) }, _key$1 = "NotGreaterSlantEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10878, 824]) }, _key$1 = "NotHumpDownHump;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8782, 824]) }, _key$1 = "NotHumpEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8783, 824]) }, _key$1 = "NotLeftTriangleBar;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10703, 824]) }, _key$1 = "NotLessLess;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8810, 824]) }, _key$1 = "NotLessSlantEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10877, 824]) }, _key$1 = "NotNestedGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10914, 824]) }, _key$1 = "NotNestedLessLess;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10913, 824]) }, _key$1 = "NotPrecedesEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10927, 824]) }, _key$1 = "NotRightTriangleBar;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10704, 824]) }, _key$1 = "NotSquareSubset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8847, 824]) }, _key$1 = "NotSquareSuperset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8848, 824]) }, _key$1 = "NotSubset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8834, 8402]) }, _key$1 = "NotSucceedsEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10928, 824]) }, _key$1 = "NotSucceedsTilde;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8831, 824]) }, _key$1 = "NotSuperset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8835, 8402]) }, _key$1 = "ThickSpace;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8287, 8202]) }, _key$1 = "acE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8766, 819]) }, _key$1 = "bne;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [61, 8421]) }, _key$1 = "bnequiv;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8801, 8421]) }, _key$1 = "caps;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8745, 65024]) }, _key$1 = "cups;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8746, 65024]) }, _key$1 = "fjlig;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [102, 106]) }, _key$1 = "gesl;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8923, 65024]) }, _key$1 = "gvertneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8809, 65024]) }, _key$1 = "gvnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8809, 65024]) }, _key$1 = "lates;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10925, 65024]) }, _key$1 = "lesg;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8922, 65024]) }, _key$1 = "lvertneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8808, 65024]) }, _key$1 = "lvnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8808, 65024]) }, _key$1 = "nGg;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8921, 824]) }, _key$1 = "nGtv;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8811, 824]) }, _key$1 = "nLl;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8920, 824]) }, _key$1 = "nLtv;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8810, 824]) }, _key$1 = "nang;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8736, 8402]) }, _key$1 = "napE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10864, 824]) }, _key$1 = "napid;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8779, 824]) }, _key$1 = "nbump;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8782, 824]) }, _key$1 = "nbumpe;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8783, 824]) }, _key$1 = "ncongdot;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10861, 824]) }, _key$1 = "nedot;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8784, 824]) }, _key$1 = "nesim;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8770, 824]) }, _key$1 = "ngE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8807, 824]) }, _key$1 = "ngeqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8807, 824]) }, _key$1 = "ngeqslant;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10878, 824]) }, _key$1 = "nges;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10878, 824]) }, _key$1 = "nlE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8806, 824]) }, _key$1 = "nleqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8806, 824]) }, _key$1 = "nleqslant;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10877, 824]) }, _key$1 = "nles;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10877, 824]) }, _key$1 = "notinE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8953, 824]) }, _key$1 = "notindot;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8949, 824]) }, _key$1 = "nparsl;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [11005, 8421]) }, _key$1 = "npart;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8706, 824]) }, _key$1 = "npre;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10927, 824]) }, _key$1 = "npreceq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10927, 824]) }, _key$1 = "nrarrc;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10547, 824]) }, _key$1 = "nrarrw;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8605, 824]) }, _key$1 = "nsce;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10928, 824]) }, _key$1 = "nsubE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10949, 824]) }, _key$1 = "nsubset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8834, 8402]) }, _key$1 = "nsubseteqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10949, 824]) }, _key$1 = "nsucceq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10928, 824]) }, _key$1 = "nsupE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10950, 824]) }, _key$1 = "nsupset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8835, 8402]) }, _key$1 = "nsupseteqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10950, 824]) }, _key$1 = "nvap;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8781, 8402]) }, _key$1 = "nvge;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8805, 8402]) }, _key$1 = "nvgt;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [62, 8402]) }, _key$1 = "nvle;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8804, 8402]) }, _key$1 = "nvlt;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [60, 8402]) }, _key$1 = "nvltrie;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8884, 8402]) }, _key$1 = "nvrtrie;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8885, 8402]) }, _key$1 = "nvsim;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8764, 8402]) }, _key$1 = "race;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8765, 817]) }, _key$1 = "smtes;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10924, 65024]) }, _key$1 = "sqcaps;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8851, 65024]) }, _key$1 = "sqcups;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8852, 65024]) }, _key$1 = "varsubsetneq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8842, 65024]) }, _key$1 = "varsubsetneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10955, 65024]) }, _key$1 = "varsupsetneq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8843, 65024]) }, _key$1 = "varsupsetneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10956, 65024]) }, _key$1 = "vnsub;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8834, 8402]) }, _key$1 = "vnsup;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8835, 8402]) }, _key$1 = "vsubnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10955, 65024]) }, _key$1 = "vsubne;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8842, 65024]) }, _key$1 = "vsupnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10956, 65024]) }, _key$1 = "vsupne;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8843, 65024]) }, _map$1);
		replacementTable = $toNativeArray($kindInt32, [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376]);
		/* */ } return; } }; $init_html.$blocking = true; return $init_html;
	};
	return $pkg;
})();
$packages["github.com/albrow/vdom"] = (function() {
	var $pkg = {}, xml, fmt, html, io, reflect, IndexedByteReader, Tree, Node, Attr, Element, Text, Comment, ProcInst, Directive, sliceType, sliceType$1, sliceType$2, ptrType, sliceType$3, ptrType$1, ptrType$2, ptrType$3, sliceType$4, sliceType$5, ptrType$4, ptrType$5, sliceType$6, ptrType$6, ptrType$7, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, sliceType$15, sliceType$16, sliceType$17, sliceType$18, sliceType$19, sliceType$20, sliceType$21, sliceType$22, sliceType$23, sliceType$24, sliceType$25, sliceType$26, sliceType$27, sliceType$28, sliceType$29, sliceType$30, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, sliceType$31, ptrType$23, sliceType$32, ptrType$24, ptrType$25, sliceType$33, sliceType$34, sliceType$35, sliceType$36, ptrType$26, ptrType$27, sliceType$37, ptrType$28, ptrType$29, sliceType$38, ptrType$30, ptrType$31, sliceType$39, ptrType$32, ptrType$33, sliceType$40, ptrType$34, ptrType$35, NewIndexedByteReader, Parse, parseToken, parseName, wasAutoClosed, CompareNodes;
	xml = $packages["encoding/xml"];
	fmt = $packages["fmt"];
	html = $packages["html"];
	io = $packages["io"];
	reflect = $packages["reflect"];
	IndexedByteReader = $pkg.IndexedByteReader = $newType(0, $kindStruct, "vdom.IndexedByteReader", "IndexedByteReader", "github.com/albrow/vdom", function(buf_, off_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : sliceType.nil;
		this.off = off_ !== undefined ? off_ : 0;
	});
	Tree = $pkg.Tree = $newType(0, $kindStruct, "vdom.Tree", "Tree", "github.com/albrow/vdom", function(Roots_, reader_, src_) {
		this.$val = this;
		this.Roots = Roots_ !== undefined ? Roots_ : sliceType$2.nil;
		this.reader = reader_ !== undefined ? reader_ : ptrType.nil;
		this.src = src_ !== undefined ? src_ : sliceType$3.nil;
	});
	Node = $pkg.Node = $newType(8, $kindInterface, "vdom.Node", "Node", "github.com/albrow/vdom", null);
	Attr = $pkg.Attr = $newType(0, $kindStruct, "vdom.Attr", "Attr", "github.com/albrow/vdom", function(Name_, Value_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
	});
	Element = $pkg.Element = $newType(0, $kindStruct, "vdom.Element", "Element", "github.com/albrow/vdom", function(Name_, Attrs_, parent_, children_, tree_, srcStart_, srcEnd_, srcInnerStart_, srcInnerEnd_, autoClosed_, selector_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Attrs = Attrs_ !== undefined ? Attrs_ : sliceType$4.nil;
		this.parent = parent_ !== undefined ? parent_ : $ifaceNil;
		this.children = children_ !== undefined ? children_ : sliceType$5.nil;
		this.tree = tree_ !== undefined ? tree_ : ptrType$4.nil;
		this.srcStart = srcStart_ !== undefined ? srcStart_ : 0;
		this.srcEnd = srcEnd_ !== undefined ? srcEnd_ : 0;
		this.srcInnerStart = srcInnerStart_ !== undefined ? srcInnerStart_ : 0;
		this.srcInnerEnd = srcInnerEnd_ !== undefined ? srcInnerEnd_ : 0;
		this.autoClosed = autoClosed_ !== undefined ? autoClosed_ : false;
		this.selector = selector_ !== undefined ? selector_ : "";
	});
	Text = $pkg.Text = $newType(0, $kindStruct, "vdom.Text", "Text", "github.com/albrow/vdom", function(Value_, parent_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : sliceType$7.nil;
		this.parent = parent_ !== undefined ? parent_ : $ifaceNil;
	});
	Comment = $pkg.Comment = $newType(0, $kindStruct, "vdom.Comment", "Comment", "github.com/albrow/vdom", function(Value_, parent_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : sliceType$9.nil;
		this.parent = parent_ !== undefined ? parent_ : $ifaceNil;
	});
	ProcInst = $pkg.ProcInst = $newType(0, $kindStruct, "vdom.ProcInst", "ProcInst", "github.com/albrow/vdom", function(Target_, Inst_, parent_) {
		this.$val = this;
		this.Target = Target_ !== undefined ? Target_ : "";
		this.Inst = Inst_ !== undefined ? Inst_ : sliceType$11.nil;
		this.parent = parent_ !== undefined ? parent_ : $ifaceNil;
	});
	Directive = $pkg.Directive = $newType(0, $kindStruct, "vdom.Directive", "Directive", "github.com/albrow/vdom", function(Value_, parent_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : sliceType$12.nil;
		this.parent = parent_ !== undefined ? parent_ : $ifaceNil;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType(Node);
	ptrType = $ptrType(IndexedByteReader);
	sliceType$3 = $sliceType($Uint8);
	ptrType$1 = $ptrType(Element);
	ptrType$2 = $ptrType(Tree);
	ptrType$3 = $ptrType(Element);
	sliceType$4 = $sliceType(Attr);
	sliceType$5 = $sliceType(Node);
	ptrType$4 = $ptrType(Tree);
	ptrType$5 = $ptrType(Element);
	sliceType$6 = $sliceType($emptyInterface);
	ptrType$6 = $ptrType(Element);
	ptrType$7 = $ptrType(Element);
	sliceType$7 = $sliceType($Uint8);
	sliceType$8 = $sliceType($Uint8);
	sliceType$9 = $sliceType($Uint8);
	sliceType$10 = $sliceType($Uint8);
	sliceType$11 = $sliceType($Uint8);
	sliceType$12 = $sliceType($Uint8);
	sliceType$13 = $sliceType($Uint8);
	sliceType$14 = $sliceType($Uint8);
	sliceType$15 = $sliceType($Uint8);
	sliceType$16 = $sliceType($Uint8);
	sliceType$17 = $sliceType($Uint8);
	sliceType$18 = $sliceType($Uint8);
	sliceType$19 = $sliceType($Uint8);
	sliceType$20 = $sliceType(Node);
	sliceType$21 = $sliceType(Node);
	sliceType$22 = $sliceType($Uint8);
	sliceType$23 = $sliceType($Uint8);
	sliceType$24 = $sliceType(Node);
	sliceType$25 = $sliceType($Uint8);
	sliceType$26 = $sliceType($Uint8);
	sliceType$27 = $sliceType($Uint8);
	sliceType$28 = $sliceType(Node);
	sliceType$29 = $sliceType($Uint8);
	sliceType$30 = $sliceType($Uint8);
	ptrType$8 = $ptrType(Element);
	ptrType$9 = $ptrType(Text);
	ptrType$10 = $ptrType(Comment);
	ptrType$11 = $ptrType(ProcInst);
	ptrType$12 = $ptrType(Directive);
	ptrType$13 = $ptrType(Element);
	ptrType$14 = $ptrType(Element);
	ptrType$15 = $ptrType(Text);
	ptrType$16 = $ptrType(Text);
	ptrType$17 = $ptrType(Comment);
	ptrType$18 = $ptrType(Comment);
	ptrType$19 = $ptrType(ProcInst);
	ptrType$20 = $ptrType(ProcInst);
	ptrType$21 = $ptrType(Directive);
	ptrType$22 = $ptrType(Directive);
	sliceType$31 = $sliceType($Uint8);
	ptrType$23 = $ptrType(IndexedByteReader);
	sliceType$32 = $sliceType($Uint8);
	ptrType$24 = $ptrType(Tree);
	ptrType$25 = $ptrType(Tree);
	sliceType$33 = $sliceType(Node);
	sliceType$34 = $sliceType($Uint8);
	sliceType$35 = $sliceType(Node);
	sliceType$36 = $sliceType($Uint8);
	ptrType$26 = $ptrType(Element);
	ptrType$27 = $ptrType(Element);
	sliceType$37 = $sliceType($Uint8);
	ptrType$28 = $ptrType(Text);
	ptrType$29 = $ptrType(Text);
	sliceType$38 = $sliceType($Uint8);
	ptrType$30 = $ptrType(Comment);
	ptrType$31 = $ptrType(Comment);
	sliceType$39 = $sliceType($Uint8);
	ptrType$32 = $ptrType(ProcInst);
	ptrType$33 = $ptrType(ProcInst);
	sliceType$40 = $sliceType($Uint8);
	ptrType$34 = $ptrType(Directive);
	ptrType$35 = $ptrType(Directive);
	NewIndexedByteReader = $pkg.NewIndexedByteReader = function(buf) {
		var buf;
		return new IndexedByteReader.ptr(buf, 0);
	};
	IndexedByteReader.ptr.prototype.Read = function(p) {
		var n, p, r;
		r = this;
		n = $copySlice(p, $subslice(r.buf, r.off));
		r.off = r.off + (n) >> 0;
		return [n, $ifaceNil];
	};
	IndexedByteReader.prototype.Read = function(p) { return this.$val.Read(p); };
	IndexedByteReader.ptr.prototype.ReadByte = function() {
		var c, r, x, x$1;
		r = this;
		if (r.off >= r.buf.$length) {
			return [0, io.EOF];
		}
		c = (x = r.buf, x$1 = r.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		r.off = r.off + (1) >> 0;
		return [c, $ifaceNil];
	};
	IndexedByteReader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	IndexedByteReader.ptr.prototype.Offset = function() {
		var r;
		r = this;
		return r.off;
	};
	IndexedByteReader.prototype.Offset = function() { return this.$val.Offset(); };
	IndexedByteReader.ptr.prototype.BackwardsSearch = function(min, max, b) {
		var b, j, max, min, r, x;
		r = this;
		if (min >= r.buf.$length || min < 0) {
			return [-1, fmt.Errorf("Error in BackwardsSearch min %d is out of bounds. r has buf of length %d", new sliceType$1([new $Int(min), new $Int(r.buf.$length)]))];
		}
		if (max >= r.buf.$length || max < min) {
			return [-1, fmt.Errorf("Error in BackwardsSearch max %d is out of bounds. r has buf of length %d and min was %d", new sliceType$1([new $Int(min), new $Int(r.buf.$length), new $Int(min)]))];
		}
		j = max;
		while (true) {
			if (!(j >= min)) { break; }
			if ((x = r.buf, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j])) === b) {
				return [j, $ifaceNil];
			}
			j = j - (1) >> 0;
		}
		return [-1, $ifaceNil];
	};
	IndexedByteReader.prototype.BackwardsSearch = function(min, max, b) { return this.$val.BackwardsSearch(min, max, b); };
	Parse = $pkg.Parse = function(src) {
		var _tuple, _tuple$1, _tuple$2, currentParent, dec, err, err$1, nextParent, r, src, token, tree;
		r = NewIndexedByteReader(src);
		dec = xml.NewDecoder(r);
		dec.Entity = xml.HTMLEntity;
		dec.Strict = false;
		dec.AutoClose = xml.HTMLAutoClose;
		tree = new Tree.ptr(sliceType$2.nil, r, src);
		currentParent = ptrType$1.nil;
		_tuple = dec.Token(); token = _tuple[0]; err = _tuple[1];
		while (true) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					break;
				} else {
					return [ptrType$2.nil, err];
				}
			}
			_tuple$1 = parseToken(tree, token, currentParent); nextParent = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$2.nil, err$1];
			} else {
				currentParent = nextParent;
			}
			_tuple$2 = dec.Token(); token = _tuple$2[0]; err = _tuple$2[1];
		}
		return [tree, $ifaceNil];
	};
	parseToken = function(tree, token, currentParent) {
		var _i, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, attr, charData, closingTagLength, comment, currentParent, dir, el, endEl, err = $ifaceNil, err$1, nextParent = ptrType$3.nil, ok, parentParent, proc, resultingNode, start, startEl, subSelector, text, token, tree, x, x$1, x$2, xmlComment, xmlDir, xmlProcInst;
		resultingNode = $ifaceNil;
		_ref = token;
		if ($assertType(_ref, xml.StartElement, true)[1]) {
			startEl = $clone($assertType(token, xml.StartElement), xml.StartElement);
			el = new Element.ptr(parseName(startEl.Name), sliceType$4.nil, $ifaceNil, sliceType$5.nil, tree, 0, 0, 0, 0, false, "");
			_ref$1 = startEl.Attr;
			_i = 0;
			while (true) {
				if (!(_i < _ref$1.$length)) { break; }
				attr = $clone(((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), xml.Attr);
				el.Attrs = $append(el.Attrs, new Attr.ptr(parseName(attr.Name), attr.Value));
				_i++;
			}
			if (!(currentParent === ptrType$5.nil)) {
				el.parent = currentParent;
				currentParent.children = $append(currentParent.children, el);
			}
			_tuple = tree.reader.BackwardsSearch(0, tree.reader.Offset() - 1 >> 0, 60); start = _tuple[0]; err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = ptrType$3.nil; _tmp$1 = err$1; nextParent = _tmp; err = _tmp$1;
				return [nextParent, err];
			}
			el.srcStart = start;
			el.srcInnerStart = tree.reader.Offset();
			if (currentParent === ptrType$5.nil) {
				el.selector = fmt.Sprintf(" > *:nth-child(%d)", new sliceType$6([new $Int((tree.Roots.$length + 1 >> 0))]));
			} else {
				subSelector = fmt.Sprintf(" > *:nth-child(%d)", new sliceType$6([new $Int(currentParent.children.$length)]));
				el.selector = currentParent.selector + subSelector;
			}
			nextParent = el;
			resultingNode = el;
		} else if ($assertType(_ref, xml.EndElement, true)[1]) {
			endEl = $clone($assertType(token, xml.EndElement), xml.EndElement);
			if (currentParent === ptrType$5.nil) {
				_tmp$2 = ptrType$3.nil; _tmp$3 = fmt.Errorf("XML was malformed: Found closing tag %s before a corresponding opening tag.", new sliceType$1([new $String(parseName(endEl.Name))])); nextParent = _tmp$2; err = _tmp$3;
				return [nextParent, err];
			} else if (!(currentParent.Name === parseName(endEl.Name))) {
				_tmp$4 = ptrType$3.nil; _tmp$5 = fmt.Errorf("XML was malformed: Found closing tag %s before the closing tag for %s", new sliceType$1([new $String(parseName(endEl.Name)), new $String(currentParent.Name)])); nextParent = _tmp$4; err = _tmp$5;
				return [nextParent, err];
			}
			if (wasAutoClosed(tree, currentParent.Name)) {
				currentParent.autoClosed = true;
			} else {
				currentParent.srcEnd = tree.reader.Offset();
				closingTagLength = currentParent.Name.length + 3 >> 0;
				currentParent.srcInnerEnd = tree.reader.Offset() - closingTagLength >> 0;
			}
			parentParent = ptrType$6.nil;
			if (!($interfaceIsEqual(currentParent.parent, $ifaceNil))) {
				ok = false;
				_tuple$1 = $assertType(currentParent.parent, ptrType$7, true); parentParent = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					_tmp$6 = ptrType$3.nil; _tmp$7 = fmt.Errorf("Expected parent to be type *Element, but got type %T", new sliceType$1([currentParent.parent])); nextParent = _tmp$6; err = _tmp$7;
					return [nextParent, err];
				}
			}
			nextParent = parentParent;
		} else if ($assertType(_ref, xml.CharData, true)[1]) {
			charData = $assertType(token, xml.CharData);
			text = new Text.ptr((x = charData.Copy(), $subslice(new sliceType$8(x.$array), x.$offset, x.$offset + x.$length)), $ifaceNil);
			if (!(currentParent === ptrType$5.nil)) {
				text.parent = currentParent;
				currentParent.children = $append(currentParent.children, text);
			}
			resultingNode = text;
			nextParent = currentParent;
		} else if ($assertType(_ref, xml.Comment, true)[1]) {
			xmlComment = $assertType(token, xml.Comment);
			comment = new Comment.ptr((x$1 = xmlComment.Copy(), $subslice(new sliceType$10(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $ifaceNil);
			if (!(currentParent === ptrType$5.nil)) {
				comment.parent = currentParent;
				currentParent.children = $append(currentParent.children, comment);
			}
			resultingNode = comment;
			nextParent = currentParent;
		} else if ($assertType(_ref, xml.ProcInst, true)[1]) {
			xmlProcInst = $clone($assertType(token, xml.ProcInst), xml.ProcInst);
			proc = new ProcInst.ptr(xmlProcInst.Target, xmlProcInst.Inst, $ifaceNil);
			if (!(currentParent === ptrType$5.nil)) {
				proc.parent = currentParent;
				currentParent.children = $append(currentParent.children, proc);
			}
			resultingNode = proc;
			nextParent = currentParent;
		} else if ($assertType(_ref, xml.Directive, true)[1]) {
			xmlDir = $assertType(token, xml.Directive);
			dir = new Directive.ptr((x$2 = xmlDir.Copy(), $subslice(new sliceType$13(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), $ifaceNil);
			if (!(currentParent === ptrType$5.nil)) {
				dir.parent = currentParent;
				currentParent.children = $append(currentParent.children, dir);
			}
			resultingNode = dir;
			nextParent = currentParent;
		}
		if (!($interfaceIsEqual(resultingNode, $ifaceNil)) && currentParent === ptrType$5.nil) {
			tree.Roots = $append(tree.Roots, resultingNode);
		}
		_tmp$8 = nextParent; _tmp$9 = $ifaceNil; nextParent = _tmp$8; err = _tmp$9;
		return [nextParent, err];
	};
	parseName = function(name) {
		var name;
		name = $clone(name, xml.Name);
		if (!(name.Space === "")) {
			return fmt.Sprintf("%s:%s", new sliceType$6([new $String(name.Space), new $String(name.Local)]));
		}
		return name.Local;
	};
	wasAutoClosed = function(tree, tagName) {
		var closingTag, start, stop, tagName, tree;
		closingTag = fmt.Sprintf("</%s>", new sliceType$6([new $String(tagName)]));
		stop = tree.reader.Offset();
		start = stop - closingTag.length >> 0;
		if (start < 0) {
			return true;
		}
		return !($bytesToString($subslice(tree.reader.buf, start, stop)) === closingTag);
	};
	Tree.ptr.prototype.HTML = function() {
		var escaped, t;
		t = this;
		escaped = $bytesToString(t.src);
		return new sliceType$14($stringToBytes(html.UnescapeString(escaped)));
	};
	Tree.prototype.HTML = function() { return this.$val.HTML(); };
	Element.ptr.prototype.Parent = function() {
		var e;
		e = this;
		return e.parent;
	};
	Element.prototype.Parent = function() { return this.$val.Parent(); };
	Element.ptr.prototype.Children = function() {
		var e;
		e = this;
		return e.children;
	};
	Element.prototype.Children = function() { return this.$val.Children(); };
	Element.ptr.prototype.HTML = function() {
		var _i, _ref, attr, e, escaped, result;
		e = this;
		if (e.autoClosed) {
			result = new sliceType$15($stringToBytes(fmt.Sprintf("<%s", new sliceType$6([new $String(e.Name)]))));
			_ref = e.Attrs;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
				result = $appendSlice(result, new sliceType$16($stringToBytes(fmt.Sprintf(" %s=\"%s\"", new sliceType$6([new $String(attr.Name), new $String(attr.Value)])))));
				_i++;
			}
			result = $append(result, 62);
			return result;
		} else {
			escaped = $bytesToString($subslice(e.tree.src, e.srcStart, e.srcEnd));
			return new sliceType$17($stringToBytes(html.UnescapeString(escaped)));
		}
	};
	Element.prototype.HTML = function() { return this.$val.HTML(); };
	Element.ptr.prototype.InnerHTML = function() {
		var e, escaped;
		e = this;
		if (e.autoClosed) {
			return sliceType$18.nil;
		} else {
			escaped = $bytesToString($subslice(e.tree.src, e.srcInnerStart, e.srcInnerEnd));
			return new sliceType$19($stringToBytes(html.UnescapeString(escaped)));
		}
	};
	Element.prototype.InnerHTML = function() { return this.$val.InnerHTML(); };
	Element.ptr.prototype.PartialSelector = function() {
		var e;
		e = this;
		return e.selector;
	};
	Element.prototype.PartialSelector = function() { return this.$val.PartialSelector(); };
	Element.ptr.prototype.Compare = function(other) {
		var _i, _ref, attr, attrs, e, i, other, otherAttr, otherAttrs;
		e = this;
		if (!(e.Name === other.Name)) {
			return [false, fmt.Sprintf("e.Name was %s but other.Name was %s", new sliceType$6([new $String(e.Name), new $String(other.Name)]))];
		}
		attrs = e.Attrs;
		otherAttrs = other.Attrs;
		if (!((attrs.$length === otherAttrs.$length))) {
			return [false, fmt.Sprintf("n has %d attrs but other has %d attrs.", new sliceType$6([new $Int(attrs.$length), new $Int(otherAttrs.$length)]))];
		}
		_ref = attrs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			attr = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Attr);
			otherAttr = $clone(((i < 0 || i >= otherAttrs.$length) ? $throwRuntimeError("index out of range") : otherAttrs.$array[otherAttrs.$offset + i]), Attr);
			if (!($equal(attr, otherAttr, Attr))) {
				return [false, fmt.Sprintf("e.Attrs[%d] was %s but other.Attrs[%d] was %s", new sliceType$6([new $Int(i), new attr.constructor.elem(attr), new $Int(i), new otherAttr.constructor.elem(otherAttr)]))];
			}
			_i++;
		}
		return [true, ""];
	};
	Element.prototype.Compare = function(other) { return this.$val.Compare(other); };
	Text.ptr.prototype.Parent = function() {
		var t;
		t = this;
		return t.parent;
	};
	Text.prototype.Parent = function() { return this.$val.Parent(); };
	Text.ptr.prototype.Children = function() {
		var t;
		t = this;
		return sliceType$20.nil;
	};
	Text.prototype.Children = function() { return this.$val.Children(); };
	Text.ptr.prototype.HTML = function() {
		var t;
		t = this;
		return t.Value;
	};
	Text.prototype.HTML = function() { return this.$val.HTML(); };
	Text.ptr.prototype.Compare = function(other) {
		var other, t;
		t = this;
		if (!($bytesToString(t.Value) === $bytesToString(other.Value))) {
			return [false, fmt.Sprintf("t.Value was %s but other.Value was %s", new sliceType$6([new $String($bytesToString(t.Value)), new $String($bytesToString(other.Value))]))];
		}
		return [true, ""];
	};
	Text.prototype.Compare = function(other) { return this.$val.Compare(other); };
	Comment.ptr.prototype.Parent = function() {
		var c;
		c = this;
		return c.parent;
	};
	Comment.prototype.Parent = function() { return this.$val.Parent(); };
	Comment.ptr.prototype.Children = function() {
		var c;
		c = this;
		return sliceType$21.nil;
	};
	Comment.prototype.Children = function() { return this.$val.Children(); };
	Comment.ptr.prototype.HTML = function() {
		var c, result;
		c = this;
		result = new sliceType$22($stringToBytes("<!--"));
		result = $appendSlice(result, c.Value);
		result = $appendSlice(result, new sliceType$23($stringToBytes("-->")));
		return result;
	};
	Comment.prototype.HTML = function() { return this.$val.HTML(); };
	Comment.ptr.prototype.Compare = function(other) {
		var c, other;
		c = this;
		if (!($bytesToString(c.Value) === $bytesToString(other.Value))) {
			return [false, fmt.Sprintf("c.Value was %s but other.Value was %s", new sliceType$6([new $String($bytesToString(c.Value)), new $String($bytesToString(other.Value))]))];
		}
		return [true, ""];
	};
	Comment.prototype.Compare = function(other) { return this.$val.Compare(other); };
	ProcInst.ptr.prototype.Parent = function() {
		var p;
		p = this;
		return p.parent;
	};
	ProcInst.prototype.Parent = function() { return this.$val.Parent(); };
	ProcInst.ptr.prototype.Children = function() {
		var p;
		p = this;
		return sliceType$24.nil;
	};
	ProcInst.prototype.Children = function() { return this.$val.Children(); };
	ProcInst.ptr.prototype.HTML = function() {
		var p, result;
		p = this;
		result = new sliceType$25($stringToBytes("<?"));
		result = $appendSlice(result, new sliceType$26($stringToBytes(p.Target)));
		result = $append(result, 32);
		result = $appendSlice(result, p.Inst);
		result = $appendSlice(result, new sliceType$27($stringToBytes("?>")));
		return result;
	};
	ProcInst.prototype.HTML = function() { return this.$val.HTML(); };
	ProcInst.ptr.prototype.Compare = function(other) {
		var other, p;
		p = this;
		if (!(p.Target === other.Target)) {
			return [false, fmt.Sprintf("p.Target was %s but other.Target was %s", new sliceType$6([new $String(p.Target), new $String(other.Target)]))];
		}
		if (!($bytesToString(p.Inst) === $bytesToString(other.Inst))) {
			return [false, fmt.Sprintf("p.Inst was %s but other.Inst was %s", new sliceType$6([new $String($bytesToString(p.Inst)), new $String($bytesToString(other.Inst))]))];
		}
		return [true, ""];
	};
	ProcInst.prototype.Compare = function(other) { return this.$val.Compare(other); };
	Directive.ptr.prototype.Parent = function() {
		var d;
		d = this;
		return d.parent;
	};
	Directive.prototype.Parent = function() { return this.$val.Parent(); };
	Directive.ptr.prototype.Children = function() {
		var d;
		d = this;
		return sliceType$28.nil;
	};
	Directive.prototype.Children = function() { return this.$val.Children(); };
	Directive.ptr.prototype.HTML = function() {
		var d, result;
		d = this;
		result = new sliceType$29($stringToBytes("<!"));
		result = $appendSlice(result, d.Value);
		result = $appendSlice(result, new sliceType$30($stringToBytes(">")));
		return result;
	};
	Directive.prototype.HTML = function() { return this.$val.HTML(); };
	Directive.ptr.prototype.Compare = function(other) {
		var d, other;
		d = this;
		if (!($bytesToString(d.Value) === $bytesToString(other.Value))) {
			return [false, fmt.Sprintf("d.Value was %s but other.Value was %s", new sliceType$6([new $String($bytesToString(d.Value)), new $String($bytesToString(other.Value))]))];
		}
		return [true, ""];
	};
	Directive.prototype.Compare = function(other) { return this.$val.Compare(other); };
	Tree.ptr.prototype.Compare = function(other) {
		var _i, _ref, _tuple, i, match, msg, other, otherRoot, root, t, x;
		t = this;
		if (!((t.Roots.$length === other.Roots.$length))) {
			return [false, fmt.Sprintf("t had %d roots but other had %d", new sliceType$6([new $Int(t.Roots.$length), new $Int(other.Roots.$length)]))];
		}
		_ref = t.Roots;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			root = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			otherRoot = (x = other.Roots, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			_tuple = CompareNodes(root, otherRoot); match = _tuple[0]; msg = _tuple[1];
			if (!match) {
				return [false, msg];
			}
			_i++;
		}
		return [true, ""];
	};
	Tree.prototype.Compare = function(other) { return this.$val.Compare(other); };
	CompareNodes = $pkg.CompareNodes = function(n, other) {
		var _i, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, child, children, comment, dir, el, i, match, match$1, match$2, match$3, match$4, match$5, msg, msg$1, msg$2, msg$3, msg$4, msg$5, n, other, otherChild, otherChildren, otherComment, otherDir, otherEl, otherProc, otherText, proc, text;
		if (!($interfaceIsEqual(reflect.TypeOf(n), reflect.TypeOf(other)))) {
			return [false, fmt.Sprintf("n has underlying type %T but the other node has underlying type %T", new sliceType$6([n, other]))];
		}
		_ref = n;
		if ($assertType(_ref, ptrType$8, true)[1]) {
			el = $assertType(n, ptrType$13);
			otherEl = $assertType(other, ptrType$14);
			_tuple = el.Compare(otherEl); match = _tuple[0]; msg = _tuple[1];
			if (!match) {
				return [false, msg];
			}
		} else if ($assertType(_ref, ptrType$9, true)[1]) {
			text = $assertType(n, ptrType$15);
			otherText = $assertType(other, ptrType$16);
			_tuple$1 = text.Compare(otherText); match$1 = _tuple$1[0]; msg$1 = _tuple$1[1];
			if (!match$1) {
				return [false, msg$1];
			}
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			comment = $assertType(n, ptrType$17);
			otherComment = $assertType(other, ptrType$18);
			_tuple$2 = comment.Compare(otherComment); match$2 = _tuple$2[0]; msg$2 = _tuple$2[1];
			if (!match$2) {
				return [false, msg$2];
			}
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			proc = $assertType(n, ptrType$19);
			otherProc = $assertType(other, ptrType$20);
			_tuple$3 = proc.Compare(otherProc); match$3 = _tuple$3[0]; msg$3 = _tuple$3[1];
			if (!match$3) {
				return [false, msg$3];
			}
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			dir = $assertType(n, ptrType$21);
			otherDir = $assertType(other, ptrType$22);
			_tuple$4 = dir.Compare(otherDir); match$4 = _tuple$4[0]; msg$4 = _tuple$4[1];
			if (!match$4) {
				return [false, msg$4];
			}
		} else {
			return [false, fmt.Sprintf("Don't know how to compare n of underlying type %T", new sliceType$6([n]))];
		}
		children = n.Children();
		otherChildren = other.Children();
		if (!((children.$length === otherChildren.$length))) {
			return [false, fmt.Sprintf("n has %d children but other has %d children.", new sliceType$6([new $Int(children.$length), new $Int(otherChildren.$length)]))];
		}
		_ref$1 = children;
		_i = 0;
		while (true) {
			if (!(_i < _ref$1.$length)) { break; }
			i = _i;
			child = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
			otherChild = ((i < 0 || i >= otherChildren.$length) ? $throwRuntimeError("index out of range") : otherChildren.$array[otherChildren.$offset + i]);
			_tuple$5 = CompareNodes(child, otherChild); match$5 = _tuple$5[0]; msg$5 = _tuple$5[1];
			if (!match$5) {
				return [false, msg$5];
			}
			_i++;
		}
		return [true, ""];
	};
	ptrType$23.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$31], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "Offset", name: "Offset", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BackwardsSearch", name: "BackwardsSearch", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$Int, $error], false)}];
	ptrType$25.methods = [{prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$32], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$24], [$Bool, $String], false)}];
	ptrType$27.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$35], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$36], false)}, {prop: "InnerHTML", name: "InnerHTML", pkg: "", typ: $funcType([], [sliceType$18], false)}, {prop: "PartialSelector", name: "PartialSelector", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$26], [$Bool, $String], false)}];
	ptrType$29.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$20], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$37], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$28], [$Bool, $String], false)}];
	ptrType$31.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$21], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$38], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$30], [$Bool, $String], false)}];
	ptrType$33.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$24], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$39], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$32], [$Bool, $String], false)}];
	ptrType$35.methods = [{prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Node], false)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$28], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$40], false)}, {prop: "Compare", name: "Compare", pkg: "", typ: $funcType([ptrType$34], [$Bool, $String], false)}];
	IndexedByteReader.init([{prop: "buf", name: "buf", pkg: "github.com/albrow/vdom", typ: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "github.com/albrow/vdom", typ: $Int, tag: ""}]);
	Tree.init([{prop: "Roots", name: "Roots", pkg: "", typ: sliceType$2, tag: ""}, {prop: "reader", name: "reader", pkg: "github.com/albrow/vdom", typ: ptrType, tag: ""}, {prop: "src", name: "src", pkg: "github.com/albrow/vdom", typ: sliceType$3, tag: ""}]);
	Node.init([{prop: "Children", name: "Children", pkg: "", typ: $funcType([], [sliceType$33], false)}, {prop: "HTML", name: "HTML", pkg: "", typ: $funcType([], [sliceType$34], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([], [Node], false)}]);
	Attr.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", typ: $String, tag: ""}]);
	Element.init([{prop: "Name", name: "Name", pkg: "", typ: $String, tag: ""}, {prop: "Attrs", name: "Attrs", pkg: "", typ: sliceType$4, tag: ""}, {prop: "parent", name: "parent", pkg: "github.com/albrow/vdom", typ: Node, tag: ""}, {prop: "children", name: "children", pkg: "github.com/albrow/vdom", typ: sliceType$5, tag: ""}, {prop: "tree", name: "tree", pkg: "github.com/albrow/vdom", typ: ptrType$4, tag: ""}, {prop: "srcStart", name: "srcStart", pkg: "github.com/albrow/vdom", typ: $Int, tag: ""}, {prop: "srcEnd", name: "srcEnd", pkg: "github.com/albrow/vdom", typ: $Int, tag: ""}, {prop: "srcInnerStart", name: "srcInnerStart", pkg: "github.com/albrow/vdom", typ: $Int, tag: ""}, {prop: "srcInnerEnd", name: "srcInnerEnd", pkg: "github.com/albrow/vdom", typ: $Int, tag: ""}, {prop: "autoClosed", name: "autoClosed", pkg: "github.com/albrow/vdom", typ: $Bool, tag: ""}, {prop: "selector", name: "selector", pkg: "github.com/albrow/vdom", typ: $String, tag: ""}]);
	Text.init([{prop: "Value", name: "Value", pkg: "", typ: sliceType$7, tag: ""}, {prop: "parent", name: "parent", pkg: "github.com/albrow/vdom", typ: Node, tag: ""}]);
	Comment.init([{prop: "Value", name: "Value", pkg: "", typ: sliceType$9, tag: ""}, {prop: "parent", name: "parent", pkg: "github.com/albrow/vdom", typ: Node, tag: ""}]);
	ProcInst.init([{prop: "Target", name: "Target", pkg: "", typ: $String, tag: ""}, {prop: "Inst", name: "Inst", pkg: "", typ: sliceType$11, tag: ""}, {prop: "parent", name: "parent", pkg: "github.com/albrow/vdom", typ: Node, tag: ""}]);
	Directive.init([{prop: "Value", name: "Value", pkg: "", typ: sliceType$12, tag: ""}, {prop: "parent", name: "parent", pkg: "github.com/albrow/vdom", typ: Node, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_vdom = function() { while (true) { switch ($s) { case 0:
		$r = xml.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = html.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_vdom.$blocking = true; return $init_vdom;
	};
	return $pkg;
})();
$packages["github.com/gopherjs/jquery"] = (function() {
	var $pkg = {}, js, JQuery, JQueryCoordinates, sliceType$1, sliceType$3, funcType$1, sliceType$6, sliceType$7, sliceType$8, sliceType$9, sliceType$10, sliceType$11, sliceType$12, sliceType$13, sliceType$14, mapType, sliceType$15, sliceType$16, funcType$2, sliceType$17, sliceType$18, funcType$3, sliceType$19, sliceType$20, sliceType$21, sliceType$22, funcType$4, sliceType$23, sliceType$24, sliceType$25, funcType$5, sliceType$26, sliceType$27, sliceType$28, sliceType$29, sliceType$30, sliceType$31, sliceType$32, sliceType$33, sliceType$34, sliceType$35, sliceType$36, sliceType$37, sliceType$38, sliceType$39, sliceType$40, funcType$6, sliceType$41, sliceType$42, sliceType$43, sliceType$44, sliceType$45, sliceType$46, sliceType$47, sliceType$48, sliceType$49, sliceType$50, ptrType, ptrType$1, sliceType$64, mapType$4, sliceType$65, sliceType$66, ptrType$2, ptrType$3, NewJQuery, ParseHTML;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	JQuery = $pkg.JQuery = $newType(0, $kindStruct, "jquery.JQuery", "JQuery", "github.com/gopherjs/jquery", function(o_, Jquery_, Selector_, Length_, Context_) {
		this.$val = this;
		this.o = o_ !== undefined ? o_ : null;
		this.Jquery = Jquery_ !== undefined ? Jquery_ : "";
		this.Selector = Selector_ !== undefined ? Selector_ : "";
		this.Length = Length_ !== undefined ? Length_ : 0;
		this.Context = Context_ !== undefined ? Context_ : "";
	});
	JQueryCoordinates = $pkg.JQueryCoordinates = $newType(0, $kindStruct, "jquery.JQueryCoordinates", "JQueryCoordinates", "github.com/gopherjs/jquery", function(Left_, Top_) {
		this.$val = this;
		this.Left = Left_ !== undefined ? Left_ : 0;
		this.Top = Top_ !== undefined ? Top_ : 0;
	});
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType($emptyInterface);
	funcType$1 = $funcType([$Int, $emptyInterface], [], false);
	sliceType$6 = $sliceType($emptyInterface);
	sliceType$7 = $sliceType($emptyInterface);
	sliceType$8 = $sliceType($emptyInterface);
	sliceType$9 = $sliceType($emptyInterface);
	sliceType$10 = $sliceType($emptyInterface);
	sliceType$11 = $sliceType($emptyInterface);
	sliceType$12 = $sliceType($emptyInterface);
	sliceType$13 = $sliceType($emptyInterface);
	sliceType$14 = $sliceType($emptyInterface);
	mapType = $mapType($String, $emptyInterface);
	sliceType$15 = $sliceType($String);
	sliceType$16 = $sliceType($emptyInterface);
	funcType$2 = $funcType([$Int, $String], [$String], false);
	sliceType$17 = $sliceType($emptyInterface);
	sliceType$18 = $sliceType($emptyInterface);
	funcType$3 = $funcType([$Int, $String], [$String], false);
	sliceType$19 = $sliceType($emptyInterface);
	sliceType$20 = $sliceType($emptyInterface);
	sliceType$21 = $sliceType($emptyInterface);
	sliceType$22 = $sliceType($emptyInterface);
	funcType$4 = $funcType([$Int, $String], [$String], false);
	sliceType$23 = $sliceType($emptyInterface);
	sliceType$24 = $sliceType($emptyInterface);
	sliceType$25 = $sliceType($emptyInterface);
	funcType$5 = $funcType([$Int, $String], [$String], false);
	sliceType$26 = $sliceType($emptyInterface);
	sliceType$27 = $sliceType($emptyInterface);
	sliceType$28 = $sliceType($emptyInterface);
	sliceType$29 = $sliceType($emptyInterface);
	sliceType$30 = $sliceType($emptyInterface);
	sliceType$31 = $sliceType($emptyInterface);
	sliceType$32 = $sliceType($emptyInterface);
	sliceType$33 = $sliceType($emptyInterface);
	sliceType$34 = $sliceType($emptyInterface);
	sliceType$35 = $sliceType($emptyInterface);
	sliceType$36 = $sliceType($emptyInterface);
	sliceType$37 = $sliceType($emptyInterface);
	sliceType$38 = $sliceType($emptyInterface);
	sliceType$39 = $sliceType($emptyInterface);
	sliceType$40 = $sliceType($emptyInterface);
	funcType$6 = $funcType([], [], false);
	sliceType$41 = $sliceType($emptyInterface);
	sliceType$42 = $sliceType($emptyInterface);
	sliceType$43 = $sliceType($emptyInterface);
	sliceType$44 = $sliceType($emptyInterface);
	sliceType$45 = $sliceType($emptyInterface);
	sliceType$46 = $sliceType($emptyInterface);
	sliceType$47 = $sliceType($emptyInterface);
	sliceType$48 = $sliceType($emptyInterface);
	sliceType$49 = $sliceType($emptyInterface);
	sliceType$50 = $sliceType($emptyInterface);
	ptrType = $ptrType(js.Object);
	ptrType$1 = $ptrType(js.Object);
	sliceType$64 = $sliceType($emptyInterface);
	mapType$4 = $mapType($String, $emptyInterface);
	sliceType$65 = $sliceType($Bool);
	sliceType$66 = $sliceType($Bool);
	ptrType$2 = $ptrType(js.Object);
	ptrType$3 = $ptrType(js.Object);
	NewJQuery = $pkg.NewJQuery = function(args) {
		var args;
		return new JQuery.ptr(new ($global.Function.prototype.bind.apply($global.jQuery, [undefined].concat($externalize(args, sliceType$1)))), "", "", 0, "");
	};
	ParseHTML = $pkg.ParseHTML = function(text) {
		var text;
		return $assertType($internalize($global.jQuery.parseHTML($externalize(text, $String)), $emptyInterface), sliceType$3);
	};
	JQuery.ptr.prototype.Each = function(fn) {
		var fn, j;
		j = $clone(this, JQuery);
		j.o = j.o.each($externalize(fn, funcType$1));
		return j;
	};
	JQuery.prototype.Each = function(fn) { return this.$val.Each(fn); };
	JQuery.ptr.prototype.Underlying = function() {
		var j;
		j = $clone(this, JQuery);
		return j.o;
	};
	JQuery.prototype.Underlying = function() { return this.$val.Underlying(); };
	JQuery.ptr.prototype.Get = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		return (obj = j.o, obj.get.apply(obj, $externalize(i, sliceType$6)));
	};
	JQuery.prototype.Get = function(i) { return this.$val.Get(i); };
	JQuery.ptr.prototype.Append = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.append.apply(obj, $externalize(i, sliceType$7)));
		return j;
	};
	JQuery.prototype.Append = function(i) { return this.$val.Append(i); };
	JQuery.ptr.prototype.Empty = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.empty();
		return j;
	};
	JQuery.prototype.Empty = function() { return this.$val.Empty(); };
	JQuery.ptr.prototype.Detach = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.detach.apply(obj, $externalize(i, sliceType$8)));
		return j;
	};
	JQuery.prototype.Detach = function(i) { return this.$val.Detach(i); };
	JQuery.ptr.prototype.Eq = function(idx) {
		var idx, j;
		j = $clone(this, JQuery);
		j.o = j.o.eq(idx);
		return j;
	};
	JQuery.prototype.Eq = function(idx) { return this.$val.Eq(idx); };
	JQuery.ptr.prototype.FadeIn = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeIn.apply(obj, $externalize(i, sliceType$9)));
		return j;
	};
	JQuery.prototype.FadeIn = function(i) { return this.$val.FadeIn(i); };
	JQuery.ptr.prototype.Delay = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.delay.apply(obj, $externalize(i, sliceType$10)));
		return j;
	};
	JQuery.prototype.Delay = function(i) { return this.$val.Delay(i); };
	JQuery.ptr.prototype.ToArray = function() {
		var j;
		j = $clone(this, JQuery);
		return $assertType($internalize(j.o.toArray(), $emptyInterface), sliceType$11);
	};
	JQuery.prototype.ToArray = function() { return this.$val.ToArray(); };
	JQuery.ptr.prototype.Remove = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.remove.apply(obj, $externalize(i, sliceType$12)));
		return j;
	};
	JQuery.prototype.Remove = function(i) { return this.$val.Remove(i); };
	JQuery.ptr.prototype.Stop = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.stop.apply(obj, $externalize(i, sliceType$13)));
		return j;
	};
	JQuery.prototype.Stop = function(i) { return this.$val.Stop(i); };
	JQuery.ptr.prototype.AddBack = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.addBack.apply(obj, $externalize(i, sliceType$14)));
		return j;
	};
	JQuery.prototype.AddBack = function(i) { return this.$val.AddBack(i); };
	JQuery.ptr.prototype.Css = function(name) {
		var j, name;
		j = $clone(this, JQuery);
		return $internalize(j.o.css($externalize(name, $String)), $String);
	};
	JQuery.prototype.Css = function(name) { return this.$val.Css(name); };
	JQuery.ptr.prototype.CssArray = function(arr) {
		var arr, j;
		j = $clone(this, JQuery);
		return $assertType($internalize(j.o.css($externalize(arr, sliceType$15)), $emptyInterface), mapType);
	};
	JQuery.prototype.CssArray = function(arr) { return this.$val.CssArray(arr); };
	JQuery.ptr.prototype.SetCss = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.css.apply(obj, $externalize(i, sliceType$16)));
		return j;
	};
	JQuery.prototype.SetCss = function(i) { return this.$val.SetCss(i); };
	JQuery.ptr.prototype.Text = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.text(), $String);
	};
	JQuery.prototype.Text = function() { return this.$val.Text(); };
	JQuery.ptr.prototype.SetText = function(i) {
		var _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetText Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.text($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetText = function(i) { return this.$val.SetText(i); };
	JQuery.ptr.prototype.Val = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.val(), $String);
	};
	JQuery.prototype.Val = function() { return this.$val.Val(); };
	JQuery.ptr.prototype.SetVal = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o.val($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetVal = function(i) { return this.$val.SetVal(i); };
	JQuery.ptr.prototype.Prop = function(property) {
		var j, property;
		j = $clone(this, JQuery);
		return $internalize(j.o.prop($externalize(property, $String)), $emptyInterface);
	};
	JQuery.prototype.Prop = function(property) { return this.$val.Prop(property); };
	JQuery.ptr.prototype.SetProp = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prop.apply(obj, $externalize(i, sliceType$17)));
		return j;
	};
	JQuery.prototype.SetProp = function(i) { return this.$val.SetProp(i); };
	JQuery.ptr.prototype.RemoveProp = function(property) {
		var j, property;
		j = $clone(this, JQuery);
		j.o = j.o.removeProp($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveProp = function(property) { return this.$val.RemoveProp(property); };
	JQuery.ptr.prototype.Attr = function(property) {
		var attr, j, property;
		j = $clone(this, JQuery);
		attr = j.o.attr($externalize(property, $String));
		if (attr === undefined) {
			return "";
		}
		return $internalize(attr, $String);
	};
	JQuery.prototype.Attr = function(property) { return this.$val.Attr(property); };
	JQuery.ptr.prototype.SetAttr = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.attr.apply(obj, $externalize(i, sliceType$18)));
		return j;
	};
	JQuery.prototype.SetAttr = function(i) { return this.$val.SetAttr(i); };
	JQuery.ptr.prototype.RemoveAttr = function(property) {
		var j, property;
		j = $clone(this, JQuery);
		j.o = j.o.removeAttr($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveAttr = function(property) { return this.$val.RemoveAttr(property); };
	JQuery.ptr.prototype.HasClass = function(class$1) {
		var class$1, j;
		j = $clone(this, JQuery);
		return !!(j.o.hasClass($externalize(class$1, $String)));
	};
	JQuery.prototype.HasClass = function(class$1) { return this.$val.HasClass(class$1); };
	JQuery.ptr.prototype.AddClass = function(i) {
		var _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$3, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("addClass Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.addClass($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.AddClass = function(i) { return this.$val.AddClass(i); };
	JQuery.ptr.prototype.RemoveClass = function(property) {
		var j, property;
		j = $clone(this, JQuery);
		j.o = j.o.removeClass($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveClass = function(property) { return this.$val.RemoveClass(property); };
	JQuery.ptr.prototype.ToggleClass = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.toggleClass.apply(obj, $externalize(i, sliceType$19)));
		return j;
	};
	JQuery.prototype.ToggleClass = function(i) { return this.$val.ToggleClass(i); };
	JQuery.ptr.prototype.Focus = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.focus();
		return j;
	};
	JQuery.prototype.Focus = function() { return this.$val.Focus(); };
	JQuery.ptr.prototype.Blur = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.blur();
		return j;
	};
	JQuery.prototype.Blur = function() { return this.$val.Blur(); };
	JQuery.ptr.prototype.ReplaceAll = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.replaceAll($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.ReplaceAll = function(i) { return this.$val.ReplaceAll(i); };
	JQuery.ptr.prototype.ReplaceWith = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.replaceWith($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.ReplaceWith = function(i) { return this.$val.ReplaceWith(i); };
	JQuery.ptr.prototype.After = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.after($externalize(i, sliceType$20));
		return j;
	};
	JQuery.prototype.After = function(i) { return this.$val.After(i); };
	JQuery.ptr.prototype.Before = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.before.apply(obj, $externalize(i, sliceType$21)));
		return j;
	};
	JQuery.prototype.Before = function(i) { return this.$val.Before(i); };
	JQuery.ptr.prototype.Prepend = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prepend.apply(obj, $externalize(i, sliceType$22)));
		return j;
	};
	JQuery.prototype.Prepend = function(i) { return this.$val.Prepend(i); };
	JQuery.ptr.prototype.PrependTo = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.prependTo($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.PrependTo = function(i) { return this.$val.PrependTo(i); };
	JQuery.ptr.prototype.AppendTo = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.appendTo($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.AppendTo = function(i) { return this.$val.AppendTo(i); };
	JQuery.ptr.prototype.InsertAfter = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.insertAfter($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.InsertAfter = function(i) { return this.$val.InsertAfter(i); };
	JQuery.ptr.prototype.InsertBefore = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.insertBefore($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.InsertBefore = function(i) { return this.$val.InsertBefore(i); };
	JQuery.ptr.prototype.Show = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.show();
		return j;
	};
	JQuery.prototype.Show = function() { return this.$val.Show(); };
	JQuery.ptr.prototype.Hide = function() {
		var j;
		j = $clone(this, JQuery);
		j.o.hide();
		return j;
	};
	JQuery.prototype.Hide = function() { return this.$val.Hide(); };
	JQuery.ptr.prototype.Toggle = function(showOrHide) {
		var j, showOrHide;
		j = $clone(this, JQuery);
		j.o = j.o.toggle($externalize(showOrHide, $Bool));
		return j;
	};
	JQuery.prototype.Toggle = function(showOrHide) { return this.$val.Toggle(showOrHide); };
	JQuery.ptr.prototype.Contents = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.contents();
		return j;
	};
	JQuery.prototype.Contents = function() { return this.$val.Contents(); };
	JQuery.ptr.prototype.Html = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.html(), $String);
	};
	JQuery.prototype.Html = function() { return this.$val.Html(); };
	JQuery.ptr.prototype.SetHtml = function(i) {
		var _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$4, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetHtml Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.html($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetHtml = function(i) { return this.$val.SetHtml(i); };
	JQuery.ptr.prototype.Closest = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.closest.apply(obj, $externalize(i, sliceType$23)));
		return j;
	};
	JQuery.prototype.Closest = function(i) { return this.$val.Closest(i); };
	JQuery.ptr.prototype.End = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.end();
		return j;
	};
	JQuery.prototype.End = function() { return this.$val.End(); };
	JQuery.ptr.prototype.Add = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.add.apply(obj, $externalize(i, sliceType$24)));
		return j;
	};
	JQuery.prototype.Add = function(i) { return this.$val.Add(i); };
	JQuery.ptr.prototype.Clone = function(b) {
		var b, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.clone.apply(obj, $externalize(b, sliceType$25)));
		return j;
	};
	JQuery.prototype.Clone = function(b) { return this.$val.Clone(b); };
	JQuery.ptr.prototype.Height = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.height()) >> 0;
	};
	JQuery.prototype.Height = function() { return this.$val.Height(); };
	JQuery.ptr.prototype.SetHeight = function(value) {
		var j, value;
		j = $clone(this, JQuery);
		j.o = j.o.height($externalize(value, $String));
		return j;
	};
	JQuery.prototype.SetHeight = function(value) { return this.$val.SetHeight(value); };
	JQuery.ptr.prototype.Width = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.width()) >> 0;
	};
	JQuery.prototype.Width = function() { return this.$val.Width(); };
	JQuery.ptr.prototype.SetWidth = function(i) {
		var _ref, i, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$5, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetWidth Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.width($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetWidth = function(i) { return this.$val.SetWidth(i); };
	JQuery.ptr.prototype.InnerHeight = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.innerHeight()) >> 0;
	};
	JQuery.prototype.InnerHeight = function() { return this.$val.InnerHeight(); };
	JQuery.ptr.prototype.InnerWidth = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.innerWidth()) >> 0;
	};
	JQuery.prototype.InnerWidth = function() { return this.$val.InnerWidth(); };
	JQuery.ptr.prototype.Offset = function() {
		var j, obj;
		j = $clone(this, JQuery);
		obj = j.o.offset();
		return new JQueryCoordinates.ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Offset = function() { return this.$val.Offset(); };
	JQuery.ptr.prototype.SetOffset = function(jc) {
		var j, jc;
		j = $clone(this, JQuery);
		jc = $clone(jc, JQueryCoordinates);
		j.o = j.o.offset($externalize(jc, JQueryCoordinates));
		return j;
	};
	JQuery.prototype.SetOffset = function(jc) { return this.$val.SetOffset(jc); };
	JQuery.ptr.prototype.OuterHeight = function(includeMargin) {
		var includeMargin, j;
		j = $clone(this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerHeight()) >> 0;
		}
		return $parseInt(j.o.outerHeight($externalize((0 >= includeMargin.$length ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterHeight = function(includeMargin) { return this.$val.OuterHeight(includeMargin); };
	JQuery.ptr.prototype.OuterWidth = function(includeMargin) {
		var includeMargin, j;
		j = $clone(this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerWidth()) >> 0;
		}
		return $parseInt(j.o.outerWidth($externalize((0 >= includeMargin.$length ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterWidth = function(includeMargin) { return this.$val.OuterWidth(includeMargin); };
	JQuery.ptr.prototype.Position = function() {
		var j, obj;
		j = $clone(this, JQuery);
		obj = j.o.position();
		return new JQueryCoordinates.ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Position = function() { return this.$val.Position(); };
	JQuery.ptr.prototype.ScrollLeft = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.scrollLeft()) >> 0;
	};
	JQuery.prototype.ScrollLeft = function() { return this.$val.ScrollLeft(); };
	JQuery.ptr.prototype.SetScrollLeft = function(value) {
		var j, value;
		j = $clone(this, JQuery);
		j.o = j.o.scrollLeft(value);
		return j;
	};
	JQuery.prototype.SetScrollLeft = function(value) { return this.$val.SetScrollLeft(value); };
	JQuery.ptr.prototype.ScrollTop = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.scrollTop()) >> 0;
	};
	JQuery.prototype.ScrollTop = function() { return this.$val.ScrollTop(); };
	JQuery.ptr.prototype.SetScrollTop = function(value) {
		var j, value;
		j = $clone(this, JQuery);
		j.o = j.o.scrollTop(value);
		return j;
	};
	JQuery.prototype.SetScrollTop = function(value) { return this.$val.SetScrollTop(value); };
	JQuery.ptr.prototype.ClearQueue = function(queueName) {
		var j, queueName;
		j = $clone(this, JQuery);
		j.o = j.o.clearQueue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.ClearQueue = function(queueName) { return this.$val.ClearQueue(queueName); };
	JQuery.ptr.prototype.SetData = function(key, value) {
		var j, key, value;
		j = $clone(this, JQuery);
		j.o = j.o.data($externalize(key, $String), $externalize(value, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetData = function(key, value) { return this.$val.SetData(key, value); };
	JQuery.ptr.prototype.Data = function(key) {
		var j, key, result;
		j = $clone(this, JQuery);
		result = j.o.data($externalize(key, $String));
		if (result === undefined) {
			return $ifaceNil;
		}
		return $internalize(result, $emptyInterface);
	};
	JQuery.prototype.Data = function(key) { return this.$val.Data(key); };
	JQuery.ptr.prototype.Dequeue = function(queueName) {
		var j, queueName;
		j = $clone(this, JQuery);
		j.o = j.o.dequeue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.Dequeue = function(queueName) { return this.$val.Dequeue(queueName); };
	JQuery.ptr.prototype.RemoveData = function(name) {
		var j, name;
		j = $clone(this, JQuery);
		j.o = j.o.removeData($externalize(name, $String));
		return j;
	};
	JQuery.prototype.RemoveData = function(name) { return this.$val.RemoveData(name); };
	JQuery.ptr.prototype.OffsetParent = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.offsetParent();
		return j;
	};
	JQuery.prototype.OffsetParent = function() { return this.$val.OffsetParent(); };
	JQuery.ptr.prototype.Parent = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parent.apply(obj, $externalize(i, sliceType$26)));
		return j;
	};
	JQuery.prototype.Parent = function(i) { return this.$val.Parent(i); };
	JQuery.ptr.prototype.Parents = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parents.apply(obj, $externalize(i, sliceType$27)));
		return j;
	};
	JQuery.prototype.Parents = function(i) { return this.$val.Parents(i); };
	JQuery.ptr.prototype.ParentsUntil = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parentsUntil.apply(obj, $externalize(i, sliceType$28)));
		return j;
	};
	JQuery.prototype.ParentsUntil = function(i) { return this.$val.ParentsUntil(i); };
	JQuery.ptr.prototype.Prev = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prev.apply(obj, $externalize(i, sliceType$29)));
		return j;
	};
	JQuery.prototype.Prev = function(i) { return this.$val.Prev(i); };
	JQuery.ptr.prototype.PrevAll = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prevAll.apply(obj, $externalize(i, sliceType$30)));
		return j;
	};
	JQuery.prototype.PrevAll = function(i) { return this.$val.PrevAll(i); };
	JQuery.ptr.prototype.PrevUntil = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prevUntil.apply(obj, $externalize(i, sliceType$31)));
		return j;
	};
	JQuery.prototype.PrevUntil = function(i) { return this.$val.PrevUntil(i); };
	JQuery.ptr.prototype.Siblings = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.siblings.apply(obj, $externalize(i, sliceType$32)));
		return j;
	};
	JQuery.prototype.Siblings = function(i) { return this.$val.Siblings(i); };
	JQuery.ptr.prototype.Slice = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.slice.apply(obj, $externalize(i, sliceType$33)));
		return j;
	};
	JQuery.prototype.Slice = function(i) { return this.$val.Slice(i); };
	JQuery.ptr.prototype.Children = function(selector) {
		var j, selector;
		j = $clone(this, JQuery);
		j.o = j.o.children($externalize(selector, $emptyInterface));
		return j;
	};
	JQuery.prototype.Children = function(selector) { return this.$val.Children(selector); };
	JQuery.ptr.prototype.Unwrap = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.unwrap();
		return j;
	};
	JQuery.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	JQuery.ptr.prototype.Wrap = function(obj) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = j.o.wrap($externalize(obj, $emptyInterface));
		return j;
	};
	JQuery.prototype.Wrap = function(obj) { return this.$val.Wrap(obj); };
	JQuery.ptr.prototype.WrapAll = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.wrapAll($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.WrapAll = function(i) { return this.$val.WrapAll(i); };
	JQuery.ptr.prototype.WrapInner = function(i) {
		var i, j;
		j = $clone(this, JQuery);
		j.o = j.o.wrapInner($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.WrapInner = function(i) { return this.$val.WrapInner(i); };
	JQuery.ptr.prototype.Next = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.next.apply(obj, $externalize(i, sliceType$34)));
		return j;
	};
	JQuery.prototype.Next = function(i) { return this.$val.Next(i); };
	JQuery.ptr.prototype.NextAll = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.nextAll.apply(obj, $externalize(i, sliceType$35)));
		return j;
	};
	JQuery.prototype.NextAll = function(i) { return this.$val.NextAll(i); };
	JQuery.ptr.prototype.NextUntil = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.nextUntil.apply(obj, $externalize(i, sliceType$36)));
		return j;
	};
	JQuery.prototype.NextUntil = function(i) { return this.$val.NextUntil(i); };
	JQuery.ptr.prototype.Not = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.not.apply(obj, $externalize(i, sliceType$37)));
		return j;
	};
	JQuery.prototype.Not = function(i) { return this.$val.Not(i); };
	JQuery.ptr.prototype.Filter = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.filter.apply(obj, $externalize(i, sliceType$38)));
		return j;
	};
	JQuery.prototype.Filter = function(i) { return this.$val.Filter(i); };
	JQuery.ptr.prototype.Find = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.find.apply(obj, $externalize(i, sliceType$39)));
		return j;
	};
	JQuery.prototype.Find = function(i) { return this.$val.Find(i); };
	JQuery.ptr.prototype.First = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.first();
		return j;
	};
	JQuery.prototype.First = function() { return this.$val.First(); };
	JQuery.ptr.prototype.Has = function(selector) {
		var j, selector;
		j = $clone(this, JQuery);
		j.o = j.o.has($externalize(selector, $String));
		return j;
	};
	JQuery.prototype.Has = function(selector) { return this.$val.Has(selector); };
	JQuery.ptr.prototype.Is = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		return !!((obj = j.o, obj.is.apply(obj, $externalize(i, sliceType$40))));
	};
	JQuery.prototype.Is = function(i) { return this.$val.Is(i); };
	JQuery.ptr.prototype.Last = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.last();
		return j;
	};
	JQuery.prototype.Last = function() { return this.$val.Last(); };
	JQuery.ptr.prototype.Ready = function(handler) {
		var handler, j;
		j = $clone(this, JQuery);
		j.o = j.o.ready($externalize(handler, funcType$6));
		return j;
	};
	JQuery.prototype.Ready = function(handler) { return this.$val.Ready(handler); };
	JQuery.ptr.prototype.Resize = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.resize.apply(obj, $externalize(i, sliceType$41)));
		return j;
	};
	JQuery.prototype.Resize = function(i) { return this.$val.Resize(i); };
	JQuery.ptr.prototype.Scroll = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.scroll.apply(obj, $externalize(i, sliceType$42)));
		return j;
	};
	JQuery.prototype.Scroll = function(i) { return this.$val.Scroll(i); };
	JQuery.ptr.prototype.FadeOut = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeOut.apply(obj, $externalize(i, sliceType$43)));
		return j;
	};
	JQuery.prototype.FadeOut = function(i) { return this.$val.FadeOut(i); };
	JQuery.ptr.prototype.Select = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.select.apply(obj, $externalize(i, sliceType$44)));
		return j;
	};
	JQuery.prototype.Select = function(i) { return this.$val.Select(i); };
	JQuery.ptr.prototype.Submit = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.submit.apply(obj, $externalize(i, sliceType$45)));
		return j;
	};
	JQuery.prototype.Submit = function(i) { return this.$val.Submit(i); };
	JQuery.ptr.prototype.Trigger = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.trigger.apply(obj, $externalize(i, sliceType$46)));
		return j;
	};
	JQuery.prototype.Trigger = function(i) { return this.$val.Trigger(i); };
	JQuery.ptr.prototype.On = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.on.apply(obj, $externalize(i, sliceType$47)));
		return j;
	};
	JQuery.prototype.On = function(i) { return this.$val.On(i); };
	JQuery.ptr.prototype.One = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.one.apply(obj, $externalize(i, sliceType$48)));
		return j;
	};
	JQuery.prototype.One = function(i) { return this.$val.One(i); };
	JQuery.ptr.prototype.Off = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.off.apply(obj, $externalize(i, sliceType$49)));
		return j;
	};
	JQuery.prototype.Off = function(i) { return this.$val.Off(i); };
	JQuery.ptr.prototype.Load = function(i) {
		var i, j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.load.apply(obj, $externalize(i, sliceType$50)));
		return j;
	};
	JQuery.prototype.Load = function(i) { return this.$val.Load(i); };
	JQuery.ptr.prototype.Serialize = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.serialize(), $String);
	};
	JQuery.prototype.Serialize = function() { return this.$val.Serialize(); };
	JQuery.ptr.prototype.SerializeArray = function() {
		var j;
		j = $clone(this, JQuery);
		return j.o.serializeArray();
	};
	JQuery.prototype.SerializeArray = function() { return this.$val.SerializeArray(); };
	JQuery.methods = [{prop: "Each", name: "Each", pkg: "", typ: $funcType([funcType$1], [JQuery], false)}, {prop: "Underlying", name: "Underlying", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Get", name: "Get", pkg: "", typ: $funcType([sliceType$6], [ptrType$1], true)}, {prop: "Append", name: "Append", pkg: "", typ: $funcType([sliceType$7], [JQuery], true)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([sliceType$8], [JQuery], true)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([$Int], [JQuery], false)}, {prop: "FadeIn", name: "FadeIn", pkg: "", typ: $funcType([sliceType$9], [JQuery], true)}, {prop: "Delay", name: "Delay", pkg: "", typ: $funcType([sliceType$10], [JQuery], true)}, {prop: "ToArray", name: "ToArray", pkg: "", typ: $funcType([], [sliceType$64], false)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([sliceType$12], [JQuery], true)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([sliceType$13], [JQuery], true)}, {prop: "AddBack", name: "AddBack", pkg: "", typ: $funcType([sliceType$14], [JQuery], true)}, {prop: "Css", name: "Css", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "CssArray", name: "CssArray", pkg: "", typ: $funcType([sliceType$15], [mapType$4], true)}, {prop: "SetCss", name: "SetCss", pkg: "", typ: $funcType([sliceType$16], [JQuery], true)}, {prop: "Text", name: "Text", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Val", name: "Val", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetVal", name: "SetVal", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Prop", name: "Prop", pkg: "", typ: $funcType([$String], [$emptyInterface], false)}, {prop: "SetProp", name: "SetProp", pkg: "", typ: $funcType([sliceType$17], [JQuery], true)}, {prop: "RemoveProp", name: "RemoveProp", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "Attr", name: "Attr", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "SetAttr", name: "SetAttr", pkg: "", typ: $funcType([sliceType$18], [JQuery], true)}, {prop: "RemoveAttr", name: "RemoveAttr", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "HasClass", name: "HasClass", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "AddClass", name: "AddClass", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "RemoveClass", name: "RemoveClass", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "ToggleClass", name: "ToggleClass", pkg: "", typ: $funcType([sliceType$19], [JQuery], true)}, {prop: "Focus", name: "Focus", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Blur", name: "Blur", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "ReplaceWith", name: "ReplaceWith", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([sliceType$20], [JQuery], true)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([sliceType$21], [JQuery], true)}, {prop: "Prepend", name: "Prepend", pkg: "", typ: $funcType([sliceType$22], [JQuery], true)}, {prop: "PrependTo", name: "PrependTo", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "AppendTo", name: "AppendTo", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "InsertAfter", name: "InsertAfter", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Show", name: "Show", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Hide", name: "Hide", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Toggle", name: "Toggle", pkg: "", typ: $funcType([$Bool], [JQuery], false)}, {prop: "Contents", name: "Contents", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Html", name: "Html", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SetHtml", name: "SetHtml", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Closest", name: "Closest", pkg: "", typ: $funcType([sliceType$23], [JQuery], true)}, {prop: "End", name: "End", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([sliceType$24], [JQuery], true)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([sliceType$25], [JQuery], true)}, {prop: "Height", name: "Height", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetHeight", name: "SetHeight", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetWidth", name: "SetWidth", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Offset", name: "Offset", pkg: "", typ: $funcType([], [JQueryCoordinates], false)}, {prop: "SetOffset", name: "SetOffset", pkg: "", typ: $funcType([JQueryCoordinates], [JQuery], false)}, {prop: "OuterHeight", name: "OuterHeight", pkg: "", typ: $funcType([sliceType$65], [$Int], true)}, {prop: "OuterWidth", name: "OuterWidth", pkg: "", typ: $funcType([sliceType$66], [$Int], true)}, {prop: "Position", name: "Position", pkg: "", typ: $funcType([], [JQueryCoordinates], false)}, {prop: "ScrollLeft", name: "ScrollLeft", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetScrollLeft", name: "SetScrollLeft", pkg: "", typ: $funcType([$Int], [JQuery], false)}, {prop: "ScrollTop", name: "ScrollTop", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetScrollTop", name: "SetScrollTop", pkg: "", typ: $funcType([$Int], [JQuery], false)}, {prop: "ClearQueue", name: "ClearQueue", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "SetData", name: "SetData", pkg: "", typ: $funcType([$String, $emptyInterface], [JQuery], false)}, {prop: "Data", name: "Data", pkg: "", typ: $funcType([$String], [$emptyInterface], false)}, {prop: "Dequeue", name: "Dequeue", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "RemoveData", name: "RemoveData", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "OffsetParent", name: "OffsetParent", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Parent", name: "Parent", pkg: "", typ: $funcType([sliceType$26], [JQuery], true)}, {prop: "Parents", name: "Parents", pkg: "", typ: $funcType([sliceType$27], [JQuery], true)}, {prop: "ParentsUntil", name: "ParentsUntil", pkg: "", typ: $funcType([sliceType$28], [JQuery], true)}, {prop: "Prev", name: "Prev", pkg: "", typ: $funcType([sliceType$29], [JQuery], true)}, {prop: "PrevAll", name: "PrevAll", pkg: "", typ: $funcType([sliceType$30], [JQuery], true)}, {prop: "PrevUntil", name: "PrevUntil", pkg: "", typ: $funcType([sliceType$31], [JQuery], true)}, {prop: "Siblings", name: "Siblings", pkg: "", typ: $funcType([sliceType$32], [JQuery], true)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([sliceType$33], [JQuery], true)}, {prop: "Children", name: "Children", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Wrap", name: "Wrap", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "WrapAll", name: "WrapAll", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "WrapInner", name: "WrapInner", pkg: "", typ: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([sliceType$34], [JQuery], true)}, {prop: "NextAll", name: "NextAll", pkg: "", typ: $funcType([sliceType$35], [JQuery], true)}, {prop: "NextUntil", name: "NextUntil", pkg: "", typ: $funcType([sliceType$36], [JQuery], true)}, {prop: "Not", name: "Not", pkg: "", typ: $funcType([sliceType$37], [JQuery], true)}, {prop: "Filter", name: "Filter", pkg: "", typ: $funcType([sliceType$38], [JQuery], true)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([sliceType$39], [JQuery], true)}, {prop: "First", name: "First", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Has", name: "Has", pkg: "", typ: $funcType([$String], [JQuery], false)}, {prop: "Is", name: "Is", pkg: "", typ: $funcType([sliceType$40], [$Bool], true)}, {prop: "Last", name: "Last", pkg: "", typ: $funcType([], [JQuery], false)}, {prop: "Ready", name: "Ready", pkg: "", typ: $funcType([funcType$6], [JQuery], false)}, {prop: "Resize", name: "Resize", pkg: "", typ: $funcType([sliceType$41], [JQuery], true)}, {prop: "Scroll", name: "Scroll", pkg: "", typ: $funcType([sliceType$42], [JQuery], true)}, {prop: "FadeOut", name: "FadeOut", pkg: "", typ: $funcType([sliceType$43], [JQuery], true)}, {prop: "Select", name: "Select", pkg: "", typ: $funcType([sliceType$44], [JQuery], true)}, {prop: "Submit", name: "Submit", pkg: "", typ: $funcType([sliceType$45], [JQuery], true)}, {prop: "Trigger", name: "Trigger", pkg: "", typ: $funcType([sliceType$46], [JQuery], true)}, {prop: "On", name: "On", pkg: "", typ: $funcType([sliceType$47], [JQuery], true)}, {prop: "One", name: "One", pkg: "", typ: $funcType([sliceType$48], [JQuery], true)}, {prop: "Off", name: "Off", pkg: "", typ: $funcType([sliceType$49], [JQuery], true)}, {prop: "Load", name: "Load", pkg: "", typ: $funcType([sliceType$50], [JQuery], true)}, {prop: "Serialize", name: "Serialize", pkg: "", typ: $funcType([], [$String], false)}, {prop: "SerializeArray", name: "SerializeArray", pkg: "", typ: $funcType([], [ptrType$2], false)}];
	JQuery.init([{prop: "o", name: "o", pkg: "github.com/gopherjs/jquery", typ: ptrType$3, tag: ""}, {prop: "Jquery", name: "Jquery", pkg: "", typ: $String, tag: "js:\"jquery\""}, {prop: "Selector", name: "Selector", pkg: "", typ: $String, tag: "js:\"selector\""}, {prop: "Length", name: "Length", pkg: "", typ: $Int, tag: "js:\"length\""}, {prop: "Context", name: "Context", pkg: "", typ: $String, tag: "js:\"context\""}]);
	JQueryCoordinates.init([{prop: "Left", name: "Left", pkg: "", typ: $Int, tag: ""}, {prop: "Top", name: "Top", pkg: "", typ: $Int, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_jquery = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_jquery.$blocking = true; return $init_jquery;
	};
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, jasmine, vdom, js, jquery, ptrType, sliceType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$1, sliceType$2, sliceType$3, jq, main, setUpDOM, expectExistsInDom;
	jasmine = $packages["github.com/albrow/jasmine"];
	vdom = $packages["github.com/albrow/vdom"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	jquery = $packages["github.com/gopherjs/jquery"];
	ptrType = $ptrType(vdom.Element);
	sliceType = $sliceType($emptyInterface);
	ptrType$1 = $ptrType(vdom.Element);
	ptrType$2 = $ptrType(vdom.Element);
	ptrType$3 = $ptrType(vdom.Element);
	ptrType$4 = $ptrType(vdom.Element);
	ptrType$5 = $ptrType(vdom.Tree);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType($Uint8);
	sliceType$3 = $sliceType($emptyInterface);
	main = function() {
		jasmine.Describe("Tests", (function() {
			jasmine.It("can be loaded", (function() {
				jasmine.Expect(new $Bool(true)).ToBe(new $Bool(true));
			}));
			jasmine.It("can create a sandbox", (function() {
				var sandbox;
				sandbox = $global.sandbox();
				$global.setFixtures(sandbox);
				$global.expect(sandbox).toExist();
				$global.expect(sandbox).toBeInDOM();
			}));
		}));
		jasmine.Describe("PartialSelector", (function() {
			var sandbox;
			sandbox = null;
			jasmine.BeforeEach((function() {
				sandbox = $global.sandbox();
				$global.setFixtures(sandbox);
			}));
			jasmine.It("works with a single root element", (function() {
				var _tuple, el, gotEl, html, tree, vEl, x;
				html = "<div></div>";
				_tuple = setUpDOM(html, sandbox); tree = _tuple[0]; el = _tuple[1];
				vEl = $assertType((x = tree.Roots, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType);
				gotEl = $clone(jq(new sliceType([new $String("#sandbox" + vEl.PartialSelector())])), jquery.JQuery);
				expectExistsInDom(jq(new sliceType([el])));
				jasmine.Expect(el).ToEqual(new gotEl.constructor.elem(gotEl));
			}));
			jasmine.It("works with a ul and nested lis", (function() {
				var _i, _ref, _tuple, el, gotEl, gotLi, html, tree, vEl, vLi, vNode, x;
				html = "<ul><li>one</li><li>two</li><li>three</li></ul>";
				_tuple = setUpDOM(html, sandbox); tree = _tuple[0]; el = _tuple[1];
				vEl = $assertType((x = tree.Roots, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType$1);
				gotEl = $clone(jq(new sliceType([new $String("#sandbox" + vEl.PartialSelector())])), jquery.JQuery);
				expectExistsInDom(gotEl);
				jasmine.Expect(el).ToEqual(new gotEl.constructor.elem(gotEl));
				_ref = vEl.Children();
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					vNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					vLi = $assertType(vNode, ptrType$2);
					gotLi = $clone(jq(new sliceType([new $String("#sandbox" + vLi.PartialSelector())])), jquery.JQuery);
					expectExistsInDom(gotLi);
					_i++;
				}
			}));
			jasmine.It("works with a form with autoclosed tags", (function() {
				var _i, _ref, _tuple, el, gotEl, gotInput, html, tree, vEl, vInput, vNode, x;
				html = "<form method=\"post\"><input type=\"text\" name=\"firstName\"><input type=\"text\" name=\"lastName\"></form>";
				_tuple = setUpDOM(html, sandbox); tree = _tuple[0]; el = _tuple[1];
				vEl = $assertType((x = tree.Roots, (0 >= x.$length ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType$3);
				gotEl = $clone(jq(new sliceType([new $String("#sandbox" + vEl.PartialSelector())])), jquery.JQuery);
				expectExistsInDom(gotEl);
				jasmine.Expect(el).ToEqual(new gotEl.constructor.elem(gotEl));
				_ref = vEl.Children();
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					vNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
					vInput = $assertType(vNode, ptrType$4);
					gotInput = $clone(jq(new sliceType([new $String("#sandbox" + vInput.PartialSelector())])), jquery.JQuery);
					expectExistsInDom(gotInput);
					_i++;
				}
			}));
		}));
	};
	setUpDOM = function(html, sandbox) {
		var _tmp, _tmp$1, _tuple, el, err, html, root = sliceType$1.nil, sandbox, tree = ptrType$5.nil;
		_tuple = vdom.Parse(new sliceType$2($stringToBytes(html))); tree = _tuple[0]; err = _tuple[1];
		jasmine.Expect(err).ToBe($ifaceNil);
		el = jquery.ParseHTML(html);
		jq(new sliceType([new $jsObjectPtr(sandbox)])).Append(new sliceType$3([el]));
		expectExistsInDom(jq(new sliceType([el])));
		_tmp = tree; _tmp$1 = el; tree = _tmp; root = _tmp$1;
		return [tree, root];
	};
	expectExistsInDom = function(el) {
		var el;
		el = $clone(el, jquery.JQuery);
		$global.expect($externalize(el, jquery.JQuery)).toExist();
		$global.expect($externalize(el, jquery.JQuery)).toBeInDOM();
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_main = function() { while (true) { switch ($s) { case 0:
		$r = jasmine.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = vdom.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = jquery.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		jq = jquery.NewJQuery;
		main();
		/* */ } return; } }; $init_main.$blocking = true; return $init_main;
	};
	return $pkg;
})();
$synthesizeMethods();
$packages["runtime"].$init()();
$go($packages["main"].$init, [], true);
$flushConsole();

}).call(this);
//# sourceMappingURL=test.js.map
